1
00:00:02,160 --> 00:00:08,100
Ho aggiunto la mia regola qui nell'ultima lezione ma manca un caricatore e per javascript ho detto che

2
00:00:08,100 --> 00:00:15,420
voglio usare babel, lo standard defacto per traspolare il mio javascript. Lo installeremo con npm install --save-dev di

3
00:00:15,630 --> 00:00:21,830
nuovo perch  una dipendenza solo per lo sviluppo e abbiamo bisogno di

4
00:00:21,840 --> 00:00:23,850
installare il pacchetto babel-loader,

5
00:00:23,910 --> 00:00:31,740
che tuttavia fornisce solo l'hook per il webpack. Babel  di per s una libreria che ha

6
00:00:31,740 --> 00:00:34,570
la conoscenza di come traspare il tuo

7
00:00:34,710 --> 00:00:39,660
javascript, quindi abbiamo anche bisogno di installare babel-core che contiene questa conoscenza.

8
00:00:39,660 --> 00:00:46,230
Ora abbiamo anche bisogno di alcune configurazioni per dire a babel quale tipo

9
00:00:46,440 --> 00:00:54,330
di javascript di prossima generazione o quale speciale javascript sintassi vogliamo supportare e qui, questi

10
00:00:54,330 --> 00:01:06,150
sono i cosiddetti preset, i pacchetti di cui abbiamo bisogno sono babel-preset-react per supportare jsx e babel -preset-env per un ambiente che regola

11
00:01:06,180 --> 00:01:13,320
il preset che fondamentalmente d un'occhiata alle caratteristiche che usiamo e traspone automaticamente tutto

12
00:01:13,320 --> 00:01:14,550
correttamente.

13
00:01:14,670 --> 00:01:17,620
Quindi queste sono le dipendenze che installer ora, ora

14
00:01:17,820 --> 00:01:24,180
dobbiamo anche configurare il nostro progetto, dobbiamo prima configurare babel. Quindi l'installazione  finita, ora dobbiamo configurare babel

15
00:01:24,180 --> 00:01:24,700
perch

16
00:01:24,720 --> 00:01:30,630
solo perch abbiamo installato i preset non facciamo Babel ad usarli, non analizza tutti gli

17
00:01:30,630 --> 00:01:36,510
altri pacchetti che abbiamo installato e quindi vediamo se c' un preset all'interno di essi.

18
00:01:36,540 --> 00:01:42,040
Quindi, invece, aggiungiamo un nuovo file, punto e il punto all'inizio  importante,. babelrc.

19
00:01:43,230 --> 00:01:47,710
questo  un file di configurazione che babel legger automaticamente se si trova nella nostra cartella

20
00:01:47,730 --> 00:01:56,430
principale, quindi nella stessa cartella in cui eseguiremo il nostro flusso di lavoro di compilazione webpack. Il file babelrc richiede una configurazione adiacente e dovremmo aggiungere

21
00:01:56,430 --> 00:02:00,610
un nodo predefinito, ora possiamo rendere Babel consapevole di

22
00:02:00,810 --> 00:02:06,810
tutti i preset che vogliamo applicare e qui, voglio applicare due dei preset,

23
00:02:06,840 --> 00:02:07,540
il primo

24
00:02:07,560 --> 00:02:10,730
 env e il secondo  reagire.

25
00:02:11,010 --> 00:02:15,930
Quindi questi sono i due preset che abbiamo installato senza la babel-preset-thing all'inizio,

26
00:02:16,050 --> 00:02:21,120
solo il percorso alla fine quindi reagisci ed env, questi sono i due preset.

27
00:02:21,120 --> 00:02:26,480
Ora il preset env ricever una configurazione speciale dal mio lato, lo faccio

28
00:02:26,550 --> 00:02:33,000
racchiudendolo in un array con parentesi quadre e quindi il secondo argomento dopo il nome del

29
00:02:33,000 --> 00:02:36,160
preset  un oggetto javascript dove posso configurarlo

30
00:02:36,260 --> 00:02:40,250
e qui voglio impostare gli obiettivi di quel preset che

31
00:02:40,260 --> 00:02:43,650
indica quali versioni del browser voglio supportare, questo

32
00:02:43,650 --> 00:02:44,970
 ovviamente importante.

33
00:02:44,970 --> 00:02:49,220
Identifica automaticamente le funzioni di nuova generazione che uso ma per sapere

34
00:02:49,310 --> 00:02:55,240
cosa significa realmente la prossima generazione, ha bisogno di sapere qual  il mio gen attuale, quindi

35
00:02:55,260 --> 00:02:58,590
quali browser scelgo come target con la mia app?

36
00:02:58,830 --> 00:03:05,490
Quindi target  un altro oggetto javascript in cui possiamo quindi configurare browser e browser,

37
00:03:05,500 --> 00:03:12,780
quindi  un array in cui possiamo utilizzare il tipo di configurazione dell'elenco browser, puoi google

38
00:03:12,900 --> 00:03:20,640
per l'elenco dei browser per trovare questo repository qui per ulteriori informazioni sulla sintassi che puoi utilizzare

39
00:03:20,640 --> 00:03:22,530
per la configurazione dei browser.

40
00:03:22,890 --> 00:03:23,920
Comunque la sintassi

41
00:03:23,940 --> 00:03:27,050
che ti mostrer qui  un set abbastanza comune.

42
00:03:27,390 --> 00:03:32,660
Quindi, quello che vogliamo fare qui  di mirare a un maggiore

43
00:03:33,060 --> 00:03:41,550
1% della quota di mercato o alle ultime due versioni, in modo che questo sia combinato con o in mezzo.

44
00:03:41,550 --> 00:03:48,300
Quindi ora questo  l'ambiente di destinazione che vogliamo supportare e questo  ci che Babel prender in

45
00:03:48,300 --> 00:03:52,000
considerazione quando compileremo il nostro javascript di prossima generazione sul

46
00:03:52,020 --> 00:03:56,960
gen corrente, lo compileremo in javascript che gira nei browser che soddisfano questo criterio.

47
00:03:57,240 --> 00:04:00,300
Quindi, con la configurazione di

48
00:04:00,300 --> 00:04:09,660
babel finita, ora possiamo aggiungere il caricatore babel nella nostra configurazione del webpack, quindi aggiunger un

49
00:04:09,660 --> 00:04:10,990
caricatore tra

50
00:04:11,190 --> 00:04:12,860
virgolette singole, il babel-loader.

51
00:04:12,870 --> 00:04:18,630
Quindi qui prendo il nome completo del pacchetto che abbiamo installato, babel-loader.

52
00:04:19,170 --> 00:04:26,850
Quindi ora verr applicato ai file javascript che compileranno le jsx e le funzionalit

53
00:04:26,850 --> 00:04:36,330
javascript di prossima generazione, ma fallirebbe comunque anche perch importiamo css quale webpack non capirebbe, capisce solo javascript

54
00:04:36,330 --> 00:04:37,710
in modo nativo

55
00:04:37,980 --> 00:04:40,170
e nel componente pizzaImage,

56
00:04:40,370 --> 00:04:43,850
importerebbe css e anche un'immagine, quindi dobbiamo

57
00:04:43,980 --> 00:04:45,920
sostenere anche questo.

58
00:04:46,170 --> 00:04:49,950
Aggiungiamo il supporto per questi tipi di file nella prossima lezione.

