1
00:00:02,290 --> 00:00:09,880
We added javascript and css loaders, now after our very long css loader here, I'll add another

2
00:00:10,300 --> 00:00:14,170
rule and that rule should test for images.

3
00:00:14,260 --> 00:00:24,180
So here, the regular expression will check for files ending with png, jpeg which also might be written with

4
00:00:24,180 --> 00:00:24,690
an E,

5
00:00:24,720 --> 00:00:26,040
therefore it's optional,

6
00:00:26,070 --> 00:00:34,830
the E is optional or gifs let's say, that is the file endings or these are the file endings we support and for

7
00:00:34,840 --> 00:00:43,890
these files, I want to use a loader we have to install with npm install --save-dev of course, the

8
00:00:43,950 --> 00:00:45,380
URL loader.

9
00:00:45,630 --> 00:00:55,260
Now the URL loader is a loader which will take our images and if they are below a certain limit we define,

10
00:00:55,620 --> 00:01:02,880
it will actually convert them into data 64 URLs which it can inline into our documents,

11
00:01:02,910 --> 00:01:08,300
so we don't have to download extra file. But for bigger files, it would be inefficient

12
00:01:08,310 --> 00:01:15,660
so files above that limit we specify will simply be copied to our output folder and it will then generate

13
00:01:15,660 --> 00:01:20,540
a link to these files and put that into our import

14
00:01:20,550 --> 00:01:22,230
we use in our components.

15
00:01:22,230 --> 00:01:28,650
What we do here is we use the URL loader here but now we configure it with query params and we do it

16
00:01:28,650 --> 00:01:30,920
with query params so that the configuration

17
00:01:30,930 --> 00:01:34,730
here, it gets automatically passed onto a fallback

18
00:01:34,830 --> 00:01:38,270
we will use if the limit is exceeded.

19
00:01:38,550 --> 00:01:43,640
Now that fallback is another loader we also need to install though

20
00:01:43,680 --> 00:01:45,740
so that is what I'll also do here

21
00:01:45,870 --> 00:01:52,390
before I continue configuring this I'll run npm install --save-dev file-loader.

22
00:01:52,470 --> 00:01:58,320
Now that is a loader which in the end simply copies the file you could say, because it copies it into a new direction

23
00:01:58,500 --> 00:02:00,070
and gives us a link to it

24
00:02:00,120 --> 00:02:05,180
and that is the fallback we'll use automatically here if we exceed the limit

25
00:02:05,190 --> 00:02:11,670
we now define here. As a query param, limit could be let's say 8000kb,

26
00:02:11,670 --> 00:02:19,470
so anything above that will not be inlined but will be copied. And we need to pass some configuration

27
00:02:19,470 --> 00:02:21,620
to the file loader, the name

28
00:02:21,660 --> 00:02:31,560
and that's also the path of where we want to store that file, I'll use images/name.ext,

29
00:02:31,560 --> 00:02:37,080
these are placeholders taking the original name and extension. So the image is going to get copied into

30
00:02:37,080 --> 00:02:44,040
that folder, in our dist folder because that output set up is taken into account even though we're not

31
00:02:44,040 --> 00:02:45,500
creating a bundle.js file

32
00:02:45,600 --> 00:02:48,070
but the path still is taken into account,

33
00:02:48,120 --> 00:02:54,490
so that is where our images will end up at if they're exceeding this limit.

34
00:02:54,840 --> 00:03:02,430
So this is our loader for images and with that, the image files we import in our javascript files shouldn't

35
00:03:02,430 --> 00:03:04,640
pose a problem anymore.

36
00:03:04,650 --> 00:03:11,250
Now you can add more rules for different file types, for fonts for example, but I'll keep it to dist for

37
00:03:11,250 --> 00:03:11,830
now

38
00:03:12,000 --> 00:03:16,330
and let's now turn our heads towards plugins we might want to use

39
00:03:16,530 --> 00:03:21,380
and then most importantly, have a look at how this actually works and if it does work.

