1
00:00:02,190 --> 00:00:06,800
So we finished the development setup over the last lectures, fixed some bugs

2
00:00:06,810 --> 00:00:09,680
but now we get a working setup which is great.

3
00:00:09,710 --> 00:00:15,470
Now the next step is to work on the production workflow, in my package.json file,

4
00:00:15,480 --> 00:00:17,720
I want to have a second script,

5
00:00:17,760 --> 00:00:18,910
let's name it build

6
00:00:19,230 --> 00:00:24,550
and here I don't want to run the webpack-dev-server but the webpack. Now if I would run it like this, it

7
00:00:24,570 --> 00:00:28,170
would use the setup of the development workflow.

8
00:00:28,410 --> 00:00:33,180
We can actually do this to see the output because the development server did everything in memory,

9
00:00:33,180 --> 00:00:40,260
now we can create the actual files by running npm run build, everything except the start script has to

10
00:00:40,260 --> 00:00:46,860
be executed with npm run, start is the exception with npm start. So npm run build will now run

11
00:00:46,950 --> 00:00:53,350
webpack itself and take the same config file we worked with before but now it gives us this dist

12
00:00:53,370 --> 00:00:59,670
folder where you now see the image file it copied and you see the javascript files here.

13
00:01:00,000 --> 00:01:06,040
You see the index file it copied where it also injected our import and that is all the code we have,

14
00:01:06,210 --> 00:01:11,000
now what you can see this file already is it's not really optimized at all,

15
00:01:11,010 --> 00:01:13,260
this certainly isn't the code we want to ship,

16
00:01:13,410 --> 00:01:14,520
so I'll delete this folder

17
00:01:14,520 --> 00:01:22,370
for now. The goal instead is to have a dedicated workflow for production which does some optimizations,

18
00:01:22,380 --> 00:01:30,570
so what I'll do is I'll add a second config file, webpack.prod.config.js.

19
00:01:30,720 --> 00:01:33,530
Now it won't automatically take this file into account,

20
00:01:33,720 --> 00:01:37,550
we will have to point at it but that's actually super simple.

21
00:01:37,680 --> 00:01:43,640
Now I'll copy the setup from the other file, from the development workflow so that we can adjust it in the

22
00:01:43,860 --> 00:01:45,020
production workflow,

23
00:01:45,060 --> 00:01:47,450
let's see what we need to adjust.

24
00:01:47,520 --> 00:01:48,830
Let's start at the top,

25
00:01:48,900 --> 00:01:56,370
the dev tool, here I'll remove the eval to create more optimal source maps which are less resource intensive,

26
00:01:56,370 --> 00:01:59,760
you can then always decide whether you want to deploy them or not

27
00:01:59,760 --> 00:02:05,100
but it's nice to have source maps here too to quickly find some bugs in the production workflow, if there

28
00:02:05,100 --> 00:02:06,590
are any.

29
00:02:06,650 --> 00:02:15,880
Now the entry file still should be index.js and the output also still makes sense as it is, now

30
00:02:15,920 --> 00:02:18,550
the loaders, what about the loaders?

31
00:02:18,710 --> 00:02:22,420
Well we want to apply the same transformations as in development

32
00:02:22,490 --> 00:02:28,820
so we don't need to touch the loaders, we'll do our work in the plugin section,

33
00:02:28,820 --> 00:02:34,730
now there we have a plugin for connecting the html file and I want to keep that, what I want to do now

34
00:02:34,730 --> 00:02:42,680
is I also want to uglify my output, I want to optimize it and that actually is a plugin that's built into

35
00:02:42,680 --> 00:02:43,200
webpack,

36
00:02:43,220 --> 00:02:45,010
we don't need to install it.

37
00:02:45,380 --> 00:02:49,540
What I'll do is I'll simply import webpack itself into that file,

38
00:02:49,550 --> 00:02:52,640
so webpack via require webpack

39
00:02:53,240 --> 00:03:01,610
and then we can use one of the build in plugins. So down in the plugins section here, I'll add this plugin, here I'll

40
00:03:01,610 --> 00:03:07,520
add new webpack, optimize and there we have the uglify

41
00:03:07,550 --> 00:03:10,160
js plugin. This plugin

42
00:03:10,280 --> 00:03:12,040
now also can be configured

43
00:03:12,470 --> 00:03:17,390
and you can always check out the official github pages of all these plugins and loaders to do so,

44
00:03:17,480 --> 00:03:20,360
I'll take the default setup though, so I'll remove that

45
00:03:20,660 --> 00:03:28,490
and with that I got my production workflow where I also optimize the files, where I minify them to ship

46
00:03:28,490 --> 00:03:31,210
as little code as possible.

47
00:03:31,370 --> 00:03:38,510
Now to use this configuration, I need to adjust my package.json, the build scripts here where I point

48
00:03:38,510 --> 00:03:39,790
at webpack,

49
00:03:39,950 --> 00:03:42,440
I don't want to use the default config

50
00:03:42,470 --> 00:03:48,800
instead I want to use a special one, so I'll use --config, that's a flag we can pass to the webpack

51
00:03:48,800 --> 00:03:55,520
script and there I'll point to webpack.prod.config.js file since this is in the

52
00:03:55,520 --> 00:03:57,800
same folder as the package.json file,

53
00:03:57,950 --> 00:03:59,570
I don't need to specify any path,

54
00:03:59,630 --> 00:04:05,340
I can just specify the filename. With that I'll also add some additional options,

55
00:04:05,360 --> 00:04:13,700
progress, profile, whoops, profile and colors to adjust the console output of the webpack build workflow and

56
00:04:13,730 --> 00:04:18,940
I will install one additional package with npm install --save-dev,

57
00:04:18,950 --> 00:04:26,210
it's called rimraf and it allows us to delete a folder or files and I want to delete the dist folder

58
00:04:26,300 --> 00:04:33,770
at the start of every build process so that we create a brand new one. So I'll execute rimraf dist

59
00:04:33,800 --> 00:04:37,880
first and then two and signs to then run this project

60
00:04:37,880 --> 00:04:42,800
or this command here, excuse me after the deletion is done. With that,

61
00:04:43,040 --> 00:04:48,650
let's run build again, npm run build and let's see if this gives us a nice output,

62
00:04:48,710 --> 00:04:53,600
it gives me an error because it should be --profile here as a webpack flag,

63
00:04:53,660 --> 00:04:54,530
so let's fix this,

64
00:04:54,530 --> 00:05:01,400
save the file and rerun npm run build. Now with that, it's building the project we can see it here,

65
00:05:02,380 --> 00:05:04,810
it should succeed and it does,

66
00:05:04,900 --> 00:05:06,880
it gives us the dist folder still

67
00:05:06,910 --> 00:05:11,410
but if we have a look at the bundle file now, you see this is minified code.

68
00:05:11,410 --> 00:05:15,000
It's a lot of code because it includes the complete react library

69
00:05:15,220 --> 00:05:21,770
but this is all minified and therefore optimized and the same of course in our 0.js file.

70
00:05:21,790 --> 00:05:26,940
So now we got our dist folder and this would be what we upload to a server,

71
00:05:26,950 --> 00:05:28,690
the content of the dist folder.

72
00:05:29,010 --> 00:05:34,720
This is now our own workflow and I hope it became a bit clearer how webpack works and how you can set

73
00:05:34,720 --> 00:05:36,740
up such a custom workflow.

