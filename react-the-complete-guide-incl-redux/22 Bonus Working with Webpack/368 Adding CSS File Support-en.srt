1
00:00:02,160 --> 00:00:04,140
So we added babel in the last lecture,

2
00:00:04,170 --> 00:00:09,720
let's now also support css files and images. For that, I'll add a new rule and I want to start with

3
00:00:09,720 --> 00:00:10,640
css,

4
00:00:10,680 --> 00:00:14,670
so we test for files ending with .css,

5
00:00:14,760 --> 00:00:17,150
that's our simple test.

6
00:00:17,190 --> 00:00:23,470
I also want to exclude anything in node modules here just to be safe

7
00:00:23,880 --> 00:00:29,370
and then we can define which type of loader we want to use here.

8
00:00:29,460 --> 00:00:34,560
Now for css, I actually need a more complex setup, for js

9
00:00:34,560 --> 00:00:39,900
we also have a quite complex set up but that's all handled through babel and our babel config, for css

10
00:00:39,900 --> 00:00:42,820
we'll configure it here in the webpack config file.

11
00:00:42,840 --> 00:00:46,830
So instead of loader I can use use here,

12
00:00:46,980 --> 00:00:52,580
that's the long form, loader is the very short form if we just want to set up a loader without any config,

13
00:00:52,740 --> 00:00:57,620
if we want to set up multiple loaders or a loader with config, we should use use here.

14
00:00:57,750 --> 00:01:00,870
It takes an array of the loaders we want to apply

15
00:01:01,260 --> 00:01:05,210
and here, I now want to install two loaders

16
00:01:05,280 --> 00:01:13,170
I'll do that with npm install --save-dev and I need a loader which basically tells

17
00:01:13,170 --> 00:01:16,430
webpack what to do with these .css imports

18
00:01:16,650 --> 00:01:23,930
and the style loader. That's a loader which will then extract the css code from the css files and

19
00:01:23,940 --> 00:01:26,870
inject it at the top of our html file

20
00:01:26,910 --> 00:01:30,790
hence reducing the amount of file downloads we have to make.

21
00:01:30,810 --> 00:01:36,660
So I'll install both here and now I want to add them of course, for that in my use array,

22
00:01:36,780 --> 00:01:44,490
I'll add a javascript object which has a loader property again where I define the style loader, it's followed

23
00:01:44,940 --> 00:01:50,390
and the order does matter here by another object with a loader, the css loader.

24
00:01:50,490 --> 00:01:53,120
Now important and this is easy to mess up,

25
00:01:53,340 --> 00:01:59,720
webpack parses loaders in this use array and applies them from right to left,

26
00:01:59,730 --> 00:02:02,660
so from bottom to top if we write it like this.

27
00:02:02,820 --> 00:02:09,210
So it first takes the css loader which it should because that makes it understand the css imports

28
00:02:09,210 --> 00:02:10,750
and don't throw an error

29
00:02:11,100 --> 00:02:16,140
and then it applies the style loader on the extracted css code

30
00:02:16,410 --> 00:02:19,120
and that's exactly the order we need here.

31
00:02:19,140 --> 00:02:25,730
Now we can also give the css loader which is responsible for parsing and handling the css

32
00:02:25,730 --> 00:02:35,770
another property which is called options. Now options is a javascript object where we can configure this

33
00:02:35,770 --> 00:02:36,660
loader,

34
00:02:37,060 --> 00:02:45,400
now here I want to set module to true to enable css modules and I'll set up the local ident

35
00:02:45,400 --> 00:02:52,660
name to define how the generated css classes due to css modules should look like.

36
00:02:52,830 --> 00:03:00,160
And here I'll take the name of the class we defined, two underscores then the module name,

37
00:03:00,160 --> 00:03:07,630
so the component name and then a hash to really have unique names, this is the same set up we added in the

38
00:03:07,630 --> 00:03:13,080
styling module to do the configuration create react app gave us.

39
00:03:13,420 --> 00:03:15,710
We're not done with css though,

40
00:03:15,790 --> 00:03:22,000
I also want to add auto-prefixing and for this I'll install another package with --save-dev

41
00:03:22,000 --> 00:03:26,260
post css loader, now post css

42
00:03:26,260 --> 00:03:30,700
sounds like it does something to css after we parse that, here

43
00:03:30,790 --> 00:03:38,830
it'll actually run before the css loader, dive into the css file and adjust our code before css

44
00:03:38,920 --> 00:03:47,170
loader pulls it out and adjusts the class names and so on. The post css loader simply is a loader which

45
00:03:47,170 --> 00:03:49,540
allows us to transform the css,

46
00:03:49,570 --> 00:03:55,320
for example we could also use post css loader to handle sass and stuff like this, here

47
00:03:55,320 --> 00:04:00,820
however I will simply add it as another loader and therefore in third position because it should run

48
00:04:00,820 --> 00:04:02,780
before that css loader.

49
00:04:03,010 --> 00:04:10,600
Here I will set up my loader which is post css loader and I need to set up my options on that loader

50
00:04:11,690 --> 00:04:18,870
with the options key where I now want to set the ident option, that's important internally here

51
00:04:19,070 --> 00:04:24,350
but more important are the plugins, that actually takes a function which returns an array

52
00:04:24,470 --> 00:04:28,950
and these are now steps we should apply or we want to apply to transform everything.

53
00:04:29,270 --> 00:04:36,120
And here I want to run auto prefixer, now auto prefixer needs to be installed.

54
00:04:36,140 --> 00:04:37,530
It's a separate tool.

55
00:04:37,880 --> 00:04:43,990
So I'll run npm install --save-dev auto prefixer,

56
00:04:44,360 --> 00:04:52,040
that's a third party library which is able to auto prefix our css properties, we need to import it

57
00:04:52,130 --> 00:04:53,530
into the config file

58
00:04:53,540 --> 00:05:03,400
so I'll create a new const, autoPrefixer which uses the required syntax to import autoPrefixer, like this.

59
00:05:03,410 --> 00:05:08,120
Now with that import added, we can add this to the plugins array here,

60
00:05:08,120 --> 00:05:11,510
so here I'll add autoPrefixer

61
00:05:11,660 --> 00:05:17,450
and this is actually a function we need to execute and we pass a javascript object to it to configure

62
00:05:17,450 --> 00:05:17,770
it

63
00:05:17,900 --> 00:05:24,110
and there again we pass a list of browsers, so browsers is a list and we can take the list we set up

64
00:05:24,110 --> 00:05:26,830
in babelrc, that's the browser list

65
00:05:26,840 --> 00:05:27,890
I want to support,

66
00:05:28,040 --> 00:05:31,810
I'll just paste it into the browser's list for the autoPrefixer.

67
00:05:31,940 --> 00:05:38,300
So now we prefix css as required for these browsers we support and it will automatically figure out

68
00:05:38,330 --> 00:05:41,450
which browsers these are for us.

69
00:05:41,450 --> 00:05:43,830
That's the bare minimum set up I want to use.

70
00:05:44,060 --> 00:05:50,030
Now since we run one additional loader before css loader, we actually need to inform css loader about

71
00:05:50,030 --> 00:05:50,550
that,

72
00:05:50,570 --> 00:05:53,210
that's just a special set up css loader needs.

73
00:05:53,510 --> 00:06:00,950
So there I'll add import loaders and set this to one because we run one loader before css loader

74
00:06:00,950 --> 00:06:01,860
is applied.

75
00:06:02,210 --> 00:06:06,290
And that's our css handling setup, should be fine,

76
00:06:06,320 --> 00:06:08,920
we'll soon see if it works. With that,

77
00:06:08,930 --> 00:06:16,820
let's continue and let's make sure that we now also can handle images since we also import these.

