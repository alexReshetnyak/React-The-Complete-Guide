1
00:00:02,330 --> 00:00:10,850
To make our project work and servable by the dev server or later in production, we need to connect

2
00:00:10,850 --> 00:00:16,880
our index.html file to the output files which are generated, when using the dev server they are only stored

3
00:00:16,880 --> 00:00:22,100
in memory but they're still generated. We need to install a webpack plugin for that,

4
00:00:22,220 --> 00:00:28,610
with npm install --save-, save dev, excuse me a lot of dashes, with save-dev, we can

5
00:00:28,610 --> 00:00:33,390
install the html-webpack-plugin,

6
00:00:33,830 --> 00:00:40,940
this is a special plugin which allows to connect our html file with our output and webpack will do that

7
00:00:41,000 --> 00:00:47,440
automatically and inject our bundled script and so on into that html file. In the webpack

8
00:00:47,450 --> 00:00:49,920
config, we now add plugins,

9
00:00:49,920 --> 00:00:56,720
it's a new node on the root config level, plugins and it takes an array as an argument or as a value, I should

10
00:00:56,720 --> 00:00:57,340
say.

11
00:00:57,690 --> 00:01:00,420
And now first of all we need to install or import

12
00:01:00,440 --> 00:01:04,900
I should say the html webpack plugin, so I'll create a constant which I'll name

13
00:01:04,910 --> 00:01:08,860
htmlWebpackPlugin but the name is up to you

14
00:01:08,990 --> 00:01:15,290
and here I will require html-webpack-plugin, the package we just installed.

15
00:01:15,290 --> 00:01:17,100
Now in the plugins array,

16
00:01:17,180 --> 00:01:25,190
I create a new instance of it, new HtmlWebpackPlugin and we pass an object to the constructor where

17
00:01:25,190 --> 00:01:27,280
we configure this plugin. Here,

18
00:01:27,290 --> 00:01:32,930
I'll setup a template, so the html file I want to use as a basis and there of course, I want to use

19
00:01:32,930 --> 00:01:43,040
my html file in the source folder. So I will point to it with dirname and then I'll simply add

20
00:01:43,040 --> 00:01:45,370
/source/index.html,

21
00:01:45,410 --> 00:01:47,550
constructing a path to it.

22
00:01:47,550 --> 00:01:50,960
So now we're pointing to the file we want to use as a template,

23
00:01:50,990 --> 00:01:58,400
I want to inject my stuff into the body that's extra configuration we can pass to the plugin here and

24
00:01:58,430 --> 00:02:02,890
the output file, filename should also be index.html,

25
00:02:02,930 --> 00:02:06,780
that's the file it will eventually generate, again for the server

26
00:02:06,890 --> 00:02:08,150
only in memory,

27
00:02:08,150 --> 00:02:14,330
later when we use a different workflow for building this, for production, it will give us the real files we

28
00:02:14,330 --> 00:02:16,310
could upload to a server.

29
00:02:16,340 --> 00:02:20,040
So with that added, let's now restart npm start,

30
00:02:20,090 --> 00:02:25,040
now we should get the connection from webpack to the html file,

31
00:02:25,050 --> 00:02:32,660
so let's see if that then works. Let's revisit localhost8080 and we do see an empty page

32
00:02:32,660 --> 00:02:35,630
now at least, we get some errors there though.

33
00:02:35,720 --> 00:02:38,900
Now these are react errors which is a good sign,

34
00:02:38,900 --> 00:02:46,010
our application seems to run, it's informing us that we likely forgot to export our component from the

35
00:02:46,010 --> 00:02:48,620
file it's defined in. Let's check,

36
00:02:48,620 --> 00:02:56,240
we're exporting the pizzaImage, the pizza class based component and the user component but we never exported

37
00:02:56,290 --> 00:02:56,960
the app,

38
00:02:57,050 --> 00:03:01,130
so let's add a default export to the app component,

39
00:03:01,130 --> 00:03:03,620
that's always the danger in building something

40
00:03:03,890 --> 00:03:05,300
and now this looks much better,

41
00:03:05,300 --> 00:03:12,920
we see the users and now it becomes interesting, that's the pizza. We see the pizza and awesome is if we inspect

42
00:03:12,920 --> 00:03:19,730
the network tab and I go back to users and reload the app, watch the network requests,

43
00:03:19,730 --> 00:03:21,730
you see that 0.js file?

44
00:03:21,740 --> 00:03:28,100
That's our lazy loaded javascript file we downloaded, so lazy loading is working here and our react

45
00:03:28,100 --> 00:03:29,740
application is working,

46
00:03:29,840 --> 00:03:33,450
the styling also seems to kick in, if we inspect the pizza image

47
00:03:33,470 --> 00:03:40,520
we see we're using css modules here and we get the styles we setup in our css files.

48
00:03:40,520 --> 00:03:44,330
Now all I'll do here is a quick and easy fix here on the links,

49
00:03:44,330 --> 00:03:49,800
I don't like the fact that we don't have a whitespace in front of the second link, let's fix it like that

50
00:03:49,820 --> 00:03:51,080
but that's purely cosmetic.

51
00:03:51,080 --> 00:03:57,920
What's important to us is we have a working workflow, a working project setup where we can create

52
00:03:57,950 --> 00:04:02,450
a react app with the features you learned about in this course.

53
00:04:02,450 --> 00:04:05,900
Now that's only the development workflow, the development server,

54
00:04:06,050 --> 00:04:11,510
if we now want to ship this app to a real server, we'll have to do some adjustments to the setup to

55
00:04:11,510 --> 00:04:15,050
have it prepared and to have it be optimized for production.

