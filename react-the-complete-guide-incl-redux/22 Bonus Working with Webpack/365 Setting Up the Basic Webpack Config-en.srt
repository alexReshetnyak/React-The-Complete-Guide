1
00:00:02,110 --> 00:00:06,790
In the last lecture we installed some production dependencies, dependencies we'll need for the core of

2
00:00:06,790 --> 00:00:08,100
our application,

3
00:00:08,110 --> 00:00:10,870
now I want to start working on the webpack config.

4
00:00:11,020 --> 00:00:13,780
We already installed the webpack tool,

5
00:00:13,840 --> 00:00:15,200
here's the dependency in the package.json

6
00:00:15,260 --> 00:00:21,610
file and I said that I will manage the workflow through the scripts we have here which we

7
00:00:21,610 --> 00:00:27,880
then can run with npm run and then the script name or in the case of the special script, npm start we

8
00:00:27,880 --> 00:00:34,350
can just type npm start, and the start script should be the one launching the development server.

9
00:00:34,570 --> 00:00:41,170
So I want to add a new script to the scripts section which is called start and on the right side of the

10
00:00:41,170 --> 00:00:48,090
colon, in the double quotation marks which you need to use since this file uses the json format, here

11
00:00:48,160 --> 00:00:51,390
I want to simply execute webpack-dev-server,

12
00:00:51,520 --> 00:00:53,030
make sure to not mistype,

13
00:00:53,170 --> 00:01:00,690
this has to be the name of this package which simply exposes a function you execute with this call.

14
00:01:00,730 --> 00:01:02,590
So this will spin up the dev server,

15
00:01:02,680 --> 00:01:05,570
however the dev server out of the box won't work,

16
00:01:05,590 --> 00:01:11,670
we need to configure it and to configure it, I'll add a new file next to the package.json file,

17
00:01:12,080 --> 00:01:15,870
I'll name it webpack.config.js

18
00:01:15,880 --> 00:01:19,020
this is a special file name,

19
00:01:19,030 --> 00:01:25,120
make sure to name it exactly like this webpack.config.js. Webpack will automatically look

20
00:01:25,120 --> 00:01:31,870
for this file when executing either webpack or webpack-dev-server as we do here, so it will automatically

21
00:01:31,870 --> 00:01:33,540
take this file into account,

22
00:01:33,640 --> 00:01:36,550
therefore you have to get the naming right. Now

23
00:01:36,560 --> 00:01:37,410
in this file,

24
00:01:37,420 --> 00:01:39,510
I'll set up my development workflow.

25
00:01:39,520 --> 00:01:45,610
We'll later create a separate file for the production workflow because there, we will differ in some aspects,

26
00:01:45,790 --> 00:01:49,070
we will apply some extra optimizations and so on.

27
00:01:49,090 --> 00:01:54,240
So in the webpack.config.js file, I'll now set up my webpack workflow

28
00:01:54,550 --> 00:01:59,530
and for that, we need to export something here which webpack will then use,

29
00:01:59,530 --> 00:02:06,760
we do this with the node export format by writing module.exports and we then set this equal to a javascript

30
00:02:06,790 --> 00:02:07,580
object.

31
00:02:07,750 --> 00:02:15,410
So this is the syntax webpack understands to read in the config we now specify in this javascript object

32
00:02:15,410 --> 00:02:21,150
and I did mention the four important aspects of that configuration earlier on a slide,

33
00:02:21,400 --> 00:02:30,160
let's start with the entry point. Here we define where the journey starts for webpack and we want to point

34
00:02:30,430 --> 00:02:32,650
to our index.js file here.

35
00:02:32,950 --> 00:02:38,070
So here I'll point to ./source index.js,

36
00:02:39,280 --> 00:02:44,950
this tells webpack that it should look at this file first and then analyze the dependencies of that

37
00:02:44,960 --> 00:02:47,110
file which are all the imports

38
00:02:47,440 --> 00:02:50,470
and then it is able to do something with these imports.

39
00:02:50,680 --> 00:02:56,770
However to be able to handle css or any other non javascript file, we need to give webpack some

40
00:02:56,770 --> 00:02:57,860
extra set up,

41
00:02:57,940 --> 00:03:02,950
we need to do this for javascript files too though since we use jsx which is not native javascript

42
00:03:03,280 --> 00:03:06,730
and since we use next generation javascript features too,

43
00:03:07,000 --> 00:03:09,410
we also import images and stuff like that

44
00:03:09,520 --> 00:03:15,630
so that's all the stuff we have to handle with loaders later. Before we do that,

45
00:03:15,640 --> 00:03:18,010
I'll add one additional configuration,

46
00:03:18,220 --> 00:03:24,730
it's called dev tool and here we can define which kind of source maps, if any webpack should generate

47
00:03:25,210 --> 00:03:30,820
and I'll use cheap-module-eval-source-map here.

48
00:03:30,820 --> 00:03:37,280
Now that's super confusing long term, in the end it is the best kind of source maps you can generate for the

49
00:03:37,390 --> 00:03:37,790
development,

50
00:03:37,900 --> 00:03:39,990
very detailed, good performance,

51
00:03:40,030 --> 00:03:45,850
so this is what you should use here to get source maps which allow you to easily debug your original

52
00:03:45,850 --> 00:03:48,070
code in the browser.

53
00:03:48,070 --> 00:03:49,740
So with that we get the entry

54
00:03:49,750 --> 00:03:58,390
let's now also define the output so the output key and here I want to create a new folder with a file,

55
00:03:58,570 --> 00:04:03,670
output is not just a string, it's an object and in that object we configured the path,

56
00:04:03,670 --> 00:04:05,580
so where this should be stored,

57
00:04:05,680 --> 00:04:06,740
the file name,

58
00:04:06,790 --> 00:04:09,920
so where our or how our file should be named

59
00:04:10,270 --> 00:04:12,170
and the public path,

60
00:04:12,370 --> 00:04:18,300
that's important for webpack to know where our files are put to

61
00:04:18,610 --> 00:04:24,820
and if that then is the root folder of the server in the end or if it's a nested folder.

62
00:04:24,970 --> 00:04:28,250
So here it should be the root folder so public path is just an empty string

63
00:04:28,270 --> 00:04:35,860
which means you store the files in a specific folder and you don't need to adjust any imports or adjust

64
00:04:35,860 --> 00:04:37,060
for anything,

65
00:04:37,060 --> 00:04:41,640
the file structure, the folder structure will be the folder structure as we deployed

66
00:04:41,650 --> 00:04:45,870
in the end. More important is the file name, here

67
00:04:45,940 --> 00:04:47,100
that's a string too,

68
00:04:47,250 --> 00:04:50,620
we define what the file should be named and I want to name it

69
00:04:50,620 --> 00:04:51,840
bundle.js,

70
00:04:51,870 --> 00:04:56,500
it's a convention to use bundle.js just because it is a bundled javascript in the end.

71
00:04:56,500 --> 00:04:59,520
Now you might wonder what happens to css images,

72
00:04:59,650 --> 00:05:06,520
this will be handled differently by certain loaders we add and the loaders will define where the css

73
00:05:06,640 --> 00:05:08,160
or image code is put,

74
00:05:08,230 --> 00:05:10,270
so this only affects javascript

75
00:05:10,270 --> 00:05:12,470
therefore it's bundle.js.

76
00:05:12,790 --> 00:05:15,040
Now the path is also important,

77
00:05:15,040 --> 00:05:18,020
where should the assets be stored?

78
00:05:18,460 --> 00:05:26,670
And there I will actually import a node module which is called path which I do with the node import

79
00:05:26,680 --> 00:05:29,770
style where I require the path module.

80
00:05:29,800 --> 00:05:34,600
Now we didn't install this with npm install but it is a default node module,

81
00:05:34,660 --> 00:05:43,150
so since we have node installed we can also pull this in. The path object here has a resolve method which

82
00:05:43,150 --> 00:05:46,870
allows us to generate an absolute path in the end, here

83
00:05:46,900 --> 00:05:52,860
we can pass a special variable which we have available in node systems and webpack will use node

84
00:05:52,870 --> 00:05:53,750
behind the scenes,

85
00:05:53,770 --> 00:05:55,560
so it will have access to that variable,

86
00:05:55,570 --> 00:06:00,620
it's __dirname and it refers to the directory

87
00:06:00,640 --> 00:06:06,700
this is running and then the second argument to resolve is the folder where we want to create it and

88
00:06:06,700 --> 00:06:14,260
resolve will then create an absolute path taking the full path to the current folder on our operating

89
00:06:14,260 --> 00:06:16,860
system and appending dist,

90
00:06:17,050 --> 00:06:22,510
so it will in the end output a file in the dist folder which doesn't exist yet which it will create

91
00:06:22,550 --> 00:06:25,300
instead which is named bundle.js,

92
00:06:25,300 --> 00:06:27,920
this is the output of this operation.

93
00:06:28,210 --> 00:06:30,150
Now that is the base set up here,

94
00:06:30,190 --> 00:06:33,610
this doesn't transform any files or anything like that though

95
00:06:33,640 --> 00:06:36,920
so these are all things I'll take care about in the next lectures.

