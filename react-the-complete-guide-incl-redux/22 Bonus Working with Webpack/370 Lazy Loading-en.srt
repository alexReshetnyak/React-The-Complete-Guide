1
00:00:02,180 --> 00:00:07,450
So in the last lecture, we finished our rule setup with adding a rule for images,

2
00:00:07,460 --> 00:00:12,520
now I want to have a look at plugins and then see if the setup actually works.

3
00:00:12,560 --> 00:00:17,920
Now regarding plugins, it's actually super simple for us here,

4
00:00:17,990 --> 00:00:20,360
we don't need any for development workflow,

5
00:00:20,420 --> 00:00:25,450
we will add one later when we set this up for production, there

6
00:00:25,460 --> 00:00:26,950
I want to add some plugin

7
00:00:27,110 --> 00:00:30,880
but for now that is all, I won't add a plugin here.

8
00:00:31,310 --> 00:00:38,720
So with that we can have a look at the setup we used here and see if we save the file, if this works

9
00:00:38,930 --> 00:00:44,900
if we run our start script which runs the dev server which I said would automatically take this config

10
00:00:44,900 --> 00:00:45,740
file.

11
00:00:45,860 --> 00:00:50,980
So let's run this script with npm start, make sure all files are saved

12
00:00:51,200 --> 00:00:58,990
and let's see if this works, we get an error here that the path is not an absolute path,

13
00:00:59,040 --> 00:01:02,240
so something with our output path is wrong.

14
00:01:02,370 --> 00:01:04,390
Let's have a look at it, let's go to our webpack

15
00:01:04,530 --> 00:01:07,360
config, path here for output,

16
00:01:07,770 --> 00:01:09,990
well I messed that up, didn't I?

17
00:01:10,090 --> 00:01:16,660
Path should be this part here and public path should be the empty string,

18
00:01:16,860 --> 00:01:19,770
so with this fix let's now try it again,

19
00:01:19,770 --> 00:01:22,260
also make sure to save the updated config file.

20
00:01:23,130 --> 00:01:26,460
So now at least it doesn't crash when starting the server,

21
00:01:26,970 --> 00:01:32,580
it does give us an error though that it doesn't understand this import syntax here, the

22
00:01:32,650 --> 00:01:36,010
dynamic import syntax, it doesn't understand this.

23
00:01:36,210 --> 00:01:45,190
So how do we make it to understand this dynamic import? We need to adjust our setup here to be able to

24
00:01:45,190 --> 00:01:48,910
create dynamically generated extra chunks of code,

25
00:01:49,180 --> 00:01:54,850
lazy loading means that it's an extra bundle and not part of the main bundle which is downloaded initially,

26
00:01:55,270 --> 00:02:01,420
to support code splitting in webpack and code splitting is just a different name for lazy loading,

27
00:02:01,480 --> 00:02:05,000
I have to add chunkFileName here to my output config.

28
00:02:05,120 --> 00:02:12,460
This simply determines what these other files, the separate files which are generated for the lazy loaded

29
00:02:12,460 --> 00:02:15,040
code which is of course not included in the bundle,

30
00:02:15,040 --> 00:02:17,220
that would defeat the purpose of code splitting,

31
00:02:17,500 --> 00:02:19,540
what these file name should be named.

32
00:02:19,690 --> 00:02:24,890
They have to have a variable part in their name because they are generated by webpack dynamically,

33
00:02:25,000 --> 00:02:26,500
I'll use ID.js

34
00:02:26,530 --> 00:02:33,050
here, IDs are dynamically generated ID 0, 1, 2 and so on, generated by webpack

35
00:02:33,190 --> 00:02:37,750
so that feature is outsourced into separate bundles received their own javascript files.

36
00:02:38,140 --> 00:02:45,090
Additionally we need to make babel aware of this dynamic import syntax which it otherwise doesn't understand,

37
00:02:45,400 --> 00:02:50,650
so what I'll do is I'll install a plugin, npm install --save-dev,

38
00:02:50,650 --> 00:02:59,800
it's called babel-plugin-syntax dynamic import and this will make sure that babel understands

39
00:02:59,800 --> 00:03:01,720
this dynamic import syntax.

40
00:03:02,020 --> 00:03:08,980
So once this was installed, we can go to the babelrc file and we already get presets, now I'll also add a

41
00:03:08,980 --> 00:03:13,150
plugins node here which also is an array

42
00:03:13,200 --> 00:03:17,490
and here I'll add my syntax dynamic import plugin,

43
00:03:17,570 --> 00:03:19,730
so that's the name of the plugin.

44
00:03:19,940 --> 00:03:26,720
With that added, let's save all these files and let's retry npm start and see if this now works,

45
00:03:26,720 --> 00:03:29,320
now this compiles but we get a different error,

46
00:03:29,390 --> 00:03:35,270
we get an error that this syntax here where we assign our properties like this isn't liked.

47
00:03:35,270 --> 00:03:42,590
The reason for this is that the env preset which we're using, this one here only supports latest browser

48
00:03:42,590 --> 00:03:45,550
features that are part of the specification,

49
00:03:45,740 --> 00:03:51,710
this special property syntax is only in draft state though and it's not included in the env preset,

50
00:03:52,070 --> 00:03:54,790
isn't a problem though we just have to add another preset.

51
00:03:54,860 --> 00:04:04,550
So with npm install save-dev, we now install another preset which is named babel-preset-stage-2,

52
00:04:04,550 --> 00:04:11,300
stage 2 presets simply are draft features which may eventually get supported but which we

53
00:04:11,300 --> 00:04:13,280
already want to use.

54
00:04:13,280 --> 00:04:22,040
So with that we have to add this to our setup here and I'll add my preset in the middle, I'll add stage-2

55
00:04:22,670 --> 00:04:25,380
here, like this.

56
00:04:25,400 --> 00:04:29,240
Let's now try this again with npm start and now this looks better,

57
00:04:29,240 --> 00:04:31,200
at least we don't get an error,

58
00:04:31,460 --> 00:04:33,840
we'll face one problem though.

59
00:04:33,860 --> 00:04:41,480
The application is now served and by default, it's doing that on localhost8080, so let's open that,

60
00:04:41,960 --> 00:04:44,510
there however we won't see app,

61
00:04:44,750 --> 00:04:51,530
the reason is that we didn't connect our build output which by the way is not stored in the dist folder

62
00:04:51,530 --> 00:04:57,150
when we use webpack dev-server but in memory, that we didn't connect that output with the index.html

63
00:04:57,170 --> 00:04:57,840
file,

64
00:04:57,860 --> 00:04:59,730
we have no imports in that file,

65
00:04:59,750 --> 00:05:01,970
how would we add the script to it?

66
00:05:02,000 --> 00:05:08,000
That is something we have to do on our own and we will do that in the next lecture.

