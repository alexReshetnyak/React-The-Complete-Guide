1
00:00:02,160 --> 00:00:09,450
Esta  a imagem maior do que o Webpack  e faz, vamos entender como ele funciona nos bastidores, j que  uma ferramenta to

2
00:00:09,450 --> 00:00:16,470
crucial para lidar com todo o nosso fluxo de trabalho de criao. Nos bastidores, o webpack tem quatro coisas

3
00:00:16,470 --> 00:00:20,180
importantes, quatro caractersticas importantes, sempre precisa de pelo

4
00:00:20,490 --> 00:00:23,250
menos um ponto de entrada, voc

5
00:00:23,250 --> 00:00:25,040
pode ter vrios.

6
00:00:25,050 --> 00:00:32,460
Este poderia ser nosso aplicativo. js arquivo, o nosso arquivo javascript raiz que monta o

7
00:00:32,460 --> 00:00:39,360
nosso reagir para o dom, que chama reagir dom render por exemplo, ele precisa deste arquivo, pois analisa as

8
00:00:39,360 --> 00:00:45,870
dependncias deste arquivo eo arquivo de entrada raiz ter uma dependncia para outro arquivo que ento, por sua

9
00:00:45,870 --> 00:00:52,450
vez, tem mais dependncias, ento o webpack pode construir um grfico de dependncia comeando com aquele arquivo de

10
00:00:52,670 --> 00:00:56,280
entrada raiz para que ele possa entender quais arquivos compem

11
00:00:56,320 --> 00:01:03,390
nosso aplicativo se dermos a ele nosso arquivo de entrada. Em seguida, analisa todas as dependncias e agrupa-as

12
00:01:03,450 --> 00:01:03,960
em

13
00:01:03,960 --> 00:01:10,100
uma sada que especificamos como um pacote. arquivo js em uma pasta dist, especificamos o nome do arquivo e para onde ele deve ir.

14
00:01:10,470 --> 00:01:17,100
E l, colocar todas essas dependncias nesse arquivo, corretamente ordenadas e em um

15
00:01:17,220 --> 00:01:19,010
arquivo de sada concatenado.

16
00:01:19,110 --> 00:01:22,840
Esta  a principal funcionalidade, mas como eu disse,  mais

17
00:01:22,990 --> 00:01:26,780
do que isso, existem dois outros recursos importantes que podemos utilizar.

18
00:01:26,940 --> 00:01:34,350
Por um lado, existem os chamados loaders, os loaders so aplicados em um nvel de arquivo para

19
00:01:34,660 --> 00:01:41,880
que possamos dizer, por exemplo, que todos os arquivos javascript devem ser manipulados pelo loaderX, todos

20
00:01:41,880 --> 00:01:49,740
os arquivos css devem ser manipulados pelo loaderY, babel-loader e css-loader exemplos populares que so usados em muitos

21
00:01:49,740 --> 00:01:56,320
projetos, portanto, os carregadores so dependentes de arquivos ou aplicam transformaes dependentes de arquivos.

22
00:01:56,340 --> 00:02:03,030
Tambm temos plugins nos quais os carregadores so aplicados em uma base por arquivo. Em vez

23
00:02:03,040 --> 00:02:09,330
disso, conecte os arquivos concatenados, de modo que o pacote, mas antes, seja gravado na sada.

24
00:02:09,360 --> 00:02:15,120
Aqui podemos aplicar algumas transformaes gerais ou otimizaes como o uglify, portanto, isso ocorre

25
00:02:15,420 --> 00:02:20,950
em um nvel global e acontece depois que os carregadores fizeram seu trabalho.

26
00:02:20,970 --> 00:02:24,950
 assim que funciona o webpack, o que ele faz

27
00:02:25,110 --> 00:02:31,110
nos bastidores e tudo isso  configurado em um arquivo de configurao do webpack que iremos

28
00:02:31,110 --> 00:02:32,510
configurar juntos neste mdulo.

29
00:02:32,760 --> 00:02:37,920
Ento, sem mais delongas, vamos mergulhar na construo de nossa prpria configurao de projeto.

