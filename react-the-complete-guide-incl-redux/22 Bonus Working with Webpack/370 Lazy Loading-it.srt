1
00:00:02,180 --> 00:00:07,450
Quindi, nell'ultima lezione, abbiamo terminato la nostra configurazione delle regole con l'aggiunta di una regola per

2
00:00:07,460 --> 00:00:12,520
le immagini, ora voglio dare un'occhiata ai plugin e poi vedere se l'installazione funziona davvero.

3
00:00:12,560 --> 00:00:17,920
Ora per quanto riguarda i plugin,  davvero super semplice per noi qui, non abbiamo

4
00:00:17,990 --> 00:00:20,360
bisogno di alcuno per il flusso di

5
00:00:20,420 --> 00:00:25,450
lavoro di sviluppo, ne aggiungeremo uno pi avanti quando lo impostiamo per la produzione, l

6
00:00:25,460 --> 00:00:26,950
voglio aggiungere qualche plugin

7
00:00:27,110 --> 00:00:30,880
ma per ora  tutto, io non aggiunger un plugin qui.

8
00:00:31,310 --> 00:00:38,720
Quindi con questo possiamo dare un'occhiata al setup che abbiamo usato qui e vedere se salviamo il file, se funziona, se eseguiamo

9
00:00:38,930 --> 00:00:44,900
il nostro script di avvio che esegue il server di sviluppo che ho detto prendere automaticamente questo file

10
00:00:44,900 --> 00:00:45,740
di configurazione.

11
00:00:45,860 --> 00:00:50,980
Quindi eseguiamo questo script con npm start, assicurati che tutti i file siano

12
00:00:51,200 --> 00:00:58,990
salvati e vediamo se funziona, otteniamo un errore qui che il percorso non  un percorso assoluto, quindi qualcosa

13
00:00:59,040 --> 00:01:02,240
con il nostro percorso di output  sbagliato.

14
00:01:02,370 --> 00:01:04,390
Diamo un'occhiata, andiamo alla nostra

15
00:01:04,530 --> 00:01:07,360
configurazione del webpack, percorso qui per

16
00:01:07,770 --> 00:01:09,990
l'output, beh, l'ho incasinato, no?

17
00:01:10,090 --> 00:01:16,660
Path dovrebbe essere questa parte qui e il percorso pubblico dovrebbe essere la stringa vuota, quindi con questa

18
00:01:16,860 --> 00:01:19,770
correzione proviamo ora di nuovo, assicurati anche di

19
00:01:19,770 --> 00:01:22,260
salvare il file di configurazione aggiornato.

20
00:01:23,130 --> 00:01:26,460
Quindi ora almeno non si blocca all'avvio del

21
00:01:26,970 --> 00:01:32,580
server, ma ci d un errore sebbene non capisca questa sintassi di importazione qui,

22
00:01:32,650 --> 00:01:36,010
la sintassi di importazione dinamica, non lo capisce.

23
00:01:36,210 --> 00:01:45,190
Quindi, come facciamo a capire questa importazione dinamica? Abbiamo bisogno di adattare la nostra configurazione qui per poter creare pezzi extra

24
00:01:45,190 --> 00:01:48,910
di codice generati dinamicamente, il caricamento lento significa che  un

25
00:01:49,180 --> 00:01:54,850
bundle extra e non fa parte del bundle principale che viene scaricato inizialmente, per supportare la

26
00:01:55,270 --> 00:02:01,420
suddivisione del codice nel webpack e la scomposizione del codice  solo un nome diverso per il caricamento

27
00:02:01,480 --> 00:02:05,000
lazy, devo aggiungere chunkFileName qui alla mia configurazione di output.

28
00:02:05,120 --> 00:02:12,460
Ci determina semplicemente quali sono questi altri file, i file separati generati per il codice lazy caricato che ovviamente non 

29
00:02:12,460 --> 00:02:15,040
incluso nel bundle, che vanificherebbe lo scopo

30
00:02:15,040 --> 00:02:17,220
della scomposizione del codice, come dovrebbe

31
00:02:17,500 --> 00:02:19,540
essere chiamato il nome del file.

32
00:02:19,690 --> 00:02:24,890
Devono avere una parte variabile nel loro nome perch sono generati dal webpack in modo dinamico,

33
00:02:25,000 --> 00:02:26,500
user l'ID. js qui,

34
00:02:26,530 --> 00:02:33,050
gli ID sono generati dinamicamente ID 0, 1, 2 e cos via, generati da webpack in modo tale

35
00:02:33,190 --> 00:02:37,750
che la funzionalit sia esternalizzata in pacchetti separati ricevuti i propri file javascript.

36
00:02:38,140 --> 00:02:45,090
Inoltre dobbiamo rendere Babel consapevole di questa sintassi di importazione dinamica che altrimenti

37
00:02:45,400 --> 00:02:50,650
non capisce, quindi quello che far  installare un plugin,

38
00:02:50,650 --> 00:02:59,800
installare npm --save-dev, si chiama dynamic babel-plugin-syntax importa e questo far in modo che babel capisca questa

39
00:02:59,800 --> 00:03:01,720
sintassi di importazione dinamica.

40
00:03:02,020 --> 00:03:08,980
Quindi una volta installato, possiamo andare al file babelrc e abbiamo gi dei preset, ora aggiunger anche

41
00:03:08,980 --> 00:03:13,150
un nodo plugin che  anche un array e qui

42
00:03:13,200 --> 00:03:17,490
aggiunger il mio plugin di importazione dinamica della sintassi, quindi

43
00:03:17,570 --> 00:03:19,730
questo  il nome del plugin.

44
00:03:19,940 --> 00:03:26,720
Con quello aggiunto, salviamo tutti questi file e riproviamo npm start e vediamo se ora funziona, ora questo compila

45
00:03:26,720 --> 00:03:29,320
ma otteniamo un errore diverso, otteniamo un

46
00:03:29,390 --> 00:03:35,270
errore che questa sintassi qui dove assegniamo le nostre propriet come questa non  piaciuta .

47
00:03:35,270 --> 00:03:42,590
La ragione di ci  che il preset env che stiamo usando, questo qui supporta solo le ultime funzionalit del browser

48
00:03:42,590 --> 00:03:45,550
che fanno parte delle specifiche, questa sintassi di propriet

49
00:03:45,740 --> 00:03:51,710
speciale  comunque solo in bozza e non  inclusa nella preimpostazione env, isn  un problema

50
00:03:52,070 --> 00:03:54,790
anche se dobbiamo solo aggiungere un altro preset.

51
00:03:54,860 --> 00:04:04,550
Quindi con npm install save-dev, ora installiamo un altro preset che si chiama babel-preset-stage-2, i preset di stage

52
00:04:04,550 --> 00:04:11,300
2 sono semplicemente bozze di funzionalit che possono eventualmente essere supportate ma

53
00:04:11,300 --> 00:04:13,280
che gi vogliamo usare.

54
00:04:13,280 --> 00:04:22,040
Quindi con questo dobbiamo aggiungere questo al nostro setup qui e aggiunger il mio preset nel mezzo,

55
00:04:22,670 --> 00:04:25,380
aggiunger qui stage-2, come questo.

56
00:04:25,400 --> 00:04:29,240
Proviamo ora di nuovo con npm start e ora questo

57
00:04:29,240 --> 00:04:31,200
sembra migliore, almeno non si

58
00:04:31,460 --> 00:04:33,840
ottiene un errore, tuttavia affronteremo un problema.

59
00:04:33,860 --> 00:04:41,480
L'applicazione  ora disponibile e, di default, lo sta facendo su localhost8080, quindi apriamolo, ma non vedremo app, la ragione

60
00:04:41,960 --> 00:04:44,510
 che non abbiamo collegato il nostro

61
00:04:44,750 --> 00:04:51,530
output di build che, a proposito, non  memorizzato nel cartella dist quando usiamo webpack dev-server ma in

62
00:04:51,530 --> 00:04:57,150
memoria, che non abbiamo collegato quell'output con l'indice. file html, non abbiamo importazioni in

63
00:04:57,170 --> 00:04:57,840
quel

64
00:04:57,860 --> 00:04:59,730
file, come dovremmo aggiungere

65
00:04:59,750 --> 00:05:01,970
lo script ad esso?

66
00:05:02,000 --> 00:05:08,000
Questo  qualcosa che dobbiamo fare da soli e lo faremo nella prossima lezione.

