1
00:00:02,140 --> 00:00:10,000
Continuiamo la nostra strada verso un mondo di puro creatore di azioni, anche esternalizzando il costruttore di hamburger e il codice del

2
00:00:10,180 --> 00:00:13,630
creatore di azioni dell'ordine in saghe Iniziamo con il

3
00:00:13,870 --> 00:00:15,770
generatore di hamburger, se analizziamo

4
00:00:15,940 --> 00:00:20,290
il file di creazione di azioni di burger builder,  molto semplice,

5
00:00:20,290 --> 00:00:23,390
abbiamo ottenuto un ci sono gi molti creatori

6
00:00:23,440 --> 00:00:27,630
d'azione, quindi i creatori di azioni che fanno proprio questo, creano un'azione.

7
00:00:27,940 --> 00:00:35,050
Ma abbiamo un creatore di azioni initIngredients che esegue effettivamente un codice asincrono che esegue un effetto collaterale,

8
00:00:35,050 --> 00:00:36,390
quindi, per quello,

9
00:00:36,400 --> 00:00:45,010
creer un nuovo file nella cartella sagas BurgerBuilder. js. L creer la mia saga di

10
00:00:45,030 --> 00:00:49,900
initIngredients che verr esportata nella funzione di generatore, aggiunger la

11
00:00:50,780 --> 00:00:59,840
saga dopo il nome, avremo la nostra azione l e ora prender il codice da initIngredients e lo metto

12
00:01:00,710 --> 00:01:02,790
nel BurgerBuilder. js

13
00:01:02,800 --> 00:01:04,160
file qui.

14
00:01:04,930 --> 00:01:06,830
Ora usiamo gli assios qui,

15
00:01:06,950 --> 00:01:12,950
ma se torniamo al file builder burger nella cartella azioni, vediamo che importiamo effettivamente gli assi dalla

16
00:01:13,040 --> 00:01:18,930
nostra istanza personalizzata, in modo che usiamo la nostra istanza axios personalizzata dal file degli ordini axios.

17
00:01:19,040 --> 00:01:25,340
Quindi user la stessa importazione qui nel mio file saga perch ovviamente voglio usare la stessa istanza

18
00:01:25,340 --> 00:01:35,340
di assiomi qui, il che significa che possiamo anche sbarazzarci di esso nel BurgerBuilder. file js nella cartella azioni.

19
00:01:35,490 --> 00:01:41,910
Ora torna nel BurgerBuilder. file js nella cartella sagas, importiamo

20
00:01:41,970 --> 00:01:48,720
gli assios, ora se diamo un'occhiata all'autore. file js, vediamo che probabilmente dovremmo anche importare put

21
00:01:48,770 --> 00:01:53,790
dagli effetti saga di Redux in modo da poter inviare azioni dalla nostra saga.

22
00:01:53,820 --> 00:02:00,610
Quindi permettimi di aggiungere questa importazione anche qui e con quello, user lo stesso approccio come abbiamo

23
00:02:00,620 --> 00:02:08,060
fatto in precedenza, ho intenzione di memorizzare la risposta qui nella costante di risposta e utilizzare il rendimento

24
00:02:08,090 --> 00:02:11,190
per attendere che venga restituito e automaticamente ottenere

25
00:02:11,200 --> 00:02:19,190
i dati che questa promessa ci d una volta risolti e anche gestire un errore, lo avvolgo con try.

26
00:02:19,520 --> 00:02:24,680
Quindi cercher di ottenere la mia costante, la mia risposta qui dovrei

27
00:02:24,820 --> 00:02:32,110
dirlo, ma se fallisce, allora entreremo nel blocco catch qui e cattureremo ogni errore che potremmo avere

28
00:02:34,370 --> 00:02:37,350
e poi lo gestiremo nel blocco in seguito.

29
00:02:37,670 --> 00:02:41,810
Ora, l'unica cosa che faccio  spedire qualcosa, quindi nel

30
00:02:41,810 --> 00:02:49,640
mondo della saga, facciamo questo dando un call put e ci che facciamo , naturalmente, il nostro creatore di

31
00:02:49,640 --> 00:02:57,770
azioni chiama qui dove trasmettiamo i dati che abbiamo ottenuto. Per questo, ho bisogno di importarli quindi importer tutto come

32
00:02:57,830 --> 00:03:00,340
azioni da e ora andiamo alla

33
00:03:00,350 --> 00:03:05,610
cartella azioni e l al file indice che possiamo anche importare proprio cos

34
00:03:05,630 --> 00:03:13,640
facendo semplicemente riferimento alla cartella nel suo complesso . E poi posso dare azioni put e ora

35
00:03:13,850 --> 00:03:15,820
setIngredients  richiesto qui,

36
00:03:15,830 --> 00:03:22,520
per questo dovremmo assicurarci che nell'indice. js file nella cartella actions, setIngredients  effettivamente fornito,

37
00:03:22,550 --> 00:03:23,990
al momento non lo

38
00:03:24,230 --> 00:03:32,480
, quindi aggiungiamolo come esportazione dal file builder burger in l, setIngredients. Abbiamo anche fallito l'installazione di

39
00:03:32,490 --> 00:03:34,240
fetchIngredients, dovremmo

40
00:03:34,410 --> 00:03:38,360
esportarlo anche da burger

41
00:03:38,460 --> 00:03:47,240
builder, quindi aggiungiamo anche questo. Aggiungendo queste due esportazioni, possiamo tornare alla nostra saga e le azioni di

42
00:03:47,250 --> 00:03:50,230
invio impostano gli ingredienti, trasmettono i dati di risposta,

43
00:03:51,070 --> 00:03:53,010
whoops mi scusano, qui naturalmente, quindi

44
00:03:53,110 --> 00:04:01,300
trasmetti i dati di risposta o nel caso di errore, metti azioni. fetchIngredientsFailed, assicurati di eseguirlo anche tu,

45
00:04:01,330 --> 00:04:02,740
puoi quindi

46
00:04:02,730 --> 00:04:07,310
rimuovere il codice catch allora laggi.

47
00:04:07,320 --> 00:04:09,750
Questa  la

48
00:04:10,090 --> 00:04:17,890
nostra saga appena creata, torniamo all'indice. js laggi e registriamolo, e per questo esporter un nuovo

49
00:04:17,900 --> 00:04:23,550
generatore qui che chiamer watchBurgerBuilder per raggruppare tutto il codice relativo al builder burger.

50
00:04:23,710 --> 00:04:30,280
Tecnicamente potremmo aggiungerlo anche qui e potremmo avere una grande funzione o generatore di orologio, ma mi

51
00:04:30,280 --> 00:04:31,770
piacerebbe averne di pi

52
00:04:32,350 --> 00:04:35,650
e poi, importer anche le mie saghe, qui 

53
00:04:35,680 --> 00:04:40,850
solo una, ma potrebbe esserne pi. / BurgerBuilder e quella

54
00:04:41,190 --> 00:04:45,080
che abbiamo, naturalmente,  la

55
00:04:45,430 --> 00:04:47,540
saga di initIngredients.

56
00:04:47,800 --> 00:04:49,660
Quindi, in WatchBurgerBuilder, render

57
00:04:49,870 --> 00:04:50,980
takeEvery tipi di

58
00:04:51,040 --> 00:04:54,230
azione e ora ho bisogno di un nuovo

59
00:04:54,430 --> 00:05:00,460
tipo di azione che inviamo effettivamente nel file builder di burger nel creatore di azioni

60
00:05:00,460 --> 00:05:02,770
o nella cartella delle azioni.

61
00:05:02,860 --> 00:05:08,890
Quindi l'azione che creiamo in questo momento ora perch non voglio pi restituire la spedizione

62
00:05:08,890 --> 00:05:12,550
ed eseguire il codice asincrono, voglio solo creare un'azione.

63
00:05:12,820 --> 00:05:18,690
Quindi creiamo un nuovo tipo di azione per questo, creer una costante qui

64
00:05:18,690 --> 00:05:20,820
nella cartella dei tipi di

65
00:05:20,850 --> 00:05:25,310
azione che chiamer INIT_INGREDIENTS, cos come viene chiamato il creatore

66
00:05:25,310 --> 00:05:31,890
dell'azione, INIT_INGREDIENTS, come questo e nel creatore dell'azione, in il file builder burger nella

67
00:05:32,250 --> 00:05:38,710
cartella azioni, imposter il tipo in actionTypes. INIT_INGREDIENTS.

68
00:05:38,740 --> 00:05:41,350
Quindi questo  il tipo di

69
00:05:41,410 --> 00:05:49,330
azione a cui vuoi ascoltare, quindi nell'indice. js file, ascolter actionTypes. INIT_INGREDIENTS e eseguir initIngredientsSaga ogni

70
00:05:49,410 --> 00:05:51,990
volta che ci si verifica.

71
00:05:52,210 --> 00:06:00,100
Il passaggio finale  anche chiamare questa funzione generatore appena creata dal nostro indice. js file al livello root della nostra applicazione,

72
00:06:00,100 --> 00:06:07,280
per cos dire, l dove abbiamo il middleware della saga che si attiva, aggiunger

73
00:06:07,390 --> 00:06:09,640
anche il middleware della

74
00:06:09,850 --> 00:06:16,270
saga e ora importiamo questo dalla nostra cartella di sagas per guardare il

75
00:06:16,550 --> 00:06:21,540
costruttore di hamburger, questa saga qui dovrebbe anche essere eseguito

76
00:06:21,580 --> 00:06:25,650
all'inizio senza parentesi qui. Salviamo tutto questo e questo

77
00:06:26,110 --> 00:06:26,920
sembra buono,

78
00:06:26,920 --> 00:06:30,440
inizializziamo ancora i nostri ingredienti qui con successo.

79
00:06:30,550 --> 00:06:37,060
Se ricarico questa applicazione ancora una volta, vediamo che setIngredients viene inviato qui e

80
00:06:37,060 --> 00:06:45,720
impostiamo gli ingredienti e questo funziona perch abbiamo la nostra saga di builder di hamburger in cui produciamo setIngredients.

81
00:06:45,880 --> 00:06:53,610
Se commento qui, vediamo che abbiamo una schermata di caricamento infinita perch non abbiamo mai impostato gli ingredienti in modo che

82
00:06:53,700 --> 00:06:57,570
possiamo davvero dire che la nostra saga funziona correttamente qui.

83
00:06:57,780 --> 00:06:59,070
Lasciatemi commentare di nuovo.

