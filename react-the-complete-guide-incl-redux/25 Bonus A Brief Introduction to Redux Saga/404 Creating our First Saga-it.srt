1
00:00:02,180 --> 00:00:05,520
Quindi ho parlato molto di come possiamo usare la saga di

2
00:00:05,720 --> 00:00:11,540
Redux, usiamolo ora per avere un'idea di come funzioni effettivamente. Con la saga di Redux, crei

3
00:00:11,570 --> 00:00:21,050
cosiddetti sagas che sono essenzialmente tipi di funzioni che esegui su determinate azioni e che gestiscono tutte le tue

4
00:00:21,130 --> 00:00:28,460
logiche di effetti collaterali e un effetto collaterale  semplicemente qualcosa come accedere all'archiviazione

5
00:00:28,460 --> 00:00:36,280
locale, raggiungendo un server, forse cambiando il percorso o eseguendo un timer come questo qui.

6
00:00:36,290 --> 00:00:41,930
Questi sono tutti gli effetti collaterali perch non manipolano direttamente il tuo redux store,

7
00:00:41,930 --> 00:00:47,330
potrebbero fare qualcosa che porta a uno stato diverso che alla fine viene memorizzato

8
00:00:47,660 --> 00:00:51,450
nel tuo redux store ma non direttamente consumato dal riduttore.

9
00:00:51,890 --> 00:00:56,700
Quindi, per quello, creer una nuova sottocartella nella cartella del negozio e la chiamer Saga, il

10
00:00:56,870 --> 00:00:59,970
nome spetta a te ma questo  qualcosa che vedrai molto.

11
00:01:00,170 --> 00:01:05,290
Ora in saghe, creer file diversi per i diversi tipi di saghe e

12
00:01:05,300 --> 00:01:08,800
perch non iniziamo con la saga di auth qui.

13
00:01:08,990 --> 00:01:18,170
Quindi creer un nuovo file, auth. js nella cartella sagas, ora qui dentro, voglio creare le mie saghe redux,

14
00:01:18,260 --> 00:01:22,100
la domanda  semplicemente come creiamo una saga del genere,

15
00:01:22,100 --> 00:01:25,010
che cos' in realt? Nel suo nucleo, 

16
00:01:25,040 --> 00:01:31,280
una specie di funzione e sto dicendo un po 'perch c' una piccola svolta che ti

17
00:01:31,280 --> 00:01:32,280
mostrer presto.

18
00:01:32,660 --> 00:01:35,900
Quindi, prima di tutto creiamo una funzione qui,

19
00:01:36,100 --> 00:01:39,490
user la parola chiave function e la chiamer,

20
00:01:39,530 --> 00:01:46,820
diciamo che vogliamo sostituire la saga per la disconnessione, dove la cancelliamo nella memoria locale, quindi nessun

21
00:01:46,850 --> 00:01:52,580
codice asincrono in l, solo qualche effetto collaterale che accade in realt in realt.

22
00:01:52,730 --> 00:01:54,550
Quindi chiamer qui la

23
00:01:54,710 --> 00:01:55,880
funzione di logout,

24
00:01:55,880 --> 00:02:01,880
ora su questa funzione, posso accettare un argomento che ricomincio automaticamente, ti mostrer

25
00:02:01,880 --> 00:02:04,370
ovviamente come collegare queste saghe, l'argomento

26
00:02:04,370 --> 00:02:07,020
sarebbe l'azione cos l'azione che 

27
00:02:07,070 --> 00:02:12,820
stato inviato perch le saghe sono legate alle azioni, torner su questo.

28
00:02:12,860 --> 00:02:18,660
Ora ho detto che non sarebbe stata una funzione, ho detto una specie di funzione,

29
00:02:19,070 --> 00:02:25,350
aggiungiamo una stella dopo la parola chiave della funzione e questa stella qui  importante, non

30
00:02:25,580 --> 00:02:28,820
fa parte del nome della funzione, in realt

31
00:02:28,820 --> 00:02:34,480
trasforma questa funzione in una cosiddetta Generatore. I generatori sono funzionalit javascript di

32
00:02:34,480 --> 00:02:42,830
nuova generazione che sono funzioni che possono essere eseguite in modo incrementale, quindi  possibile chiamarle e non

33
00:02:42,830 --> 00:02:49,490
vengono eseguite dall'inizio alla fine immediatamente, ma  possibile sospendere durante l'esecuzione della funzione, ad

34
00:02:49,490 --> 00:02:56,780
esempio attendere il completamento del codice asincrono e questo  esattamente ci che la saga di

35
00:02:56,780 --> 00:02:57,760
Redux sfrutta.

36
00:02:57,950 --> 00:03:03,470
E se hai il codice sincrono, beh allora puoi semplicemente eseguirlo dall'inizio alla fine

37
00:03:03,470 --> 00:03:06,860
immediatamente, ti mostrer come funzionano entrambi in questo modulo.

38
00:03:06,860 --> 00:03:11,600
Quindi abbiamo questa funzione di generatore qui, ora nel logout ovviamente

39
00:03:11,600 --> 00:03:17,870
voglio fare lo stesso con il mio creatore di azioni di disconnessione, quindi copier qui

40
00:03:17,870 --> 00:03:23,900
le tre chiamate di archiviazione locali e la incoller nel mio generatore di logout qui.

41
00:03:23,900 --> 00:03:26,780
Ora vedi gi che il mio IDE non piace,

42
00:03:26,860 --> 00:03:33,710
sta dicendo che questo generatore non ha una funzione di rendimento o un rendimento, nessuna parola chiave di rendimento, ora ci

43
00:03:33,770 --> 00:03:36,800
prenderemo cura di questo e spiegher che rendimento ha.

44
00:03:36,800 --> 00:03:39,460
Per ora stiamo ripulendo la memoria locale qui,

45
00:03:39,710 --> 00:03:48,260
ora con la memoria locale che rimuove gli articoli qui, possiamo dare un'occhiata all'autore. js action creator e vediamo che alla

46
00:03:48,260 --> 00:03:54,410
fine abbiamo restituito questo oggetto azione che essenzialmente avrebbe portato

47
00:03:54,410 --> 00:03:55,860
a questo invio.

48
00:03:56,210 --> 00:04:03,620
Quindi vogliamo fare lo stesso qui e in una saga, in realt lo facciamo con una funzione speciale che

49
00:04:03,620 --> 00:04:05,870
otteniamo dal pacchetto appena installato, quindi

50
00:04:06,170 --> 00:04:16,610
importer qualcosa dalla saga di Redux e in realt dal sotto-pacchetto degli effetti. L, voglio importare la funzione put, ora metteremo alla

51
00:04:16,620 --> 00:04:24,960
fine solo una nuova azione, quindi eseguiamo put qui e ora semplicemente copier la

52
00:04:25,480 --> 00:04:32,370
stessa definizione di azione che ho usato nel creatore dell'azione, con

53
00:04:32,370 --> 00:04:36,220
tipi di azione di logout, quindi

54
00:04:36,220 --> 00:04:40,830
ci metter questa azione. Ovviamente, perch funzioni, devo anche

55
00:04:40,840 --> 00:04:49,320
importare il mio tipo di azione, quindi importer tutto come tipi di azioni da azioni come questa.

56
00:04:49,330 --> 00:04:57,780
Cos come l'abbiamo fatto nella auth. js file e l dal file dei tipi di azione.

57
00:04:58,020 --> 00:05:04,170
Quindi ora lo stiamo mettendo e ho ancora tutti questi errori perch questa non 

58
00:05:04,170 --> 00:05:06,580
una funzione normale ma un generatore,

59
00:05:06,690 --> 00:05:09,150
e in un generatore, dovremmo prefisso,

60
00:05:09,360 --> 00:05:17,060
anteporre ogni passo che eseguiamo con la parola chiave yield. Ci significa semplicemente che questo passo dovrebbe essere eseguito

61
00:05:17,060 --> 00:05:19,380
e quindi aspetter che finisca

62
00:05:19,380 --> 00:05:25,030
cos se fosse un'azione asincrona, non continuer prima che il passo sia terminato,

63
00:05:25,110 --> 00:05:26,180
lo stesso qui.

64
00:05:26,400 --> 00:05:34,200
Quindi facciamo tutti questi passi qui e ora eseguiremo questo passo, questo passo, questo

65
00:05:34,200 --> 00:05:36,590
passo e infine chiameremo

66
00:05:36,600 --> 00:05:41,750
put che alla fine dietro le quinte invier questa azione.

67
00:05:41,910 --> 00:05:47,950
Ora questa  una saga di redux e sembra un modo pi complicato di creare un creatore di azioni, giusto?

68
00:05:48,000 --> 00:05:54,660
Bene, l'idea  di avere la tua area separata nell'applicazione in cui ti trovi, abbiamo il

69
00:05:54,660 --> 00:06:01,860
nostro generatore di logout e ora abbiamo solo bisogno di collegarlo al nostro negozio per poterlo usare.

70
00:06:01,860 --> 00:06:04,960
Ora vediamo come funziona nella prossima lezione.

