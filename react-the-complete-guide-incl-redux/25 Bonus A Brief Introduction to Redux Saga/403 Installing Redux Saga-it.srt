1
00:00:02,160 --> 00:00:09,220
Quindi sono tornato al nostro progetto finito, praticamente nello stesso stato in cui lo avevamo distribuito e

2
00:00:09,690 --> 00:00:14,170
l, ovviamente se eseguiamo la nostra applicazione sembra proprio questo.

3
00:00:14,220 --> 00:00:16,080
Abbiamo il nostro costruttore

4
00:00:16,080 --> 00:00:19,320
di hamburger, possiamo autenticarci tramite Firebase, inserendo

5
00:00:19,500 --> 00:00:25,560
semplicemente le nostre credenziali, registrandoci e quindi possiamo iniziare a costruire l'hamburger come abbiamo

6
00:00:25,560 --> 00:00:27,420
sempre fatto durante questo

7
00:00:27,420 --> 00:00:29,710
corso, quindi niente di spettacolare qui.

8
00:00:29,850 --> 00:00:33,540
Se esaminiamo il codice che dovrebbe esserti familiare,

9
00:00:33,750 --> 00:00:41,170
gestiamo tutte queste attivit asincrone o in realt qualsiasi effetto collaterale, anche sincrono, quindi le cose

10
00:00:41,280 --> 00:00:48,660
che non sono direttamente collegate alla modifica del nostro negozio di redux, gestiamo tutte queste cose

11
00:00:48,660 --> 00:00:49,920
in creatori d'azione.

12
00:00:49,920 --> 00:00:55,480
Quindi qui sono nel file auth delle azioni in cui ho tutti i creatori di

13
00:00:55,560 --> 00:00:57,620
azioni relative all'autore, ne abbiamo un

14
00:00:57,810 --> 00:01:03,860
paio di quelli sincroni qui, ma poi abbiamo anche cose come accedere all'archivio locale e dovremmo

15
00:01:03,870 --> 00:01:07,300
disconnetterci, che  un'azione sincrona che ti dar ma

16
00:01:07,440 --> 00:01:13,410
che potresti discutere e di nuovo, non  necessariamente una buona pratica, ma potresti obiettare che

17
00:01:13,410 --> 00:01:15,900
questo non  realmente correlato all'atto di

18
00:01:15,960 --> 00:01:22,890
inviare un'azione, quindi forse non vuoi averlo in questo file. E abbiamo anche azioni asincrone come il timeout del checkoff in cui abbiamo un

19
00:01:22,890 --> 00:01:30,120
timeout che impostiamo e da cui poi effettuiamo la disconnessione dopo una certa scadenza. E raggiungiamo il web, facciamo richieste

20
00:01:30,120 --> 00:01:31,320
per posta

21
00:01:31,320 --> 00:01:35,630
e ovviamente dobbiamo aspettare che queste finiscano.

22
00:01:36,030 --> 00:01:40,230
Quindi, tutte queste sono cose che abbiamo nei creatori di azioni e,

23
00:01:40,500 --> 00:01:43,850
come ho detto pi volte, non  necessariamente negativo, ma

24
00:01:44,070 --> 00:01:51,840
potresti rendere molto pulito l'argomento secondo il quale vuoi che i creatori di azioni o l'intera idea delle azioni di dispiegamento siano

25
00:01:52,260 --> 00:02:00,480
molto pulite t voglio avere qualche altro codice l dentro che non sia realmente correlato alla distribuzione di un'azione e questo  il

26
00:02:00,480 --> 00:02:04,020
punto in cui entra in gioco la saga di Redux.

27
00:02:04,260 --> 00:02:08,600
Quindi prima di tutto installiamolo in modo che possiamo

28
00:02:08,850 --> 00:02:15,180
vedere come funziona, quindi eseguir npm install --save e che  redux-saga, questo 

29
00:02:15,180 --> 00:02:18,910
il nome del pacchetto e questo sar come

30
00:02:19,020 --> 00:02:26,550
sempre scaricabile, inserire una voce nel pacchetto . json file e quindi darci accesso ad esso in questo

31
00:02:26,550 --> 00:02:30,300
progetto e riavvier il server di sviluppo con npm ricominciare.

32
00:02:30,300 --> 00:02:35,900
Ora possiamo iniziare a lavorare sul progetto e possiamo iniziare a usare la saga di

33
00:02:36,030 --> 00:02:38,420
Redux, facciamolo all'inizio nel prossimo video.

