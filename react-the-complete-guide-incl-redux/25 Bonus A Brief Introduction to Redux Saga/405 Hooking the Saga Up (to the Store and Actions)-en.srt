1
00:00:02,130 --> 00:00:07,900
In the last lecture, we created our saga generator here and it doesn't look too useful right now,

2
00:00:08,210 --> 00:00:11,200
well we need to hook it up to our store.

3
00:00:11,390 --> 00:00:20,120
Now to do that, we need to go to the place where we create our store in the index.js file and there, I

4
00:00:20,120 --> 00:00:22,890
now don't just want to create the store,

5
00:00:22,940 --> 00:00:30,680
I instead want to also register my sagas and make sure that these are kind of something my store is

6
00:00:30,680 --> 00:00:43,190
aware of and can use. For that, I need to import something else, I will import create saga middleware from

7
00:00:43,280 --> 00:00:52,280
redux saga, like this and I will also import something else, I will import the saga I just created, before

8
00:00:52,280 --> 00:00:55,800
that in my auth.js file in the sagas folder,

9
00:00:56,020 --> 00:01:02,420
I'll add an export keyword in front of my generator function and save the file.

10
00:01:02,620 --> 00:01:18,470
So back in the index.js, I can then import my logout saga here from ./storeSagas auth.js

11
00:01:18,470 --> 00:01:20,770
and to be consistent with the naming,

12
00:01:20,840 --> 00:01:27,200
I'll actually go back in to the auth.js file in the sagas folder and name this logoutSaga as

13
00:01:27,200 --> 00:01:30,730
a generator name and therefore I'll also import this name,

14
00:01:30,740 --> 00:01:35,880
this is optional but it also makes clear what this is. Now with that imported, what we can do,

15
00:01:36,140 --> 00:01:44,240
we can also execute the create saga middleware function, store the result in a constant, so I'll name the constant

16
00:01:44,240 --> 00:01:54,780
sagaMiddleware and then execute create sagaMiddleware, just like that without any arguments

17
00:01:54,780 --> 00:02:00,180
and now when we create the store, I'm calling applyMiddleware here and there

18
00:02:00,180 --> 00:02:05,310
I don't just want to apply the thunk middleware but also my saga middleware

19
00:02:05,610 --> 00:02:08,980
so I will add it as an argument to applyMiddleware.

20
00:02:09,480 --> 00:02:16,680
Finally after all of that, I can use my sagaMiddleware which is also registered in the store and

21
00:02:16,680 --> 00:02:18,890
there, I can run a saga

22
00:02:19,080 --> 00:02:28,470
so here I can run my logout saga which we also imported in this file, right. Now with that, if I save all

23
00:02:28,470 --> 00:02:35,250
of that and we go back to our application and we reload it,

24
00:02:35,640 --> 00:02:38,360
well we see nothing spectacular here, do we?

25
00:02:38,760 --> 00:02:44,970
Let's go into our redux dev tools and there we see something interesting,

26
00:02:45,120 --> 00:02:50,390
we see that logout was executed here a couple of times,

27
00:02:50,640 --> 00:02:59,100
now that makes sense because in our auth action creator, we actually also dispatched the logout action in

28
00:02:59,100 --> 00:03:03,050
our check state action where we try to auto login the user

29
00:03:03,150 --> 00:03:13,270
if we don't find a valid token. Now for testing purposes, let's comment out all logout dispatches,

30
00:03:13,410 --> 00:03:19,650
so if we save this file and we go back to our application, if we now reload this application, we still

31
00:03:19,650 --> 00:03:24,980
see that auth logout was dispatched and that is coming from our saga,

32
00:03:25,230 --> 00:03:33,150
as I can prove that they go to the index.js file and I comment out this sagaMiddleware, run logout saga

33
00:03:33,150 --> 00:03:33,710
line.

34
00:03:33,900 --> 00:03:39,890
If I do that and I go back and now I reload the page, you no longer see that being dispatched.

35
00:03:40,020 --> 00:03:43,730
So we seem to do something with our saga,

36
00:03:43,830 --> 00:03:45,940
we're always calling it so

37
00:03:46,030 --> 00:03:52,920
let me comment in all the things we commented out because always calling this saga doesn't look too

38
00:03:52,920 --> 00:03:55,230
useful, does it? Right now,

39
00:03:55,290 --> 00:04:02,070
right at the start when we built the application, when we started, we run our logout saga which despite

40
00:04:02,070 --> 00:04:08,550
this strange generator stuff going on simply does one thing, it removes all these items from local storage

41
00:04:08,850 --> 00:04:11,490
and dispatches the auth logout action.

42
00:04:11,490 --> 00:04:15,250
Obviously we don't want to run this at application start up,

43
00:04:15,510 --> 00:04:23,790
instead we do want to run this code in the place where we previously ran our logout action creator,

44
00:04:23,820 --> 00:04:25,570
where we used this,

45
00:04:25,680 --> 00:04:31,650
so the goal has to be that we actually dispatch an action to which we can listen with

46
00:04:31,650 --> 00:04:38,030
redux saga so that our saga generator can run once the action is recognized.

47
00:04:38,220 --> 00:04:40,470
Let's work on this in the next lecture.

