1
00:00:02,050 --> 00:00:08,990
Nell'ultimo video abbiamo spostato gli effetti secondari di burger builder nella sua saga,

2
00:00:09,110 --> 00:00:16,640
finiamo ora questo intero modulo o la nostra trasformazione del progetto lavorando ai creatori

3
00:00:16,640 --> 00:00:17,810
di action action.

4
00:00:17,930 --> 00:00:21,760
Diamo un'occhiata a quel file, possiamo gi vedere l'importazione di axios,

5
00:00:21,830 --> 00:00:25,020
quindi stiamo facendo alcuni effetti collaterali in questo file.

6
00:00:25,040 --> 00:00:27,390
I primi creatori di azioni

7
00:00:27,560 --> 00:00:35,840
sono puri, ma poi acquistiamo Burger dove abbiamo alcuni effetti collaterali e abbiamo anche fetchOrders in cui

8
00:00:35,840 --> 00:00:38,140
abbiamo alcuni effetti collaterali.

9
00:00:38,180 --> 00:00:40,490
Iniziamo con purchaseBurger, spostiamo

10
00:00:40,550 --> 00:00:44,330
quella logica in una saga ora.

11
00:00:44,630 --> 00:00:52,040
Quindi, per quello, ho intenzione di prendere tutto quel codice e creare un nuovo file che chiamer ordine. js nella cartella sagas, l

12
00:00:52,040 --> 00:00:55,900
esporter un nuovo generatore e

13
00:00:56,360 --> 00:01:02,420
nominer questo generatore buyBurgerSaga, quindi acquistaBurgerSaga, in questo

14
00:01:02,780 --> 00:01:12,140
modo, ottieni l'azione qui ed esegui questo codice che ovviamente sostituiremo.

15
00:01:13,260 --> 00:01:14,100
Nell'ordine. js

16
00:01:14,110 --> 00:01:19,120
nella cartella azioni, vediamo che stiamo usando l'istanza

17
00:01:19,190 --> 00:01:27,940
personalizzata di axios, quindi importiamola. Torner su ordine. js file nella cartella sagas e aggiungi l'importazione nella parte superiore.

18
00:01:27,970 --> 00:01:32,750
Importeremo anche put dall'effetto saga di Redux, quindi assicuriamoci

19
00:01:32,980 --> 00:01:40,960
di aggiungere anche questa importazione e, poich anche noi pianifichiamo di mettere bene alcune azioni,

20
00:01:40,960 --> 00:01:48,220
essenzialmente inviamo alcune azioni da qui, importer tutte le azioni dalla mia cartella azioni.

21
00:01:48,370 --> 00:01:51,340
Con questo possiamo iniziare a mettere le

22
00:01:51,340 --> 00:01:54,890
azioni qui, quindi spediamo buyBurgerStart qui, ora usiamo put

23
00:01:54,910 --> 00:02:00,740
dal momento che siamo in una saga. Per questo, dobbiamo assicurarci che l'acquisto

24
00:02:00,740 --> 00:02:01,890
di BurgerStart

25
00:02:01,930 --> 00:02:08,610
sia effettivamente esportato, quindi se vado all'indice. js file nella cartella azioni, dovrei assicurarmi che

26
00:02:08,650 --> 00:02:10,970
dal file d'ordine, venga esportato

27
00:02:12,120 --> 00:02:18,780
BuyBurgerStart, e lo stesso sar rilevante per buyBurgerSuccess e fail che anch'io alla fine invier

28
00:02:18,780 --> 00:02:19,370
qui,

29
00:02:19,620 --> 00:02:27,750
quindi assicuriamoci che siano entrambi esportati per acquistareBurgerFail e acquistareBurgerSuccess. Torna all'ordine.

30
00:02:27,750 --> 00:02:28,080
&nbsp;

31
00:02:28,080 --> 00:02:30,240
js file, la cartella

32
00:02:30,240 --> 00:02:35,340
sagas, posso quindi restituire put (purchaseBurgerStart ()), come questo, comunque

33
00:02:35,340 --> 00:02:41,460
eseguito su questo oggetto actions che raggruppa tutte le importazioni di azioni,

34
00:02:41,460 --> 00:02:49,180
quindi otterr la mia risposta qui con il post axios yield e come prima, avvolgilo in

35
00:02:49,220 --> 00:02:52,500
un blocco try per vedere se ci riesce.

36
00:02:52,700 --> 00:03:04,050
Quindi spostiamolo qui e se ha avuto successo, dar delle azioni. purchaseBurgerSuccess e passa il nome dei dati di risposta e

37
00:03:04,050 --> 00:03:10,860
vediamo anche laggi nel nostro vecchio codice, abbiamo anche trasmesso i dati

38
00:03:10,860 --> 00:03:18,260
ordinati che abbiamo ricevuto come argomento nel nostro creatore di azioni qui.

39
00:03:18,360 --> 00:03:27,610
Ora l'idea sar quella di inoltrare semplicemente questo alla nostra saga e accedere alla nostra azione, quindi inoltrare i dati dell'ordine di

40
00:03:27,630 --> 00:03:32,190
azione, tuttavia questo deve essere fatto qui, naturalmente, cos i dati

41
00:03:32,190 --> 00:03:35,790
dell'ordine d'azione saranno inoltrati oltre al nome dei

42
00:03:35,820 --> 00:03:40,480
dati che sar la chiave che  stato creato in firebase.

43
00:03:40,620 --> 00:03:47,790
Ora un'altra cosa che dovremmo fare, qui dove aggiungiamo il token e trasmettiamo i dati

44
00:03:48,000 --> 00:03:55,810
dell'ordine al server, entrambi ovviamente dovrebbero essere estratti dall'azione che riceviamo, in modo che possiamo inoltrarla.

45
00:03:55,980 --> 00:03:58,590
Con questo abbiamo impostato il

46
00:03:58,620 --> 00:04:06,460
caso di successo, ora posso rilevare un errore e quindi inviare questa azione qui se abbiamo

47
00:04:06,660 --> 00:04:07,690
un errore,

48
00:04:07,680 --> 00:04:09,570
quindi qui dar azioni put.

49
00:04:09,670 --> 00:04:16,470
purchaseBurgerFail e inoltra semplicemente l'errore a questo creatore di azioni.

50
00:04:16,470 --> 00:04:25,910
Con questo, posso rimuovere tutto questo, salvare questo e poi lavorare sul creatore di azioni per un dato di ordine e un

51
00:04:25,960 --> 00:04:33,160
token in avanti e darci un'azione che possiamo ascoltare in modo che possiamo eseguire questa saga

52
00:04:33,160 --> 00:04:34,430
quando si verifica.

53
00:04:34,590 --> 00:04:36,280
Per questo prima di tutto

54
00:04:36,280 --> 00:04:40,020
andr ai tipi di azione, vogliamo comprare un hamburger, ricordalo.

55
00:04:40,240 --> 00:04:42,310
Quindi, nei tipi

56
00:04:42,310 --> 00:04:53,350
di azione, ora andr qui ed esporremo un compratore acquisto const che riceve il nome come identificatore

57
00:04:53,350 --> 00:04:58,410
proprio cos, cos nell'ordine. js file, posso rimuovere qui

58
00:04:58,710 --> 00:05:05,520
tutto il vecchio codice e invece semplicemente restituire un oggetto javascript che

59
00:05:05,520 --> 00:05:13,200
 l'azione che creiamo dove usiamo actionTypes. purchaseBurger e dove passiamo i dati dell'ordine che riceviamo come

60
00:05:13,230 --> 00:05:18,380
argomento nel creatore dell'azione e dove passiamo il token in modo che non

61
00:05:18,510 --> 00:05:23,160
dovremo mai modificare alcun codice in nessuna parte della nostra applicazione perch

62
00:05:23,160 --> 00:05:27,660
il creatore dell'azione funziona come prima, solo ora solo crea azione

63
00:05:27,810 --> 00:05:34,560
invece di eseguire del codice ma che verr fatto nella saga e per riuscirci, dobbiamo creare un

64
00:05:34,560 --> 00:05:35,910
osservatore per questo acquistoBurgerSaga.

65
00:05:35,910 --> 00:05:42,240
Quindi nell'indice. js file nella cartella sagas, creer

66
00:05:42,780 --> 00:05:47,190
un'altra funzione generatore che chiamer watchOrder perch guarda

67
00:05:47,220 --> 00:05:50,580
le mie sagas relative all'ordine e

68
00:05:50,640 --> 00:05:59,950
qui, prima di tutto aggiunger un'importazione, quindi importa qualcosa da. / ordine e che qualcosa  questo acquistoBurgerSaga che abbiamo

69
00:05:59,950 --> 00:06:00,880
appena creato.

70
00:06:01,030 --> 00:06:04,300
Quindi qui in watchOrder, render takeEvery

71
00:06:04,420 --> 00:06:13,090
tipi di azione, l  il tipo di azione BuyBurger che abbiamo appena creato e vogliamo

72
00:06:13,300 --> 00:06:18,030
eseguire l'acquistoBurgerSaga generato ogni volta che ci si verifica.

73
00:06:18,040 --> 00:06:24,460
Ora tutto  collegato e dovremmo essere in grado di fare ancora acquisti, ma ora usando la nostra saga,

74
00:06:24,460 --> 00:06:26,360
vediamo se questo  il caso.

75
00:06:27,180 --> 00:06:30,280
Salviamo tutti i file e torniamo

76
00:06:32,440 --> 00:06:34,770
alla nostra applicazione, ricarichiamola

77
00:06:34,960 --> 00:06:37,740
e autenticiamo, quindi accedo semplicemente

78
00:06:37,810 --> 00:06:40,170
qui, accendo per accedere.

79
00:06:40,250 --> 00:06:43,660
Fammi ora costruire un piccolo hamburger e

80
00:06:43,760 --> 00:06:46,160
ordinalo ora, continua, continua qui,

81
00:06:46,310 --> 00:06:47,770
inseriamo alcuni dati.

82
00:06:49,970 --> 00:06:55,380
Con tutto ci che  entrato, facciamo clic su ordine e acquistoBurger viene eseguito qui,

83
00:06:56,620 --> 00:06:58,660
non vediamo per che accada qualcos'altro,

84
00:06:58,660 --> 00:06:59,700
sai perch?

85
00:07:01,320 --> 00:07:03,710
Poich abbiamo perso un passaggio cruciale, abbiamo creato

86
00:07:03,780 --> 00:07:11,590
il generatore di ordini di controllo ma non lo abbiamo mai eseguito, nell'indice. js dove creiamo il nostro negozio,

87
00:07:11,610 --> 00:07:23,010
abbiamo bisogno di eseguire il middleware di saga e ora eseguiamo il nostro generatore watchOrder appena creato.

88
00:07:23,130 --> 00:07:28,650
Quindi passiamo un riferimento a watchOrder per richiamare la funzione in esecuzione

89
00:07:28,800 --> 00:07:31,750
qui, salviamolo e proviamo ora di nuovo.

90
00:07:31,770 --> 00:07:32,720
Ancora loggato,

91
00:07:32,750 --> 00:07:36,050
quindi fammi ricostruire velocemente questo hamburger qui,

92
00:07:36,090 --> 00:07:45,350
continua a controllare e inserisci di nuovo gli stessi dati e proviamo ora di nuovo, fammi fare clic sull'ordine e

93
00:07:45,370 --> 00:07:46,620
questo sembra molto

94
00:07:46,630 --> 00:07:49,370
meglio, ora vediamo purchaseBurgerSuccess qui cos

95
00:07:49,390 --> 00:07:54,090
sembra che abbiamo fatto Effettivamente fare un acquisto di successo.

96
00:07:54,210 --> 00:07:55,410
 davvero grandioso, quindi

97
00:07:55,410 --> 00:07:59,810
assicuriamoci di recuperare anche gli ordini da una saga, in modo da avere i soli

98
00:07:59,880 --> 00:08:06,710
creatori di azioni puri in tutti questi file di action maker. Per quello, andr

99
00:08:06,720 --> 00:08:15,540
al mio ordine. js file nella cartella sagas e l creer

100
00:08:15,540 --> 00:08:18,570
una nuova funzione di generatore e

101
00:08:18,810 --> 00:08:23,890
il creatore dell'ordine  stato chiamato fetchOrders quindi chiamer la

102
00:08:24,080 --> 00:08:28,460
saga qui fetchOrdersSaga, ricever la mia azione e

103
00:08:28,470 --> 00:08:37,000
copier il codice che ho nell'azione creatore finora. Alla fine invieremo fetchOrdersStart, fetchOrdersSuccess e fetchOrdersFail qui, quindi

104
00:08:37,020 --> 00:08:41,070
dovremmo assicurarci che nell'indice. js file della

105
00:08:41,100 --> 00:08:51,300
cartella azioni, in realt esportiamo tutte queste azioni. Quindi fetchOrdersSuccess, fetchOrdersStart e fetchOrdersFail, li

106
00:08:51,300 --> 00:08:53,190
ho aggiunti

107
00:08:53,310 --> 00:08:55,420
tutti all'esportazione.

108
00:08:55,740 --> 00:09:06,590
Con quello indietro nel film della saga possiamo iniziare semplicemente dando il nostro call put alle azioni di spedizione.

109
00:09:06,620 --> 00:09:13,490
fetchOrdersStart per mostrare essenzialmente lo spinner. Quindi impostiamo i nostri parametri di query

110
00:09:13,490 --> 00:09:20,030
in cui estraiamo il token e l'ID utente, per accedervi dovremmo aspettarci che li

111
00:09:20,030 --> 00:09:29,290
ottengano dall'azione che gestiamo, quindi aggiungiamo azione. di fronte a entrambi. Quindi facciamo una richiesta HTTP e tu hai imparato

112
00:09:29,380 --> 00:09:30,670
come farlo, memorizzalo in

113
00:09:31,520 --> 00:09:38,880
una risposta o in una costante in generale, non importa come lo chiami, usa il rendimento per essere sicuro che aspetti che

114
00:09:39,730 --> 00:09:44,150
finisca e usa un blocco try / catch anche per gestire gli errori.

115
00:09:44,200 --> 00:09:52,780
Quindi cercher di eseguire le mie richieste di ottenere qui, assicurati di portare questo con te, ma

116
00:09:53,940 --> 00:09:57,800
catturer anche eventuali errori che potremmo incontrare.

117
00:09:58,050 --> 00:10:00,180
Iniziamo per a lavorare sul caso di

118
00:10:00,360 --> 00:10:03,370
successo e usiamo il codice che avevamo nel blocco allora.

119
00:10:03,420 --> 00:10:11,220
Quindi, qui nel nostro blocco try, incollo il codice che avevamo nella funzione then prima, creiamo il nostro array vuoto, passiamo in rassegna i

120
00:10:11,340 --> 00:10:15,460
dati di risposta e li inseriamo su questo array, quindi va tutto bene.

121
00:10:15,600 --> 00:10:25,780
E alla fine, abbiamo inviato fetchOrdersSuccess qui o qui, dar semplicemente azioni put. fetchOrdersSuccess e passa su questo array

122
00:10:25,870 --> 00:10:33,160
RecuperoOrders che abbiamo compilato. Con questo, il blocco  fatto, abbiamo aggiunto quella funzionalit alla

123
00:10:33,160 --> 00:10:41,770
nostra saga, nel caso della freccia abbiamo solo bisogno di mettere azioni. fetchOrdersFail e passa

124
00:10:41,950 --> 00:10:45,130
l'errore, questo

125
00:10:45,280 --> 00:10:46,910
 tutto.

126
00:10:46,940 --> 00:10:55,450
Detto questo, tagliamo tutto, una cosa che devo fare qui, sto accedendo ai dati di ricerca, beh questa

127
00:10:55,480 --> 00:10:57,640
 in realt una risposta,

128
00:10:57,810 --> 00:11:01,990
quindi usiamo il nome costante, ristrutturiamo il codice e

129
00:11:02,190 --> 00:11:07,670
con quello, abbiamo finito, lo spostiamo nella nostra saga, nel fetchOrdersSaga.

130
00:11:08,100 --> 00:11:17,520
Ora il creatore di azioni fetchOrders dovrebbe quindi solo creare il nostro oggetto azione, per questo

131
00:11:17,520 --> 00:11:24,280
creer un nuovo tipo di azione come sempre, questo nuovo tipo

132
00:11:24,390 --> 00:11:30,340
di azione sar fetchOrders, quindi esportiamo una costante denominata fetchOrders.

133
00:11:30,410 --> 00:11:37,880
Lo useremo anche come identificatore di stringa e poi nell'ordine del creatore di azioni. js, imposter il

134
00:11:37,970 --> 00:11:43,730
tipo di actionTypes. FETCH_ORDERS e passa il token

135
00:11:43,970 --> 00:11:49,250
e l'ID utente, poich estrarremo entrambi dall'azione nella nostra saga.

136
00:11:49,250 --> 00:11:56,020
Infine dovremmo ascoltare fetchOrders, con questo tipo di azione nell'indice. js file nella cartella

137
00:11:56,140 --> 00:12:08,540
sagas, qui quando abbiamo watchOrder, dar takeEvery actionTypes. FETCH_ORDERS e poi usa il mio fetchOrdersSaga appena creato, quindi questo 

138
00:12:08,600 --> 00:12:10,270
quello che voglio

139
00:12:10,490 --> 00:12:19,600
eseguire ogni volta che rileviamo questo tipo di azione. Salviamo tutto questo e con quello dovremmo avere un

140
00:12:19,600 --> 00:12:26,530
set up in cui possiamo effettivamente ricaricare l'applicazione, siamo loggati automaticamente e visitiamo

141
00:12:26,800 --> 00:12:30,500
i nostri ordini e questo funziona ancora,

142
00:12:30,520 --> 00:12:32,350
ora attraverso una saga.

