1
00:00:02,130 --> 00:00:08,590
Ento, na ltima palestra, continuamos a terceirizar o contedo do nosso arquivo de criador de aes em nossa saga de autoria.

2
00:00:08,670 --> 00:00:17,610
Vamos continuar com isso e vamos seguir em frente com a nossa autenticao. arquivo js na pasta actions, aqui onde realmente

3
00:00:17,610 --> 00:00:27,720
autenticamos, l despachamos auth start e ento no final temos apenas o nosso pedido Ajax aqui onde tentamos

4
00:00:27,810 --> 00:00:35,640
autenticar bem e onde simplesmente tentamos nos inscrever ou entrar, ento o objetivo seria

5
00:00:35,640 --> 00:00:43,380
lidar com isso com uma saga agora. Para fazer isso,  claro, crie uma nova

6
00:00:43,380 --> 00:00:53,440
funo de gerador l, ento uma funo com a estrela e ns podemos nomear este authSaga ou authenticateUserSaga, vamos cham-lo

7
00:00:53,440 --> 00:00:56,180
de authUserSaga talvez. L eu tambm

8
00:00:56,180 --> 00:01:01,110
recebo minha ao e agora podemos novamente executar o cdigo aqui.

9
00:01:01,250 --> 00:01:09,200
Agora em nosso criador de aes, o que fizemos foi que ns despachamos o auth start e ento fizemos nosso pedido HTTP,

10
00:01:09,200 --> 00:01:14,210
deixe-me copiar todo o cdigo para a saga e vamos substitu-lo passo a passo.

11
00:01:14,390 --> 00:01:18,610
Primeiro de tudo, voc aprendeu que ns no chamamos o despacho

12
00:01:18,860 --> 00:01:21,310
assim na saga, ao invs disso

13
00:01:21,320 --> 00:01:30,830
ns chamamos de put, ento a primeira coisa que fazemos  rendermos colocar e alcanar aes onde agora eu quero usar o meu auth start

14
00:01:30,920 --> 00:01:33,140
ao, para isso vamos para o

15
00:01:33,140 --> 00:01:34,130
ndice. arquivo

16
00:01:34,150 --> 00:01:41,060
js na pasta actions, vamos garantir que o authStart seja exportado para que possamos import-lo em

17
00:01:41,060 --> 00:01:41,360
outros

18
00:01:41,360 --> 00:01:49,850
arquivos, adicionei esta exportao agora e de volta na auth. arquivo js na pasta saga,

19
00:01:49,850 --> 00:01:58,020
agora posso usar aes. authStart aqui e execute esta funo para obter a ao deste despacha.

20
00:01:58,040 --> 00:02:00,570
Ento essa  a primeira coisa que colocamos aqui.

21
00:02:00,770 --> 00:02:05,900
Ento ns criamos nossos dados de autenticao onde usamos email e senha e

22
00:02:05,900 --> 00:02:13,330
assim por diante, agora aqui eu devo extrair o email da ao e a senha da ao, isso tambm

23
00:02:13,330 --> 00:02:21,280
significa que ns temos que garantir que sempre que o authUserSaga for executado, a ao na verdade contm essa informao,

24
00:02:21,730 --> 00:02:28,350
vamos garantir isso na prxima etapa, antes de fazermos isso, vamos seguir em frente no cdigo aqui.

25
00:02:28,540 --> 00:02:31,290
Ns configuramos um URL e, em seguida, temos um

26
00:02:31,480 --> 00:02:35,830
cheque de if bem, tambm configurarei a ao. isSignUp com um cheque.

27
00:02:35,830 --> 00:02:40,060
Ento ns temos o nosso pedido HTTP onde usamos

28
00:02:40,110 --> 00:02:44,190
axios, agora no auth. arquivo js ns importamos axios de

29
00:02:44,200 --> 00:02:46,450
axios, no estamos usando nossa instncia customizada.

30
00:02:46,450 --> 00:02:52,730
Ento vamos ao nosso arquivo saga e simplesmente adicionar essa importao tambm, importando os axios dos axios.

31
00:02:54,040 --> 00:02:57,530
Agora em baixo na nossa saga, isso no traz mais

32
00:02:57,760 --> 00:03:04,830
um erro, mas agora algo importante  feito, eu realmente vou mudar a forma como usamos essa promessa post nos

33
00:03:04,940 --> 00:03:10,490
retorna, agora ns temos a resposta l e ento fazemos algo com a resposta .

34
00:03:10,510 --> 00:03:16,780
Vou mudar isso, vou criar uma nova constante, responder e atribuir postes axios, isso seria incorreto, pois

35
00:03:16,840 --> 00:03:22,750
axios post retorna uma promessa mas agora vou adicionar a palavra-chave yield que apenas como uma

36
00:03:23,140 --> 00:03:28,990
nota lateral no  exposta pelo redux saga, mas so os recursos de javascript da

37
00:03:29,080 --> 00:03:32,200
prxima gerao conectados a este conceito de gerador.

38
00:03:32,200 --> 00:03:34,210
Agora, ao fazer isso, ele

39
00:03:34,210 --> 00:03:37,360
no retornar mais uma promessa aqui, mas

40
00:03:37,480 --> 00:03:45,330
espere que essa promessa resolva ou rejeite e armazene o que quer que recebemos de volta nessa constante,

41
00:03:45,520 --> 00:03:48,960
de modo que no preciso mais encadear aqui.

42
00:03:49,090 --> 00:03:57,600
Isso significa que eu no preciso mais, ento aqui, eu posso remover isso, ns tambm removeremos catch e, claro, isso

43
00:03:57,600 --> 00:04:02,510
tambm significa que todo o cdigo que depende da resposta agora pode

44
00:04:02,670 --> 00:04:10,390
ser executado de forma sncrona porque a execuo ir parar aqui at que promessa  resolvida ou rejeitada.

45
00:04:10,440 --> 00:04:19,560
Ento, ns extramos a data de expirao aqui, mantemos nosso clculo exatamente como , fazemos o mesmo para o

46
00:04:19,560 --> 00:04:21,940
armazenamento local que acessamos aqui,

47
00:04:23,220 --> 00:04:28,400
assim como fizemos antes e, em seguida, enviamos novas aes.

48
00:04:28,400 --> 00:04:31,890
Embora voc tenha aprendido que no reexaminamos aes aqui, em

49
00:04:32,120 --> 00:04:43,320
vez disso, cedemos aqui e acessamos as aes. authSuccess. Para isso, precisamos ir ao ndice. js arquivo na pasta aes

50
00:04:43,330 --> 00:04:51,570
e certifique-se que ns exportamos todas as aes que queremos colocar de dentro da nossa

51
00:04:51,570 --> 00:04:56,690
saga de modo que seria authSuccess e, eventualmente, tambm precisamos

52
00:04:56,820 --> 00:05:01,070
authFail ento vamos j exportar isso aqui, authFail.

53
00:05:01,930 --> 00:05:08,860
Com isso na saga, agora estou cedendo essa put aqui,

54
00:05:08,860 --> 00:05:12,630
authSuccess e vou render outra

55
00:05:14,330 --> 00:05:16,630
onde executo aes

56
00:05:16,620 --> 00:05:25,090
checkAuthTimeout, agora essa  uma funo que tambm precisamos exportar aqui, checkAuthTimeout, assim.

57
00:05:25,100 --> 00:05:28,340
Isso  o que quero executar aqui, agora tambm

58
00:05:28,640 --> 00:05:34,020
podemos adicionar instrues de rendimento na frente das chamadas de armazenamento local, como fizemos

59
00:05:34,070 --> 00:05:40,160
anteriormente, embora o armazenamento local seja uma ao sncrona, para que realmente no precisemos pausar, mas

60
00:05:40,160 --> 00:05:40,610
ainda

61
00:05:40,610 --> 00:05:48,160
assim podemos fazer isso, podemos adicionar rendimento aqui para ter uma abordagem consistente, tambm podemos adicionar um rendimento aqui na

62
00:05:49,870 --> 00:05:56,640
frente da nova data e agora com isso, ns temos toda a nossa funo quase terminada, mas e

63
00:05:56,850 --> 00:05:59,110
quanto a este caso de erro aqui?

64
00:06:00,530 --> 00:06:03,540
Bem, agora podemos lidar com isso de uma

65
00:06:03,950 --> 00:06:09,200
maneira muito elegante, ns extramos a resposta aqui porque eu disse que o rendimento

66
00:06:09,200 --> 00:06:12,140
pausaria isso e aguardaria a promessa de resolver

67
00:06:12,140 --> 00:06:18,710
ou rejeitar, agora podemos usar uma construo javascript padro para lidar com um sucesso e um erro

68
00:06:18,710 --> 00:06:21,750
caso, podemos envolver isso com um bloco try.

69
00:06:22,070 --> 00:06:25,440
Ento ns tentamos o seguinte cdigo, esperamos pela

70
00:06:25,460 --> 00:06:29,640
resposta e ento fazemos o nosso sucesso com ela.

71
00:06:30,310 --> 00:06:40,200
No entanto, se isso falhar, vamos realmente pegar o erro e, em seguida, executar este cdigo alternativo e l eu

72
00:06:40,840 --> 00:06:45,060
vou pegar minha ao de envio aqui e

73
00:06:45,990 --> 00:06:52,590
realmente no despach-lo, mas rendimento colocar authFail e assim por diante, e aqui

74
00:06:52,770 --> 00:06:57,420
eu nomeei esse erro, ento eu deveria fazer ento

75
00:06:57,690 --> 00:07:01,880
aqui tambm e use aes. authFail.

76
00:07:02,010 --> 00:07:10,680
Agora, com isso, obtemos a maneira saga de lidar com isso, usando o rendimento para pausar a execuo, para colocar o

77
00:07:10,680 --> 00:07:17,690
authStart e, em seguida, tentar se conseguirmos uma resposta de sucesso e, caso contrrio, despachar o authFail.

78
00:07:18,210 --> 00:07:24,240
Com todas essas coisas mudadas, a nica coisa que temos que fazer  ter certeza de

79
00:07:24,240 --> 00:07:30,730
que o authUserSaga seja realmente executado quando tentamos criar ou atribuir um usurio, ento para isso precisamos

80
00:07:30,900 --> 00:07:34,190
voltar para a nossa autenticao. js arquivo criador de

81
00:07:34,320 --> 00:07:41,420
ao e l, temos este criador de ao de autenticao que ns enviamos em nosso cdigo.

82
00:07:41,430 --> 00:07:49,380
Agora aqui, agora no devemos mais executar esse cdigo antigo que tnhamos l antes, mas simplesmente retornar

83
00:07:49,380 --> 00:07:53,320
uma ao e, para isso, vou criar um

84
00:07:53,760 --> 00:08:04,860
novo tipo de ao aqui, export-lo aqui, exportar const authUser talvez, authUser e no arquivo criador de ao auth, eu vou agora executar isso

85
00:08:05,130 --> 00:08:10,330
ou vou retornar o tipo actionTypes. authUser, esse tipo de

86
00:08:10,350 --> 00:08:17,460
ao recm-criado, logo configuraremos um observador para usar nossa saga recm-criada sempre

87
00:08:17,480 --> 00:08:26,250
que essa ao ocorrer e muito importante, em nossa funo ou gerador authUserSaga aqui, 

88
00:08:26,280 --> 00:08:34,260
claro que extramos email, senha e claro Para se inscrever na ao, precisamos passar

89
00:08:34,290 --> 00:08:35,040
essas

90
00:08:35,070 --> 00:08:40,040
informaes, precisamos passar essas informaes quando criarmos a ao.

91
00:08:40,140 --> 00:08:43,400
Ns entramos aqui como argumentos no criador

92
00:08:43,500 --> 00:08:51,870
de aes, ento devemos simplesmente passar um e-mail em uma propriedade de e-mail, senha em uma propriedade de

93
00:08:51,930 --> 00:08:56,060
senha e isSignUp em uma propriedade isSignUp, como esta.

94
00:08:56,080 --> 00:08:57,030
Agora, com

95
00:08:57,270 --> 00:08:58,900
isso, esse  o

96
00:08:58,930 --> 00:09:06,270
caminho da saga, a nica coisa que falta  que ns conectamos nosso authUserSaga recm-gerado aqui com um observador.

97
00:09:06,490 --> 00:09:11,980
Ento, no ndice. js arquivo na pasta

98
00:09:11,990 --> 00:09:14,040
sagas, vou adicionar

99
00:09:14,050 --> 00:09:23,890
outro rendimento, takeAvery e l vou usar actionTypes. authUser e eu quero executar minha saga recm-adicionada que eu importarei

100
00:09:23,890 --> 00:09:30,560
primeiro de tudo, que  claro a authUserSaga que acabamos de criar aqui,  isso

101
00:09:30,620 --> 00:09:32,720
que eu quero executar aqui,

102
00:09:32,810 --> 00:09:38,000
como sempre sem parnteses, apenas passando um ponteiro para isso funo.

103
00:09:38,360 --> 00:09:39,420
Vamos agora salvar

104
00:09:39,650 --> 00:09:43,750
isso, vamos voltar ao nosso construtor de hambrguer e recarregar esta pgina,

105
00:09:44,150 --> 00:09:45,830
vamos tentar se isso funcionar.

106
00:09:45,950 --> 00:09:51,960
Vou tentar entrar, ento vou mudar para entrar e clicar em enviar,

107
00:09:51,960 --> 00:09:57,690
isso funciona, como voc pode ver, temos authSuccess e authCheckTimeout iniciados.

108
00:09:57,840 --> 00:10:04,430
Eu tambm estou desconectado depois de um curto perodo de tempo e isso simplesmente

109
00:10:04,440 --> 00:10:11,250
acontece porque eu esqueci algo, no auth. js na pasta sagas onde eu demoro para o tempo de expirao, agora

110
00:10:11,250 --> 00:10:14,690
o tempo de expirao  apenas um dado que recebemos da resposta, o

111
00:10:14,910 --> 00:10:16,720
campo expiresIn e que est em segundos.

112
00:10:16,770 --> 00:10:19,110
No entanto o atraso funciona com

113
00:10:19,110 --> 00:10:23,060
milissegundos, ento eu simplesmente preciso multiplicar isso com 1000.

114
00:10:23,070 --> 00:10:25,570
A principal coisa, no entanto,  que funcionou,

115
00:10:25,590 --> 00:10:28,120
vamos tentar novamente agora com esse bug fixo,

116
00:10:28,380 --> 00:10:34,860
se eu voltar a autenticar e eu fizer login mais uma vez, desta vez eu no deveria ser desconectado to

117
00:10:34,860 --> 00:10:35,450
rpido novamente,

118
00:10:35,580 --> 00:10:36,860
ento deixe-me enviar isso,

119
00:10:36,900 --> 00:10:43,050
voc ver o authSuccess e configuramos o timer para que tudo funcione como antes, mas agora usando a saga.

120
00:10:43,290 --> 00:10:49,530
Bem, deixe-me sair e deixe-me tentar criar um novo usurio, ento vou criar um novo endereo de e-mail

121
00:10:49,620 --> 00:10:52,680
aqui e clicar em enviar e isso tambm funciona.

122
00:10:52,830 --> 00:10:58,870
Ento, ns temos o mesmo comportamento de antes, mas agora gerenciando isso atravs da

123
00:10:58,870 --> 00:11:05,180
saga, agora vamos continuar colocando coisas da autenticao. arquivo js na pasta de aes em nosso arquivo saga.

