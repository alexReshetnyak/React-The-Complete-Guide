1
00:00:02,170 --> 00:00:06,460
Now in the last lecture we started to really set up a saga

2
00:00:06,460 --> 00:00:13,180
workflow that makes more sense where we listen to certain actions and then simply execute a saga

3
00:00:13,180 --> 00:00:18,340
which then handles the side effects that are relevant for this action.

4
00:00:18,340 --> 00:00:25,060
Now one important note, I did import takeEvery which sets up our listener from redux saga,

5
00:00:25,150 --> 00:00:31,540
this actually should be redux saga/effects, just a little side note, that's important.

6
00:00:31,540 --> 00:00:39,130
Now with that, let's move on and let's make sure that we actually handle all side effects in our sagas.

7
00:00:39,490 --> 00:00:46,090
So if we stick to the auth.js file for now, let's go through it from top to bottom and see what else

8
00:00:46,090 --> 00:00:48,390
we should put into a saga.

9
00:00:48,730 --> 00:00:51,070
Now auth start doesn't need a saga,

10
00:00:51,100 --> 00:00:53,490
it's action creator which just returns an action,

11
00:00:53,590 --> 00:00:58,120
so it's a pure action creator, no side effects inside of it.

12
00:00:58,150 --> 00:01:02,680
The same is true for auth success and for auth fail,

13
00:01:02,680 --> 00:01:08,130
all these action creators really just will create actions.

14
00:01:08,350 --> 00:01:10,690
We already cleaned up logout,

15
00:01:10,690 --> 00:01:13,320
there is one thing we could do though,

16
00:01:13,540 --> 00:01:16,180
I really put this action here,

17
00:01:16,180 --> 00:01:22,990
now we can definitely use this approach where we just put an object, we could even get rid of all action

18
00:01:22,990 --> 00:01:23,720
creators

19
00:01:23,720 --> 00:01:30,850
now that we use sagas but we could also say that we want to use action creators to have a reliable way

20
00:01:30,850 --> 00:01:38,680
of well, creating our actions and therefore, we should probably also use an action creator here in our saga

21
00:01:38,800 --> 00:01:43,180
instead of hard coding the action object in here.

22
00:01:43,180 --> 00:01:53,360
So I will actually create a new action creator in the auth.js file and I'll name it logoutSucceed,

23
00:01:54,340 --> 00:02:01,990
this will be a function and in here, I will now return the object I hardcoded into the saga,

24
00:02:02,190 --> 00:02:08,550
so this action here, I'll cut it from there and return it in logoutSucceed instead,

25
00:02:08,730 --> 00:02:18,060
you could also name it didLogout or whatever you want. Now this constant here in my action file should

26
00:02:18,060 --> 00:02:22,930
therefore also be exported, which it is so that I can use it

27
00:02:23,280 --> 00:02:25,900
and now in my auth.js

28
00:02:25,910 --> 00:02:37,180
file, in the saga file, I'll import everything as actions from actions index,

29
00:02:37,420 --> 00:02:42,970
right now if we check the index.js file in the actions folder where I now should store, I should

30
00:02:43,000 --> 00:02:46,290
add it to the export here from the auth file,

31
00:02:46,360 --> 00:02:48,950
so here it's logoutSucceed.

32
00:02:49,390 --> 00:02:59,630
So now in my auth.js file in the sagas folder, I can now put actions logoutSucceed and simply execute

33
00:02:59,630 --> 00:03:01,250
this action creator here.

34
00:03:01,550 --> 00:03:08,990
So now with that, I have a consistent approach of using action creators and I no longer need to import

35
00:03:09,020 --> 00:03:13,210
action types in here because I don't hardcode my action in here.

36
00:03:13,610 --> 00:03:17,780
But we wanted to look for other actions to replace with sagas,

37
00:03:17,780 --> 00:03:18,400
right?

38
00:03:18,410 --> 00:03:20,430
So we did it for logout,

39
00:03:20,720 --> 00:03:23,150
now checkAuthTimeout

40
00:03:23,440 --> 00:03:26,060
also is causing some side effects here.

41
00:03:26,300 --> 00:03:32,930
We actually have some asynchronous code in here, setting a timer where we dispatch an action every

42
00:03:32,930 --> 00:03:35,790
time, well the timer finishes,

43
00:03:35,990 --> 00:03:40,340
this is something we definitely want to do in a saga instead

44
00:03:40,550 --> 00:03:41,830
so let's do that.

45
00:03:42,380 --> 00:03:45,630
I'll head over to auth.js in the sagas folder and I'll

46
00:03:45,650 --> 00:03:48,050
first of all create a new generator function,

47
00:03:48,110 --> 00:03:51,700
so a function with a star after the function keyword.

48
00:03:51,710 --> 00:03:55,030
Now we named the auth action creator here

49
00:03:55,040 --> 00:03:56,860
checkAuthTimeout,

50
00:03:57,260 --> 00:04:05,120
so in our saga file we could name it checkAuthTimeoutSaga, we could also name it timedOutLogoutSaga,

51
00:04:05,120 --> 00:04:06,330
whatever you like,

52
00:04:06,410 --> 00:04:08,040
I'll stick to this name.

53
00:04:08,210 --> 00:04:18,210
There I'll also get the action and now in here, in this function I want to execute kind of the same code

54
00:04:18,300 --> 00:04:27,450
I executed in my action creator where I had a timeout and an expiration time and where I then also dispatched

55
00:04:27,450 --> 00:04:28,570
an action so

56
00:04:28,580 --> 00:04:31,300
let's first of all copy it over into our generator

57
00:04:31,350 --> 00:04:37,520
but this is not really how we want to execute it. In a generator, we'll instead rewrite it

58
00:04:37,520 --> 00:04:46,050
and first of all, I can import a helper function, not from redux saga effects but from redux saga,

59
00:04:46,200 --> 00:04:53,060
just like that and that helper function here is called delay

60
00:04:53,390 --> 00:04:57,540
and as you might guess, it delays the execution of the next step.

61
00:04:57,950 --> 00:05:05,990
So what I do is I yield delay and I enter the amount of time I want to delay the execution.

62
00:05:06,270 --> 00:05:14,030
Now the expiration time is not an argument we get here, we get an action here instead but I simply assume

63
00:05:14,030 --> 00:05:21,080
that this action will have the expiration time field and I will delay the continued execution for this

64
00:05:21,170 --> 00:05:23,480
amount of time.

65
00:05:23,480 --> 00:05:31,020
Now with that, what we can do is we pause the execution here and once we're done,

66
00:05:31,100 --> 00:05:38,630
once this succeeds, I really want to log the user out, so here I will yield put and simply execute

67
00:05:38,720 --> 00:05:42,530
actions, not to be confused with our argument here,

68
00:05:42,710 --> 00:05:51,780
actions refers to the actions we import, execute actions logout which will initiate the logout and

69
00:05:51,780 --> 00:05:56,330
actually lead to this saga being executed after a while.

70
00:05:56,910 --> 00:06:04,970
So now we can remove this other code here and this is how we would write our wait for the token to expire

71
00:06:05,130 --> 00:06:09,870
and then logout action code in a saga style.

72
00:06:10,330 --> 00:06:20,010
Now in auth.js, checkAuthTimeout here is now no longer an action creator where I really want to execute

73
00:06:21,010 --> 00:06:29,670
my code here, instead here, I simply just want to dispatch an action which leads to this saga generator

74
00:06:29,670 --> 00:06:31,290
here being started.

75
00:06:31,750 --> 00:06:43,500
So for that I'll add a new action type, I'll export a constant in there which I'll name authCheckTimeout,

76
00:06:45,350 --> 00:06:53,850
use this a string identifier here too and now, I simply want to dispatch this action here

77
00:06:53,910 --> 00:07:04,200
so type, action types authCheckLogout and also important, pass on the expiration time because I'm trying

78
00:07:04,200 --> 00:07:06,920
to extract that in my saga.

79
00:07:07,020 --> 00:07:14,460
So now with that, we got our checkAuthTimeout function running, now to see if that really works,

80
00:07:14,490 --> 00:07:22,530
I'm temporarily replacing the real expiration time with 10 to see if that works, before we can see

81
00:07:22,530 --> 00:07:27,780
if anything works though, we need to go to the index.js file and thus far, I'm only listening to the

82
00:07:27,840 --> 00:07:30,930
auth initiate logout action type.

83
00:07:30,990 --> 00:07:35,640
Now we got a new saga and a new action type so let's import both,

84
00:07:35,710 --> 00:07:44,040
I'll now also import the checkAuthTimeoutSaga from the auth file and I'll yield another action type

85
00:07:44,040 --> 00:07:44,410
here,

86
00:07:44,430 --> 00:07:53,840
takeEvery action types authCheckTimeout and then execute my checkAuthTimeoutSaga.

87
00:07:54,160 --> 00:08:00,100
Now before testing it, let's fix one tiny mistake I just spotted, when I put an action to be executed

88
00:08:00,170 --> 00:08:01,930
after the expiration time,

89
00:08:01,930 --> 00:08:07,210
that of course is referring to the action creator and therefore I should execute it as a function to really put

90
00:08:07,270 --> 00:08:10,420
the action this action creator creates.

91
00:08:10,420 --> 00:08:15,670
Now with that, let's go back to our application and let's try this out, let's first of all reload the application,

92
00:08:16,000 --> 00:08:20,330
we see auth initiate logout because it tries to auto sign us in which fails,

93
00:08:20,530 --> 00:08:26,730
so let's now really sign in and the expected result would be that we're signed out really fast thereafter

94
00:08:26,770 --> 00:08:36,670
because we have such a short expiration time and indeed, we can see that here we are successfully signed

95
00:08:36,670 --> 00:08:36,970
in,

96
00:08:36,970 --> 00:08:43,780
we get a token then we set authCheckTimeout and pretty much immediately after it because we only have

97
00:08:43,780 --> 00:08:50,680
a time span of 10 milliseconds, auth initiate logout is called and thereafter of course, auth logout due

98
00:08:50,680 --> 00:08:51,900
to our saga.

99
00:08:52,180 --> 00:08:54,970
So this is now all running correctly,

100
00:08:55,060 --> 00:09:00,220
you'll also see that these yields of takeEvery seem to be executed right after each other

101
00:09:00,310 --> 00:09:03,460
so it's not like we wait for this action here to occur

102
00:09:03,610 --> 00:09:11,390
for this to run, actually this becomes even clearer if I switch the position because this action auth

103
00:09:11,390 --> 00:09:15,290
initiate logout will appear right at the start when it tries to auto sign us in

104
00:09:15,460 --> 00:09:20,890
and still, it will also successfully listen to that and not wait for this to occur before it sets up

105
00:09:20,890 --> 00:09:22,300
this listener.

106
00:09:22,300 --> 00:09:28,200
I can prove this by simply reloading the page and you'll see still auth initiate logout and auth logout

107
00:09:28,210 --> 00:09:31,330
is executed in the authCheckLogout,

108
00:09:31,330 --> 00:09:32,440
did no query yet.

109
00:09:32,710 --> 00:09:34,290
So with that we get this set up,

110
00:09:34,360 --> 00:09:40,120
now in the auth.js file in the actions folder, in our action creator for checkAuthTimeout,

111
00:09:40,300 --> 00:09:43,000
I'll of course no longer use the 10 milliseconds

112
00:09:43,000 --> 00:09:46,590
but the real expiration timeout to pass it on with the action

113
00:09:46,750 --> 00:09:48,540
because again just remember you,

114
00:09:48,640 --> 00:09:53,010
we use expiration time in our checkAuthTimeoutSaga,

115
00:09:53,050 --> 00:09:59,010
we access it on our action here. So with that, let's move on and let's see what else we can put into a saga

116
00:09:59,050 --> 00:10:00,780
from our action creator file.

