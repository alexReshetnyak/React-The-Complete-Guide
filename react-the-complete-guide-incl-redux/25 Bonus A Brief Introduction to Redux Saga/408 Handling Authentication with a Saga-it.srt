1
00:00:02,130 --> 00:00:08,590
Quindi, nell'ultima lezione, abbiamo continuato a esternalizzare i contenuti del nostro file creatore di azioni nella nostra saga di autenticazione.

2
00:00:08,670 --> 00:00:17,610
Continuiamo e andiamo avanti con la nostra auth. js file nella cartella azioni, qui dove ci autentichiamo

3
00:00:17,610 --> 00:00:27,720
veramente, l inviamo auth start e poi alla fine abbiamo solo la nostra richiesta Ajax qui dove cerchiamo di autenticarci

4
00:00:27,810 --> 00:00:35,640
bene e dove cerchiamo semplicemente di registrarci o di accedere, quindi il obiettivo sarebbe quello

5
00:00:35,640 --> 00:00:43,380
di gestire questo con una saga ora. Per fare questo, naturalmente, creare una nuova

6
00:00:43,380 --> 00:00:53,440
funzione di generatore, quindi una funzione con la stella e possiamo chiamare questo authSaga o authenticateUserSaga, chiamiamolo

7
00:00:53,440 --> 00:00:56,180
authUserSaga forse. L ho anche

8
00:00:56,180 --> 00:01:01,110
la mia azione e ora possiamo ancora eseguire il codice qui.

9
00:01:01,250 --> 00:01:09,200
Ora, nel nostro creatore di azioni, ci che abbiamo fatto  che abbiamo inviato auth start e poi abbiamo fatto la nostra richiesta

10
00:01:09,200 --> 00:01:14,210
HTTP, permettetemi di copiare tutto quel codice nella saga e di sostituirlo passo dopo passo.

11
00:01:14,390 --> 00:01:18,610
Prima di tutto, hai imparato che non chiamiamo dispatch

12
00:01:18,860 --> 00:01:21,310
come questo nella saga, ma

13
00:01:21,320 --> 00:01:30,830
chiamiamo put, quindi la prima cosa che facciamo  cedere e raggiungere le azioni in cui ora voglio usare il mio

14
00:01:30,920 --> 00:01:33,140
auth start azione, per questo

15
00:01:33,140 --> 00:01:34,130
andiamo all'indice. js

16
00:01:34,150 --> 00:01:41,060
file nella cartella actions, assicuriamoci che authStart sia esportato l in modo che possiamo importarlo in altri

17
00:01:41,060 --> 00:01:41,360
file,

18
00:01:41,360 --> 00:01:49,850
ho aggiunto questa esportazione adesso e di nuovo in auth. js file nella cartella saga,

19
00:01:49,850 --> 00:01:58,020
ora posso usare le azioni. authInizia qui dentro ed esegui questa funzione per ottenere l'azione che invia.

20
00:01:58,040 --> 00:02:00,570
Quindi questa  la prima cosa che mettiamo qui.

21
00:02:00,770 --> 00:02:05,900
Quindi creiamo i nostri dati di autenticazione dove usiamo email e

22
00:02:05,900 --> 00:02:13,330
password e cos via, ora qui dovrei estrarre l'email dall'azione e la password dall'azione, questo significa

23
00:02:13,330 --> 00:02:21,280
anche che dobbiamo assicurarci che ogni volta che viene eseguito authUserSaga, l'azione in realt contiene queste informazioni,

24
00:02:21,730 --> 00:02:28,350
ci assicureremo questo nel prossimo passaggio, prima di farlo, passiamo al codice qui.

25
00:02:28,540 --> 00:02:31,290
Abbiamo impostato un URL e quindi avremo un

26
00:02:31,480 --> 00:02:35,830
controllo se ci andr, inoltre imposter l'azione. isSignUp con un controllo.

27
00:02:35,830 --> 00:02:40,060
Poi abbiamo la nostra richiesta HTTP dove usiamo gli

28
00:02:40,110 --> 00:02:44,190
assiomi, ora nella auth. file js importiamo gli assiomi dagli assios,

29
00:02:44,200 --> 00:02:46,450
non stiamo usando la nostra istanza personalizzata.

30
00:02:46,450 --> 00:02:52,730
Quindi andiamo al nostro file saga e aggiungiamo semplicemente l'importazione anche l, importiamo gli assiomi dagli assiidi.

31
00:02:54,040 --> 00:02:57,530
Ora, nella nostra saga, questo non genera pi un errore

32
00:02:57,760 --> 00:03:04,830
ma ora qualcosa di importante  fatto, cambier davvero il modo in cui usiamo questo post di promessa ci restituisce,

33
00:03:04,940 --> 00:03:10,490
in questo momento otteniamo la risposta l e poi facciamo qualcosa con la risposta .

34
00:03:10,510 --> 00:03:16,780
Cambier questo, creer una nuova costante, una risposta e assegner un post di axios, questo sarebbe scorretto

35
00:03:16,840 --> 00:03:22,750
anche se il post di axios restituisce una promessa, ma ora aggiunger la parola chiave yield,

36
00:03:23,140 --> 00:03:28,990
che come nota a margine non  esposta da redux saga ma sono le funzionalit javascript

37
00:03:29,080 --> 00:03:32,200
di prossima generazione collegate a questo concetto di generatore.

38
00:03:32,200 --> 00:03:34,210
Ora, facendo ci, in realt

39
00:03:34,210 --> 00:03:37,360
non restituir pi una promessa qui, ma attendi

40
00:03:37,480 --> 00:03:45,330
che questa promessa risolva o rigetti e poi memorizzi tutto ci che riusciamo a riportare in questa costante, quindi non

41
00:03:45,520 --> 00:03:48,960
ho pi bisogno di fare la catena quindi qui.

42
00:03:49,090 --> 00:03:57,600
Ci significa che non ho pi bisogno di qui, posso rimuoverlo, presto rimuoveremo catch e ovviamente significa anche che

43
00:03:57,600 --> 00:04:02,510
tutto il codice che dipende dalla risposta pu ora essere eseguito

44
00:04:02,670 --> 00:04:10,390
in modo sincrono perch l'esecuzione si fermer qui fino a quando la promessa  risolta o respinta.

45
00:04:10,440 --> 00:04:19,560
Quindi estraggiamo la data di scadenza qui, manterremo i nostri calcoli cos come sono, facciamo lo stesso per la

46
00:04:19,560 --> 00:04:21,940
memoria locale a cui accediamo

47
00:04:23,220 --> 00:04:28,400
qui, cos come abbiamo fatto prima e quindi inviamo nuove azioni.

48
00:04:28,400 --> 00:04:31,890
Anche se hai appreso che non vengono ridispacciate le azioni

49
00:04:32,120 --> 00:04:43,320
qui, ci arrendiamo qui e accediamo alle azioni. authSuccess. Per questo dobbiamo andare all'indice. js file nella cartella azioni

50
00:04:43,330 --> 00:04:51,570
e assicurati di esportare tutte le azioni che vogliamo inserire dalla nostra saga in modo

51
00:04:51,570 --> 00:04:56,690
che siano authSuccess e alla fine avremo anche bisogno

52
00:04:56,820 --> 00:05:01,070
di authFail, quindi esportiamo gi questo qui, authFail.

53
00:05:01,930 --> 00:05:08,860
Con questo nella saga, ora sto cedendo questo posto, authSuccess e

54
00:05:08,860 --> 00:05:12,630
ne dar un altro dove eseguo

55
00:05:14,330 --> 00:05:16,630
le azioni checkAuthTimeout, ora

56
00:05:16,620 --> 00:05:25,090
questa  una funzione che dobbiamo anche esportare qui, checkAuthTimeout, come questo.

57
00:05:25,100 --> 00:05:28,340
Questo  ci che voglio eseguire qui, ora possiamo

58
00:05:28,640 --> 00:05:34,020
anche aggiungere dichiarazioni di rendimento di fronte alle chiamate di memorizzazione locali come abbiamo fatto

59
00:05:34,070 --> 00:05:40,160
in precedenza, anche se lo storage locale  un'azione sincrona, quindi non abbiamo davvero bisogno di fermarci

60
00:05:40,160 --> 00:05:40,610
l,

61
00:05:40,610 --> 00:05:48,160
ma possiamo ancora, possiamo facciamo cos, possiamo aggiungere un rendimento qui per avere un approccio coerente, potrebbe anche aggiungere un rendimento

62
00:05:49,870 --> 00:05:56,640
qui di fronte a una nuova data e ora con quello, abbiamo quasi finito la nostra intera funzione, ma

63
00:05:56,850 --> 00:05:59,110
che dire di questo caso di errore qui?

64
00:06:00,530 --> 00:06:03,540
Bene, ora possiamo gestirlo in un modo molto

65
00:06:03,950 --> 00:06:09,200
elegante, estrapolando qui la risposta perch ho detto che yield si fermerebbe e

66
00:06:09,200 --> 00:06:12,140
aspettiamo che la promessa si risolva o

67
00:06:12,140 --> 00:06:18,710
si rifiuti, ora possiamo usare un costrutto javascript predefinito per gestire sia un successo sia un errore

68
00:06:18,710 --> 00:06:21,750
caso, possiamo avvolgere questo con un blocco try.

69
00:06:22,070 --> 00:06:25,440
Quindi proviamo il seguente codice, aspettiamo la

70
00:06:25,460 --> 00:06:29,640
risposta e poi facciamo il nostro successo con esso.

71
00:06:30,310 --> 00:06:40,200
Tuttavia, se ci fallisce, in realt cattureremo l'errore e poi eseguiremo questo codice alternativo e l prender qui

72
00:06:40,840 --> 00:06:45,060
la mia azione di invio e non lo

73
00:06:45,990 --> 00:06:52,590
invier realmente ma restituir authFail e cos via, e qui ho chiamato

74
00:06:52,770 --> 00:06:57,420
questo errore quindi dovrei farlo quindi anche qui

75
00:06:57,690 --> 00:07:01,880
e usa le azioni. authFail.

76
00:07:02,010 --> 00:07:10,680
Ora con questo, abbiamo il modo di gestirlo in saga, usando yield per sospendere l'esecuzione, mettere authStart

77
00:07:10,680 --> 00:07:17,690
e poi provare se possiamo ottenere una risposta positiva e altrimenti, inviare authFail.

78
00:07:18,210 --> 00:07:24,240
Con tutte queste cose cambiate, l'unica cosa che dobbiamo fare  assicurarci che authUserSaga

79
00:07:24,240 --> 00:07:30,730
venga effettivamente eseguito quando proviamo a creare o assegnare un utente, quindi per questo dobbiamo

80
00:07:30,900 --> 00:07:34,190
tornare alla nostra auth. js action creator

81
00:07:34,320 --> 00:07:41,420
file e l, abbiamo questo autore di azioni che inviamo nel nostro codice.

82
00:07:41,430 --> 00:07:49,380
Ora qui, non dovremmo pi eseguire questo vecchio codice prima, ma semplicemente restituire un'azione e

83
00:07:49,380 --> 00:07:53,320
per questo creer qui un nuovo tipo

84
00:07:53,760 --> 00:08:04,860
di azione, lo esporter qui, esporter const authUser forse, authUser e nel file creator di auth action, ora eseguir questo

85
00:08:05,130 --> 00:08:10,330
o restituir il tipo actionTypes. authUser, questo tipo di azione

86
00:08:10,350 --> 00:08:17,460
appena creato, presto creeremo un watcher per poi utilizzare la nostra saga appena

87
00:08:17,480 --> 00:08:26,250
creata ogni volta che questa azione si verifica e molto importante, nella nostra funzione authUserSaga o

88
00:08:26,280 --> 00:08:34,260
generatore qui, ovviamente estraiamo email, password e, naturalmente, un registrati dall'azione, quindi abbiamo bisogno di

89
00:08:34,290 --> 00:08:35,040
trasmettere

90
00:08:35,070 --> 00:08:40,040
tali informazioni, dobbiamo passare tali informazioni quando creiamo l'azione.

91
00:08:40,140 --> 00:08:43,400
L'abbiamo ottenuto qui come argomento nel

92
00:08:43,500 --> 00:08:51,870
creatore dell'azione, quindi dovremmo semplicemente passare email su una propriet email, password su una propriet password

93
00:08:51,930 --> 00:08:56,060
e isSignUp su una propriet isSignUp, come questa.

94
00:08:56,080 --> 00:08:57,030
Ora con

95
00:08:57,270 --> 00:08:58,900
quello, questa  la

96
00:08:58,930 --> 00:09:06,270
via della saga, l'unica cosa che manca  che colleghiamo il nostro authUserSaga appena generato qui con un osservatore.

97
00:09:06,490 --> 00:09:11,980
Quindi nell'indice. js file nella cartella

98
00:09:11,990 --> 00:09:14,040
sagas, aggiunger un

99
00:09:14,050 --> 00:09:23,890
altro yield, takeEvery e l user actionTypes. authUser e voglio eseguire la mia saga appena aggiunta che importer

100
00:09:23,890 --> 00:09:30,560
prima di tutto, che  ovviamente l'authUserSaga che abbiamo appena creato qui, questo 

101
00:09:30,620 --> 00:09:32,720
quello che voglio eseguire qui,

102
00:09:32,810 --> 00:09:38,000
come sempre senza parentesi, passando solo un puntatore a questo funzione.

103
00:09:38,360 --> 00:09:39,420
Ora salviamo

104
00:09:39,650 --> 00:09:43,750
questo, torniamo al nostro generatore di hamburger e ricarichiamo questa

105
00:09:44,150 --> 00:09:45,830
pagina, proviamo se funziona.

106
00:09:45,950 --> 00:09:51,960
Prover ad accedere, quindi passer all'accesso e premo invio,

107
00:09:51,960 --> 00:09:57,690
funziona, come puoi vedere abbiamo avviato authSuccess e authCheckTimeout.

108
00:09:57,840 --> 00:10:04,430
Sono anche disconnesso dopo un breve periodo e questo succede semplicemente

109
00:10:04,440 --> 00:10:11,250
perch ho dimenticato qualcosa, in auth. js nella cartella sagas in cui tardo per la scadenza, ora il

110
00:10:11,250 --> 00:10:14,690
tempo di scadenza  solo un dato che riemettiamo dalla risposta, il

111
00:10:14,910 --> 00:10:16,720
campo expiresIn e che  in secondi.

112
00:10:16,770 --> 00:10:19,110
Tuttavia il ritardo funziona con

113
00:10:19,110 --> 00:10:23,060
millisecondi, quindi ho semplicemente bisogno di moltiplicarlo con 1000.

114
00:10:23,070 --> 00:10:25,570
La cosa fondamentale per  che ha

115
00:10:25,590 --> 00:10:28,120
funzionato, proviamo ancora adesso con questo bug

116
00:10:28,380 --> 00:10:34,860
corretto, se torno per autenticarmi e accedo ancora una volta, questa volta non dovrei essere disconnesso cos velocemente,

117
00:10:34,860 --> 00:10:35,450
quindi lasciami

118
00:10:35,580 --> 00:10:36,860
inviare questo, vedrai authSuccess

119
00:10:36,900 --> 00:10:43,050
e impostiamo il timer in modo che tutto funzioni come prima ma ora usi la saga.

120
00:10:43,290 --> 00:10:49,530
Bene fammi uscire e fammi provare a creare un nuovo utente, quindi creer un nuovo indirizzo email

121
00:10:49,620 --> 00:10:52,680
qui e premo invio e anche questo funziona.

122
00:10:52,830 --> 00:10:58,870
Quindi otteniamo lo stesso comportamento di prima, ma ora gestendo questo attraverso la saga,

123
00:10:58,870 --> 00:11:05,180
ora continuiamo a mettere le cose dall'autore. file js nella cartella azioni nel nostro file saga.

