1
00:00:02,050 --> 00:00:08,990
En el ltimo video, trasladamos los efectos secundarios de nuestro generador de hamburguesas a su

2
00:00:09,110 --> 00:00:16,640
propia saga, terminemos este mdulo completo o nuestra transformacin del proyecto trabajando en los creadores de

3
00:00:16,640 --> 00:00:17,810
acciones de pedido.

4
00:00:17,930 --> 00:00:21,760
Echamos un vistazo a ese archivo, ya podemos ver la importacin de axios,

5
00:00:21,830 --> 00:00:25,020
por lo que estamos haciendo algunos efectos secundarios en este archivo.

6
00:00:25,040 --> 00:00:27,390
Los primeros creadores de acciones

7
00:00:27,560 --> 00:00:35,840
son puros, pero luego obtenemos purchaseBurger donde tenemos algunos efectos secundarios y tambin tenemos fetchOrders donde

8
00:00:35,840 --> 00:00:38,140
tenemos algunos efectos secundarios.

9
00:00:38,180 --> 00:00:40,490
Comencemos con purchaseBurger, pasemos

10
00:00:40,550 --> 00:00:44,330
esa lgica a una saga ahora.

11
00:00:44,630 --> 00:00:52,040
Entonces, para eso, voy a tomar todo ese cdigo y crear un nuevo archivo que nombrar en orden. js en la carpeta sagas,

12
00:00:52,040 --> 00:00:55,900
all exportar un generador nuevo

13
00:00:56,360 --> 00:01:02,420
y nombrar este generador purchaseBurgerSaga, as que compreBurgerSaga,

14
00:01:02,780 --> 00:01:12,140
as, obtenga la accin aqu y ejecute este cdigo que, por supuesto, reemplazaremos.

15
00:01:13,260 --> 00:01:14,100
En el orden. js

16
00:01:14,110 --> 00:01:19,120
en la carpeta de acciones, vemos que estamos usando la instancia de axios

17
00:01:19,190 --> 00:01:27,940
personalizada, as que vamos a importar eso. Volver a ordenar. js en la carpeta sagas y agrega esa importacin en la parte superior.

18
00:01:27,970 --> 00:01:32,750
Tambin importaremos put desde el efecto de la saga redux,

19
00:01:32,980 --> 00:01:40,960
as que asegurmonos de agregar tambin esta importacin y dado que tambin planeamos realizar algunas acciones para

20
00:01:40,960 --> 00:01:48,220
despachar algunas acciones desde aqu, importar todas las acciones desde la carpeta de mis acciones.

21
00:01:48,370 --> 00:01:51,340
Con eso podemos comenzar a poner acciones

22
00:01:51,340 --> 00:01:54,890
aqu, as que despachamos purchaseBurgerStart aqu, ahora usamos

23
00:01:54,910 --> 00:02:00,740
put porque estamos en una saga. Para eso, tenemos que asegurarnos de que

24
00:02:00,740 --> 00:02:01,890
purchaseBurgerStart realmente se

25
00:02:01,930 --> 00:02:08,610
exporte, as que si voy al ndice. js file en la carpeta de acciones, debo asegurarme

26
00:02:08,650 --> 00:02:10,970
de que desde el archivo de

27
00:02:12,120 --> 00:02:18,780
pedido, purchaseBurgerStart se exporte, y lo mismo ser relevante para purchaseBurgerSuccess y fallar, que tambin enviar aqu,

28
00:02:18,780 --> 00:02:19,370
as que

29
00:02:19,620 --> 00:02:27,750
asegurmonos de que ambos se exporten para comprarBurgerFail y purchaseBurgerSuccess. De vuelta a la orden

30
00:02:27,750 --> 00:02:28,080
&nbsp;

31
00:02:28,080 --> 00:02:30,240
js file, the sagas

32
00:02:30,240 --> 00:02:35,340
folder, entonces puedo ceder put (purchaseBurgerStart ()), as, sin embargo, ejecutado

33
00:02:35,340 --> 00:02:41,460
en este objeto de acciones que agrupa todas las importaciones de accin, entonces

34
00:02:41,460 --> 00:02:49,180
obtendr mi respuesta aqu con yield axios post y como antes, envulvelo en un bloque de

35
00:02:49,220 --> 00:02:52,500
prueba para ver si eso tiene xito.

36
00:02:52,700 --> 00:03:04,050
As que vamos a mover eso aqu y si tuvo xito, ceder acciones concretas. purchaseBurgerSuccess y pasa el nombre de datos de respuesta

37
00:03:04,050 --> 00:03:10,860
y tambin vemos all en nuestro cdigo anterior, tambin pasamos datos

38
00:03:10,860 --> 00:03:18,260
ordenados que recibimos como argumento en nuestro creador de acciones aqu.

39
00:03:18,360 --> 00:03:27,610
Ahora la idea ser simplemente reenviar esto a nuestra saga y acceder a nuestra accin, as que adelante los datos de orden de

40
00:03:27,630 --> 00:03:32,190
accin, sin embargo, esto debe hacerse aqu, por supuesto, para que los

41
00:03:32,190 --> 00:03:35,790
datos de orden de accin se enviarn adems del

42
00:03:35,820 --> 00:03:40,480
nombre de datos que ser la clave que fue creado en firebase.

43
00:03:40,620 --> 00:03:47,790
Ahora, otra cosa que debemos hacer, aqu donde anexamos el token y pasamos los datos de la

44
00:03:48,000 --> 00:03:55,810
orden al servidor, ambos, por supuesto, tambin deberan extraerse de la accin que recibimos, para que podamos reenviar esto.

45
00:03:55,980 --> 00:03:58,590
Con eso conseguimos configurar el caso

46
00:03:58,620 --> 00:04:06,460
de xito, ahora puedo detectar un error y luego enviar esta accin aqu si tenemos un error, as

47
00:04:06,660 --> 00:04:07,690
que aqu

48
00:04:07,680 --> 00:04:09,570
voy a ceder acciones.

49
00:04:09,670 --> 00:04:16,470
purchaseBurgerFail y simplemente reenva el error a este creador de acciones.

50
00:04:16,470 --> 00:04:25,910
Con eso, puedo eliminar todo eso, guardar esto y luego trabajar en el creador de la accin para obtener un token y datos

51
00:04:25,960 --> 00:04:33,160
de orden de reenvo y para darnos una accin que podamos escuchar para que podamos ejecutar esta

52
00:04:33,160 --> 00:04:34,430
saga cuando ocurra.

53
00:04:34,590 --> 00:04:36,280
Para eso voy a ir a

54
00:04:36,280 --> 00:04:40,020
los tipos de accin en primer lugar, queremos comprar una hamburguesa, recuerda eso.

55
00:04:40,240 --> 00:04:42,310
Entonces, en los tipos

56
00:04:42,310 --> 00:04:53,350
de accin, ahora ir aqu y exportar un const purchaseBurger que recibe el nombre como un identificador as, de modo

57
00:04:53,350 --> 00:04:58,410
que en el orden. js file, puedo eliminar todo

58
00:04:58,710 --> 00:05:05,520
el cdigo anterior aqu y en su lugar simplemente devolver un objeto javascript que

59
00:05:05,520 --> 00:05:13,200
es la accin que creamos donde usamos actionTypes. purchaseBurger y donde pasamos los datos de pedido que recibimos como

60
00:05:13,230 --> 00:05:18,380
argumento en el creador de acciones y donde pasamos el token para que nunca tengamos

61
00:05:18,510 --> 00:05:23,160
que cambiar ningn cdigo en ninguna parte de nuestra aplicacin porque el creador

62
00:05:23,160 --> 00:05:27,660
de acciones funciona igual que antes, solo ahora crea accin en lugar de

63
00:05:27,810 --> 00:05:34,560
ejecutar algn cdigo, pero eso se har en la saga y, para que tenga xito, tenemos que crear un

64
00:05:34,560 --> 00:05:35,910
observador para esta compraBurgerSaga.

65
00:05:35,910 --> 00:05:42,240
Entonces en el ndice. js file en la carpeta sagas, crear

66
00:05:42,780 --> 00:05:47,190
otra funcin de generador que denominar watchOrder porque observa mis

67
00:05:47,220 --> 00:05:50,580
sagas relacionadas con pedidos y aqu, antes

68
00:05:50,640 --> 00:05:59,950
que nada, agregar una importacin, as que importa algo de. / orden y ese algo es esta compraBurgerSaga que acabamos

69
00:05:59,950 --> 00:06:00,880
de crear.

70
00:06:01,030 --> 00:06:04,300
As que aqu, en watchOrder, generar

71
00:06:04,420 --> 00:06:13,090
takeEvery tipos de accin, all est el tipo de accin purchaseBurger que acabamos de crear y queremos

72
00:06:13,300 --> 00:06:18,030
ejecutar la compra de BankGSager generada siempre que esto ocurra.

73
00:06:18,040 --> 00:06:24,460
Ahora todo est conectado y deberamos poder hacer compras, pero ahora, usando nuestra saga, veamos

74
00:06:24,460 --> 00:06:26,360
si ese es el caso.

75
00:06:27,180 --> 00:06:30,280
Guardemos todos los archivos y regresemos a

76
00:06:32,440 --> 00:06:34,770
nuestra aplicacin, volvamos a cargarlo

77
00:06:34,960 --> 00:06:37,740
y autentificarnos, as que simplemente iniciar

78
00:06:37,810 --> 00:06:40,170
sesin aqu, cambie para iniciar sesin.

79
00:06:40,250 --> 00:06:43,660
Djame ahora construir una pequea hamburguesa y

80
00:06:43,760 --> 00:06:46,160
pedirla ahora, continuar, continuar aqu,

81
00:06:46,310 --> 00:06:47,770
ingresemos algunos datos.

82
00:06:49,970 --> 00:06:55,380
Con todo lo que ingres, hagamos clic en "order" y "purchaseBurger" se ejecuta aqu, pero

83
00:06:56,620 --> 00:06:58,660
no vemos que pase nada ms,

84
00:06:58,660 --> 00:06:59,700
sabe por qu?

85
00:07:01,320 --> 00:07:03,710
Como perdimos un paso crucial, creamos el

86
00:07:03,780 --> 00:07:11,590
generador de rdenes de observacin pero nunca lo ejecutamos, en ndice. js donde creamos nuestra tienda,

87
00:07:11,610 --> 00:07:23,010
tenemos que ejecutar saga middleware run y ahora ejecutar nuestro generador watchOrder recin creado.

88
00:07:23,130 --> 00:07:28,650
As que pasemos una referencia a watchOrder a esa llamada de funcin de ejecucin aqu, vamos

89
00:07:28,800 --> 00:07:31,750
a guardarlo y vamos a intentarlo de nuevo.

90
00:07:31,770 --> 00:07:32,720
Todava estoy

91
00:07:32,750 --> 00:07:36,050
conectado, as que permtanme reconstruir rpidamente esta

92
00:07:36,090 --> 00:07:45,350
hamburguesa aqu, contine revisando e ingrese los mismos datos de nuevo y hagmoslo nuevamente, djenme hacer clic en "orden" y esto

93
00:07:45,370 --> 00:07:46,620
se ve mucho

94
00:07:46,630 --> 00:07:49,370
mejor, ahora vemos "purchaseBurgerSuccess" aqu, as

95
00:07:49,390 --> 00:07:54,090
que parece que lo hicimos de hecho, haga una compra exitosa.

96
00:07:54,210 --> 00:07:55,410
Eso es realmente genial,

97
00:07:55,410 --> 00:07:59,810
as que asegrate de que tambin recibamos pedidos de una saga para que realmente tengamos los

98
00:07:59,880 --> 00:08:06,710
nicos creadores de accin pura en todos estos archivos de creador de acciones. Para eso, ir

99
00:08:06,720 --> 00:08:15,540
a mi orden. js file en la carpeta sagas y all, crear una

100
00:08:15,540 --> 00:08:18,570
nueva funcin de generador y el creador

101
00:08:18,810 --> 00:08:23,890
de la orden se denomin fetchOrders as que nombrar la saga

102
00:08:24,080 --> 00:08:28,460
aqu fetchOrdersSaga, recibir mi accin y la copiar en el

103
00:08:28,470 --> 00:08:37,000
cdigo que tengo en la accin creador hasta ahora. Eventualmente despacharemos fetchOrdersStart, fetchOrdersSuccess y fetchOrdersFail aqu, as que debemos asegurarnos

104
00:08:37,020 --> 00:08:41,070
de que en el ndice. js archivo de

105
00:08:41,100 --> 00:08:51,300
la carpeta de acciones, realmente exportamos todas estas acciones. As que fetchOrdersSuccess, fetchOrdersStart y fetchOrdersFail, los

106
00:08:51,300 --> 00:08:53,190
agregu todos

107
00:08:53,310 --> 00:08:55,420
a la exportacin.

108
00:08:55,740 --> 00:09:06,590
Con eso de vuelta en el archivo de la saga, podemos comenzar simplemente cediendo nuestra llamada de venta para enviar acciones.

109
00:09:06,620 --> 00:09:13,490
fetchOrdersStart para mostrar esencialmente el spinner. Luego configuramos nuestros parmetros de consulta donde extraemos el

110
00:09:13,490 --> 00:09:20,030
token y la identificacin del usuario, para acceder a ellos debemos esperar que los obtenga de la

111
00:09:20,030 --> 00:09:29,290
accin que manejamos, as que agreguemos accin. delante de ambos. Luego hacemos una solicitud HTTP y usted aprende a

112
00:09:29,380 --> 00:09:30,670
hacerlo, la almacena en

113
00:09:31,520 --> 00:09:38,880
una respuesta o en una constante en general, sin importar cmo la nombre, use el rendimiento para asegurarse de que espere a

114
00:09:39,730 --> 00:09:44,150
que termine y use un bloque try / catch para tambin manejar los errores.

115
00:09:44,200 --> 00:09:52,780
As que intentar ejecutar mis solicitudes de obtencin aqu, asegrese de llevar esto consigo, pero

116
00:09:53,940 --> 00:09:57,800
tambin detectar cualquier error que podamos encontrar.

117
00:09:58,050 --> 00:10:00,180
Sin embargo, primero trabajemos en el caso de

118
00:10:00,360 --> 00:10:03,370
xito y usemos el cdigo que tenamos en el bloque de entonces.

119
00:10:03,420 --> 00:10:11,220
As que aqu en nuestro bloque de prueba, pegar el cdigo que tenamos antes en la funcin anterior, creamos nuestra matriz vaca, recorremos los datos

120
00:10:11,340 --> 00:10:15,460
de respuesta y los presionamos en esta matriz, as que todo est bien.

121
00:10:15,600 --> 00:10:25,780
Y al final, despachamos fetchOrdersSuccess aqu o aqu, simplemente ceder acciones put. fetchOrdersSuccess y pasa esta matriz

122
00:10:25,870 --> 00:10:33,160
fetchedOrders que llenamos. Con eso, el bloque est hecho, tenemos esa funcionalidad agregada a

123
00:10:33,160 --> 00:10:41,770
nuestra saga, en el caso de la flecha solo tenemos que ceder acciones. fetchOrdersFail y pasa el

124
00:10:41,950 --> 00:10:45,130
error, eso es

125
00:10:45,280 --> 00:10:46,910
todo.

126
00:10:46,940 --> 00:10:55,450
Ahora con eso, cortemos eso, una cosa que tengo que hacer aqu, estoy accediendo a los datos res, bueno,

127
00:10:55,480 --> 00:10:57,640
esa es en realidad la

128
00:10:57,810 --> 00:11:01,990
respuesta, as que usemos ese nombre constante, reestructuremos el

129
00:11:02,190 --> 00:11:07,670
cdigo y con eso, terminamos, movemos eso en nuestra saga, en fetchOrdersSaga.

130
00:11:08,100 --> 00:11:17,520
Ahora, el creador de la accin fetchOrders debera crear nuestro objeto de accin, para eso crear

131
00:11:17,520 --> 00:11:24,280
un nuevo tipo de accin como siempre, este nuevo tipo de

132
00:11:24,390 --> 00:11:30,340
accin ser fetchOrders, as que exportaremos una constante llamada fetchOrders.

133
00:11:30,410 --> 00:11:37,880
Lo usaremos tambin como un identificador de cadena y luego en el orden del creador de la accin. js, establecer el

134
00:11:37,970 --> 00:11:43,730
tipo de actionTypes. FETCH_ORDERS y pasa el token y la

135
00:11:43,970 --> 00:11:49,250
identificacin del usuario, ya que extraeremos ambos de la accin en nuestra saga.

136
00:11:49,250 --> 00:11:56,020
Finalmente, debemos escuchar fetchOrders, a este tipo de accin en el ndice. js file en la carpeta

137
00:11:56,140 --> 00:12:08,540
sagas, aqu cuando tenemos watchOrder, ceder takeEvery actionTypes. FETCH_ORDERS y luego uso mi fetchOrdersSaga recin creado, as que esto

138
00:12:08,600 --> 00:12:10,270
es lo que

139
00:12:10,490 --> 00:12:19,600
quiero ejecutar siempre que detectemos este tipo de accin. Guardemos todo eso y con eso, deberamos tener una

140
00:12:19,600 --> 00:12:26,530
configuracin donde podamos cargar la aplicacin, estamos conectados automticamente y visitamos nuestros pedidos,

141
00:12:26,800 --> 00:12:30,500
y esto sigue funcionando, ahora a travs

142
00:12:30,520 --> 00:12:32,350
de una saga.

