1
00:00:02,360 --> 00:00:09,290
Witamy w tym module bonusowym. W tym kursie oczywicie uywalimy wielu redux,

2
00:00:09,380 --> 00:00:17,120
poniewa jest to integralna cz reakcji aplikacji. W naszym budowniczym burgerw rwnie go uywalimy, a

3
00:00:17,120 --> 00:00:24,890
podczas pracy z reduxem mamy do czynienia z problemem, w cudzysowach, obsugi asynchronicznych akcji, takich jak

4
00:00:24,890 --> 00:00:25,980
docieranie do serwera.

5
00:00:26,180 --> 00:00:33,140
Zajmowalimy si tym problemem za pomoc redux-thunk w tym kursie, redux-thunk po to, aby przywrci go do

6
00:00:33,140 --> 00:00:40,510
pamici to pakiet, ktry pozwala nam tworzy twrcw akcji, w ktrych uruchamiamy kod asynchroniczny i gdzie nastpnie wysyamy

7
00:00:40,520 --> 00:00:42,520
inne akcje, gdy tylko "

8
00:00:42,530 --> 00:00:47,690
gotowe i nie ma w tym nic zego, to dla mnie naprawd wane.

9
00:00:47,930 --> 00:00:55,220
W tym module przedstawi alternatyw, ktra niekoniecznie jest lepsza lub gorsza, jest to po

10
00:00:55,250 --> 00:00:58,600
prostu alternatywa, ktra moe ci si spodoba

11
00:00:58,610 --> 00:01:07,130
wicej, ale ktrej nie chcesz wicej, saga redux. Teraz saga redux jest pakietem, ktry kieruje si innym podejciem

12
00:01:07,130 --> 00:01:12,440
do pracy z asynchronicznym kodem i nie miesza go z akcj wysyania.

13
00:01:12,440 --> 00:01:16,840
Teraz spjrzmy, jak to dziaa i jakie lepsze miejsce do

14
00:01:16,910 --> 00:01:23,080
wiczenia, ni w naszym projekcie budowniczym burgerw, to tam mamy ju ca logik, prawda?

15
00:01:23,180 --> 00:01:24,520
Wic zagbimy si w

16
00:01:24,620 --> 00:01:27,430
to i poka ci, jak dziaa saga redux.

