1
00:00:02,050 --> 00:00:08,990
In the last video we moved our burger builder side effects into its own saga,

2
00:00:09,110 --> 00:00:16,640
let's now finish this whole module or our transformation of the project by working on the order action

3
00:00:16,640 --> 00:00:17,810
creators.

4
00:00:17,930 --> 00:00:21,760
We have a look at that file, we can already see the axios import

5
00:00:21,830 --> 00:00:25,020
so we're doing some side effects in this file.

6
00:00:25,040 --> 00:00:27,390
The first action creators are pure though

7
00:00:27,560 --> 00:00:35,840
but then we get purchaseBurger where we have some side effects and we also have fetchOrders where

8
00:00:35,840 --> 00:00:38,140
we have some side effects.

9
00:00:38,180 --> 00:00:40,490
Let's start with purchaseBurger,

10
00:00:40,550 --> 00:00:44,330
let's move that logic into a saga now.

11
00:00:44,630 --> 00:00:52,040
So for that, I'm going to grab all that code and create a new file which I'll name order.js in the sagas

12
00:00:52,040 --> 00:00:55,900
folder, there I'll export a new generator

13
00:00:56,360 --> 00:01:02,420
and I will name this generator purchaseBurgerSaga,

14
00:01:02,780 --> 00:01:12,140
so purchaseBurgerSaga, like this, get the action here and run this code which we will of course replace.

15
00:01:13,260 --> 00:01:14,100
In the order.js

16
00:01:14,110 --> 00:01:19,120
file in the actions folder, we see that we're using the custom axios instance

17
00:01:19,190 --> 00:01:27,940
so let's import that. I'll go back to order.js file in the sagas folder and add that import at the top.

18
00:01:27,970 --> 00:01:32,750
We will also import put from redux saga effect

19
00:01:32,980 --> 00:01:40,960
so let's make sure to also add this import and since we also plan to well put some actions essentially

20
00:01:40,960 --> 00:01:48,220
dispatch some actions from in here, I'll import all the actions from my actions folder.

21
00:01:48,370 --> 00:01:51,340
With that we can start putting actions here,

22
00:01:51,340 --> 00:01:54,890
so we dispatch purchaseBurgerStart here,

23
00:01:54,910 --> 00:02:00,740
now we use put since we're in a saga. For that, we need to make sure that purchaseBurgerStart is actually

24
00:02:00,740 --> 00:02:01,890
exported,

25
00:02:01,930 --> 00:02:08,610
so if I go to the index.js file in the actions folder, I should make sure that from the order file,

26
00:02:08,650 --> 00:02:10,970
purchaseBurgerStart is exported,

27
00:02:12,120 --> 00:02:18,780
and the same will be relevant for purchaseBurgerSuccess and fail which I also eventually dispatch

28
00:02:18,780 --> 00:02:19,370
here

29
00:02:19,620 --> 00:02:27,750
so let's make sure both are exported to purchaseBurgerFail and purchaseBurgerSuccess. Back to the

30
00:02:27,750 --> 00:02:28,080
order.js

31
00:02:28,080 --> 00:02:30,240
file, the sagas folder,

32
00:02:30,240 --> 00:02:35,340
I can then yield put(purchaseBurgerStart()), like this,

33
00:02:35,340 --> 00:02:41,460
however executed on this actions object which bundles all the action imports,

34
00:02:41,460 --> 00:02:49,180
then I'll get my response here with yield axios post and as before,

35
00:02:49,220 --> 00:02:52,500
wrap it in a try block to see if that succeeds.

36
00:02:52,700 --> 00:03:04,050
So let's move that in here and if it did succeed, I will yield put actions.purchaseBurgerSuccess and

37
00:03:04,050 --> 00:03:10,860
pass on response data name and we also see down there in our old code,

38
00:03:10,860 --> 00:03:18,260
we also passed on ordered data which we received as an argument in our action creator here.

39
00:03:18,360 --> 00:03:27,610
Now the idea will be to simply forward this to our saga and access on our action, so forward

40
00:03:27,630 --> 00:03:32,190
action order data, however this needs to be done up here of course

41
00:03:32,190 --> 00:03:35,790
so action order data will be forwarded

42
00:03:35,820 --> 00:03:40,480
besides the data name which will be the key which was created in firebase.

43
00:03:40,620 --> 00:03:47,790
Now one other thing we should do, here where we append the token and pass the order data to the server,

44
00:03:48,000 --> 00:03:55,810
both of these of course also should be extracted from the action we receive, so that we can forward this.

45
00:03:55,980 --> 00:03:58,590
With that we got the success case set up,

46
00:03:58,620 --> 00:04:06,460
now I can catch an error and then dispatch this action here if we do have an error,

47
00:04:06,660 --> 00:04:07,690
so here I will yield

48
00:04:07,680 --> 00:04:09,570
put actions.

49
00:04:09,670 --> 00:04:16,470
purchaseBurgerFail and simply forward the error to this action creator.

50
00:04:16,470 --> 00:04:25,910
With that, I can remove all of that, save this and then work on the action creator to for one forward

51
00:04:25,960 --> 00:04:33,160
order data and token and to give us an action we can listen to so that we can execute this saga when

52
00:04:33,160 --> 00:04:34,430
it occurs.

53
00:04:34,590 --> 00:04:36,280
For that I'll go to action types

54
00:04:36,280 --> 00:04:40,020
first of all, we want to purchase a burger, remember that.

55
00:04:40,240 --> 00:04:42,310
So in action types,

56
00:04:42,310 --> 00:04:53,350
I will now go here and export a const purchaseBurger which receives the name as an identifier just

57
00:04:53,350 --> 00:04:58,410
like that, so that in the order.js file,

58
00:04:58,710 --> 00:05:05,520
I can remove all the old code here and instead simply return a javascript object which is the action

59
00:05:05,520 --> 00:05:13,200
we create where we use actionTypes.purchaseBurger and where we pass on the order data we receive

60
00:05:13,230 --> 00:05:18,380
as an argument in the action creator and where we pass on the token

61
00:05:18,510 --> 00:05:23,160
so that we never have to change any code anywhere in our application because the action creator works

62
00:05:23,160 --> 00:05:27,660
as before, it just now only creates action instead of running some code

63
00:05:27,810 --> 00:05:34,560
but that will be done in the saga and for that to succeed, we need to create a watcher for this

64
00:05:34,560 --> 00:05:35,910
purchaseBurgerSaga.

65
00:05:35,910 --> 00:05:42,240
So in the index.js file in the sagas folder, I'll create another generator function which i'll name

66
00:05:42,780 --> 00:05:47,190
watchOrder because it watches my order related sagas

67
00:05:47,220 --> 00:05:50,580
and here, I first of all will add an import,

68
00:05:50,640 --> 00:05:59,950
so import something from ./order and that something is this purchaseBurgerSaga we just

69
00:05:59,950 --> 00:06:00,880
created.

70
00:06:01,030 --> 00:06:04,300
So here in watchOrder, I will yield

71
00:06:04,420 --> 00:06:13,090
takeEvery action types, there it's the purchaseBurger action type we just created and we want to execute

72
00:06:13,300 --> 00:06:18,030
the purchaseBurgerSaga generated whenever this occurs.

73
00:06:18,040 --> 00:06:24,460
Now everything is hooked up and we should be able to still make purchases but now using our saga,

74
00:06:24,460 --> 00:06:26,360
let's see if that is the case.

75
00:06:27,180 --> 00:06:30,280
Let's save all files and go back to our application,

76
00:06:32,440 --> 00:06:34,770
let's reload it and authenticate,

77
00:06:34,960 --> 00:06:37,740
so I'll simply sign in here,

78
00:06:37,810 --> 00:06:40,170
switch to sign in.

79
00:06:40,250 --> 00:06:43,660
Let me now build a little burger and order it now,

80
00:06:43,760 --> 00:06:46,160
continue, continue here,

81
00:06:46,310 --> 00:06:47,770
let's enter some data.

82
00:06:49,970 --> 00:06:55,380
With all of that entered, let's click order and purchaseBurger is executed here,

83
00:06:56,620 --> 00:06:58,660
we don't see anything else happen though,

84
00:06:58,660 --> 00:06:59,700
do you know why?

85
00:07:01,320 --> 00:07:03,710
Because we missed one crucial step,

86
00:07:03,780 --> 00:07:11,590
we created the watch order generator but we never run this, in index.js where we create our store,

87
00:07:11,610 --> 00:07:23,010
we need to execute saga middleware run and now run our newly created watchOrder generator.

88
00:07:23,130 --> 00:07:28,650
So let's pass a reference to watchOrder to that run function call in here,

89
00:07:28,800 --> 00:07:31,750
let's save it and let's now try this again.

90
00:07:31,770 --> 00:07:32,720
Still logged in so

91
00:07:32,750 --> 00:07:36,050
let me quickly rebuild this burger here,

92
00:07:36,090 --> 00:07:45,350
continue to check out and enter the same data again and let's now try this again, let me click order and this

93
00:07:45,370 --> 00:07:46,620
looks much better,

94
00:07:46,630 --> 00:07:49,370
now we see purchaseBurgerSuccess here

95
00:07:49,390 --> 00:07:54,090
so it looks like we did actually make a successful purchase.

96
00:07:54,210 --> 00:07:55,410
That's really great,

97
00:07:55,410 --> 00:07:59,810
so let's make sure that we also fetch orders from within a saga

98
00:07:59,880 --> 00:08:06,710
so that we really have the only pure action creators in all these action creator files. For that, I'll

99
00:08:06,720 --> 00:08:15,540
go to my order.js file in the sagas folder and in there, I'll create a new generator function and the order

100
00:08:15,540 --> 00:08:18,570
creator was named fetchOrders

101
00:08:18,810 --> 00:08:23,890
so I will name the saga here fetchOrdersSaga,

102
00:08:24,080 --> 00:08:28,460
I will receive my action and I copy in the code I have in the action creator

103
00:08:28,470 --> 00:08:37,000
thus far. We will eventually dispatch fetchOrdersStart, fetchOrdersSuccess and fetchOrdersFail

104
00:08:37,020 --> 00:08:41,070
here so we should make sure that in the index.js file of

105
00:08:41,100 --> 00:08:51,300
the actions folder, we actually export all these actions. So fetchOrdersSuccess, fetchOrdersStart and

106
00:08:51,300 --> 00:08:53,190
fetchOrdersFail,

107
00:08:53,310 --> 00:08:55,420
I added them all to the export.

108
00:08:55,740 --> 00:09:06,590
With that back in the saga filem we can start by simply yielding our put call to dispatch actions.

109
00:09:06,620 --> 00:09:13,490
fetchOrdersStart to essentially show the spinner. Then we set up our query parameters where we extract the

110
00:09:13,490 --> 00:09:20,030
token and the user ID, to access them we should expect them to get them from the action we handle,

111
00:09:20,030 --> 00:09:29,290
so let's add action. in front of both. Then we make an HTTP request and you learned how to do that, store it

112
00:09:29,380 --> 00:09:30,670
in a response

113
00:09:31,520 --> 00:09:38,880
or in a constant in general no matter how you name it, use yield to make sure you wait for it to finish

114
00:09:39,730 --> 00:09:44,150
and use a try/catch block to also handle errors.

115
00:09:44,200 --> 00:09:52,780
So I will try to execute my get requests here, make sure to take this get with you

116
00:09:53,940 --> 00:09:57,800
but I will also catch any errors we might encounter.

117
00:09:58,050 --> 00:10:00,180
Let's first work on the success case though

118
00:10:00,360 --> 00:10:03,370
and let's use the code we had in the then block.

119
00:10:03,420 --> 00:10:11,220
So here in our try block, I'll paste in the code we had in the then function before, we create our empty array,

120
00:10:11,340 --> 00:10:15,460
loop through the response data and push it onto this array so that's all fine.

121
00:10:15,600 --> 00:10:25,780
And in the end, we dispatched fetchOrdersSuccess here or here, I will simply yield put actions.fetchOrdersSuccess

122
00:10:25,870 --> 00:10:33,160
and pass on this fetchedOrders array we populated. With that, the then block is done,

123
00:10:33,160 --> 00:10:41,770
we have that functionality added to our saga, in the arrow case we only need to yield put actions.fetchOrdersFail

124
00:10:41,950 --> 00:10:45,130
and pass on the error,

125
00:10:45,280 --> 00:10:46,910
that's all.

126
00:10:46,940 --> 00:10:55,450
Now with that, let's cut that all, one thing I need to do here, I'm accessing res data,

127
00:10:55,480 --> 00:10:57,640
well that's actually response

128
00:10:57,810 --> 00:11:01,990
so let's use that constant name, restructure the code

129
00:11:02,190 --> 00:11:07,670
and with that, we're done, we move that into our saga, into the fetchOrdersSaga.

130
00:11:08,100 --> 00:11:17,520
Now the fetchOrders action creator should therefore really just create our action object, for that I'll

131
00:11:17,520 --> 00:11:24,280
create a new action type as always, this new action type will be fetchOrders,

132
00:11:24,390 --> 00:11:30,340
so let's export a constant named fetchOrders.

133
00:11:30,410 --> 00:11:37,880
We'll use that as a string identifier too and then in the action creator order.js, I'll set the type of

134
00:11:37,970 --> 00:11:43,730
actionTypes.FETCH_ORDERS and pass on the token

135
00:11:43,970 --> 00:11:49,250
and the user ID, as we will extract both from the action in our saga.

136
00:11:49,250 --> 00:11:56,020
Finally we should listen to fetchOrders, to this action type in the index.js file in the sagas folder,

137
00:11:56,140 --> 00:12:08,540
here when we have watchOrder, I will yield takeEvery actionTypes.FETCH_ORDERS and then use my newly created

138
00:12:08,600 --> 00:12:10,270
fetchOrdersSaga,

139
00:12:10,490 --> 00:12:19,600
so this is what I want to execute whenever we detect this action type. Let's save all of that and with

140
00:12:19,600 --> 00:12:26,530
that, we should have a set up where we can indeed reload the application, we're logged in automatically

141
00:12:26,800 --> 00:12:30,500
and visit our orders and this still works,

142
00:12:30,520 --> 00:12:32,350
now through a saga.

