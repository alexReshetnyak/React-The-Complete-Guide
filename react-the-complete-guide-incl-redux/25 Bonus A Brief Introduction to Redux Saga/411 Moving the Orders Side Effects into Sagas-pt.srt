1
00:00:02,050 --> 00:00:08,990
No ltimo vdeo, transferimos os efeitos colaterais do nosso criador de hambrgueres para sua prpria

2
00:00:09,110 --> 00:00:16,640
saga, agora vamos concluir todo esse mdulo ou a transformao do projeto trabalhando nos criadores de

3
00:00:16,640 --> 00:00:17,810
aes de pedido.

4
00:00:17,930 --> 00:00:21,760
Ns olhamos para aquele arquivo, ns j podemos ver os axios

5
00:00:21,830 --> 00:00:25,020
importados, ento estamos fazendo alguns efeitos colaterais neste arquivo.

6
00:00:25,040 --> 00:00:27,390
Os primeiros criadores de ao

7
00:00:27,560 --> 00:00:35,840
so puros, mas depois compramos o BurgerBurger, onde temos alguns efeitos colaterais e tambm temos o fetchOrders,

8
00:00:35,840 --> 00:00:38,140
onde temos alguns efeitos colaterais.

9
00:00:38,180 --> 00:00:40,490
Vamos comear com o purchaseBurger,

10
00:00:40,550 --> 00:00:44,330
vamos agora mover essa lgica para uma saga.

11
00:00:44,630 --> 00:00:52,040
Ento, para isso, vou pegar todo esse cdigo e criar um novo arquivo que eu vou nomear. js na pasta sagas, l

12
00:00:52,040 --> 00:00:55,900
eu vou exportar um novo gerador

13
00:00:56,360 --> 00:01:02,420
e vou nomear esse gerador como purchaseBurgerSaga, assim o

14
00:01:02,780 --> 00:01:12,140
purchaseBurgerSaga, assim, adquira a ao aqui e execute este cdigo que iremos, naturalmente, substituir.

15
00:01:13,260 --> 00:01:14,100
Na ordem. arquivo

16
00:01:14,110 --> 00:01:19,120
js na pasta actions, vemos que estamos usando a instncia de

17
00:01:19,190 --> 00:01:27,940
axios customizados, ento vamos importar isso. Eu vou voltar a ordem. js na pasta sagas e adicione essa importao no topo.

18
00:01:27,970 --> 00:01:32,750
Ns tambm vamos importar put do efeito redux saga,

19
00:01:32,980 --> 00:01:40,960
ento vamos nos certificar de adicionar essa importao e como tambm planejamos colocar algumas aes

20
00:01:40,960 --> 00:01:48,220
essencialmente para despachar algumas aes daqui, eu importarei todas as aes da pasta actions.

21
00:01:48,370 --> 00:01:51,340
Com isso podemos comear a colocar aes

22
00:01:51,340 --> 00:01:54,890
aqui, ento ns enviamos purchaseBurgerStart aqui, agora usamos

23
00:01:54,910 --> 00:02:00,740
put desde que estamos em uma saga. Para isso, precisamos garantir que o

24
00:02:00,740 --> 00:02:01,890
purchaseBurgerStart seja

25
00:02:01,930 --> 00:02:08,610
realmente exportado, portanto, se eu for ao ndice. js na pasta actions, eu devo ter certeza

26
00:02:08,650 --> 00:02:10,970
que no arquivo do pedido, o

27
00:02:12,120 --> 00:02:18,780
purchaseBurgerStart  exportado, e o mesmo ser relevante para o purchaseBurgerSuccess e falha que eu tambm despacho

28
00:02:18,780 --> 00:02:19,370
aqui,

29
00:02:19,620 --> 00:02:27,750
ento vamos garantir que ambos sejam exportados para purchaseBurgerFail e purchaseBurgerSuccess. De volta ao pedido.

30
00:02:27,750 --> 00:02:28,080
&nbsp;

31
00:02:28,080 --> 00:02:30,240
js arquivo, a pasta sagas,

32
00:02:30,240 --> 00:02:35,340
eu posso ento produzir put (purchaseBurgerStart ()), assim, no entanto executado

33
00:02:35,340 --> 00:02:41,460
neste objeto aes que empacota todas as importaes de ao, ento eu vou

34
00:02:41,460 --> 00:02:49,180
ter minha resposta aqui com postes de rendimento post e como antes, envolv-lo em um bloco

35
00:02:49,220 --> 00:02:52,500
try para ver se isso  bem-sucedido.

36
00:02:52,700 --> 00:03:04,050
Ento, vamos mudar isso aqui e se tiver sucesso, eu vou produzir aes colocadas. purchaseBurgerSuccess e passar o nome dos dados de resposta e

37
00:03:04,050 --> 00:03:10,860
tambm vemos l em baixo no nosso cdigo antigo, tambm passamos os

38
00:03:10,860 --> 00:03:18,260
dados ordenados que recebemos como argumento no nosso criador de aes aqui.

39
00:03:18,360 --> 00:03:27,610
Agora, a idia ser simplesmente encaminhar isso para nossa saga e acessar nossa ao, para encaminhar dados de ordem de ao, mas

40
00:03:27,630 --> 00:03:32,190
isso precisa ser feito aqui,  claro, para que os dados

41
00:03:32,190 --> 00:03:35,790
de ordem de ao sejam encaminhados alm do nome

42
00:03:35,820 --> 00:03:40,480
de dados que ser a chave que foi criado no Firebase.

43
00:03:40,620 --> 00:03:47,790
Agora, uma outra coisa que devemos fazer, aqui onde adicionamos o token e passamos os dados do

44
00:03:48,000 --> 00:03:55,810
pedido para o servidor, ambos obviamente tambm devem ser extrados da ao que recebemos, para que possamos encaminhar isso.

45
00:03:55,980 --> 00:03:58,590
Com isso, temos o caso de

46
00:03:58,620 --> 00:04:06,460
sucesso configurado, agora eu posso pegar um erro e, em seguida, despachar esta ao aqui se tivermos um erro,

47
00:04:06,660 --> 00:04:07,690
ento aqui vou

48
00:04:07,680 --> 00:04:09,570
dar as aes de venda.

49
00:04:09,670 --> 00:04:16,470
purchaseBurgerFail e simplesmente encaminhe o erro para este criador de aes.

50
00:04:16,470 --> 00:04:25,910
Com isso, posso remover tudo isso, salvar isso e, em seguida, trabalhar no criador de aes para um dado de pedido direto

51
00:04:25,960 --> 00:04:33,160
e token e para nos dar uma ao que podemos ouvir para que possamos executar essa saga

52
00:04:33,160 --> 00:04:34,430
quando ela ocorrer.

53
00:04:34,590 --> 00:04:36,280
Para isso, vou primeiro

54
00:04:36,280 --> 00:04:40,020
aos tipos de ao, queremos comprar um hambrguer, lembre-se disso.

55
00:04:40,240 --> 00:04:42,310
Ento, nos tipos

56
00:04:42,310 --> 00:04:53,350
de ao, eu irei agora exportar um const purchaseBurger que recebe o nome como um identificador,

57
00:04:53,350 --> 00:04:58,410
assim, na ordem. arquivo js, eu posso remover

58
00:04:58,710 --> 00:05:05,520
todo o cdigo antigo aqui e simplesmente retornar um objeto javascript que 

59
00:05:05,520 --> 00:05:13,200
a ao que criamos onde usamos actionTypes. purchaseBurger e onde passamos os dados do pedido que recebemos como

60
00:05:13,230 --> 00:05:18,380
um argumento no criador da ao e onde passamos o token para que nunca

61
00:05:18,510 --> 00:05:23,160
tenhamos que alterar nenhum cdigo em nenhum lugar de nosso aplicativo porque o

62
00:05:23,160 --> 00:05:27,660
criador de aes funciona como antes, apenas agora cria ao em vez

63
00:05:27,810 --> 00:05:34,560
de executar algum cdigo, mas isso ser feito na saga e para que isso acontea, precisamos criar um observador

64
00:05:34,560 --> 00:05:35,910
para este purchaseBurgerSaga.

65
00:05:35,910 --> 00:05:42,240
Ento, no ndice. js arquivo na pasta sagas, vou criar outra

66
00:05:42,780 --> 00:05:47,190
funo geradora que eu vou nomear watchOrder porque ele assiste

67
00:05:47,220 --> 00:05:50,580
a minha ordem relacionada sagas e aqui, eu

68
00:05:50,640 --> 00:05:59,950
primeiro de tudo ir adicionar uma importao, ento importe algo de. / order e esse algo  essa purchaseBurgerSaga que acabamos

69
00:05:59,950 --> 00:06:00,880
de criar.

70
00:06:01,030 --> 00:06:04,300
Ento, aqui no watchOrder, eu produzirei

71
00:06:04,420 --> 00:06:13,090
todos os tipos de ao, l est o tipo de ao purchaseBurger que acabamos de criar e

72
00:06:13,300 --> 00:06:18,030
queremos executar o purchaseBurgerSaga gerado sempre que isso ocorrer.

73
00:06:18,040 --> 00:06:24,460
Agora tudo est ligado e ns ainda poderemos fazer compras, mas agora, usando nossa saga, vamos ver

74
00:06:24,460 --> 00:06:26,360
se  esse o caso.

75
00:06:27,180 --> 00:06:30,280
Vamos salvar todos os arquivos e voltar

76
00:06:32,440 --> 00:06:34,770
para o nosso aplicativo, vamos

77
00:06:34,960 --> 00:06:37,740
recarreg-lo e autenticar, ento eu simplesmente

78
00:06:37,810 --> 00:06:40,170
entrarei aqui, mude para entrar.

79
00:06:40,250 --> 00:06:43,660
Deixe-me agora construir um hambrguer e pedir

80
00:06:43,760 --> 00:06:46,160
agora, continue, continue aqui, vamos

81
00:06:46,310 --> 00:06:47,770
inserir alguns dados.

82
00:06:49,970 --> 00:06:55,380
Com tudo isso entrado, vamos clicar em order e purchaseBurger  executado aqui,

83
00:06:56,620 --> 00:06:58,660
no vemos mais nada, voc

84
00:06:58,660 --> 00:06:59,700
sabe por qu?

85
00:07:01,320 --> 00:07:03,710
Como perdemos um passo crucial, criamos o

86
00:07:03,780 --> 00:07:11,590
gerador de ordem de observao, mas nunca o executamos no ndice. js onde criamos nossa loja,

87
00:07:11,610 --> 00:07:23,010
precisamos executar o saga middleware run e agora executar nosso gerador watchOrder recm-criado.

88
00:07:23,130 --> 00:07:28,650
Ento, vamos passar uma referncia para watchOrder para essa chamada de funo run

89
00:07:28,800 --> 00:07:31,750
aqui, vamos salv-la e vamos tentar novamente.

90
00:07:31,770 --> 00:07:32,720
Ainda logado

91
00:07:32,750 --> 00:07:36,050
ento deixe-me rapidamente reconstruir este hambrguer aqui,

92
00:07:36,090 --> 00:07:45,350
continue a verificar e inserir os mesmos dados novamente e vamos agora tentar novamente, deixe-me clicar em ordem e

93
00:07:45,370 --> 00:07:46,620
isso parece muito

94
00:07:46,630 --> 00:07:49,370
melhor, agora vemos purchaseBurgerSuccess aqui, ento

95
00:07:49,390 --> 00:07:54,090
parece que fizemos realmente fazer uma compra bem sucedida.

96
00:07:54,210 --> 00:07:55,410
Isso  timo, ento

97
00:07:55,410 --> 00:07:59,810
vamos garantir que tambm recebamos pedidos de uma saga para que realmente tenhamos os nicos

98
00:07:59,880 --> 00:08:06,710
criadores de aes puras em todos esses arquivos de criadores de ao. Para isso, vou

99
00:08:06,720 --> 00:08:15,540
ao meu pedido. arquivo js na pasta sagas e l, eu vou

100
00:08:15,540 --> 00:08:18,570
criar uma nova funo geradora e

101
00:08:18,810 --> 00:08:23,890
o criador da ordem foi chamado fetchOrders ento vou nomear a

102
00:08:24,080 --> 00:08:28,460
saga aqui fetchOrdersSaga, vou receber minha ao e copio

103
00:08:28,470 --> 00:08:37,000
no cdigo que tenho na action criador at agora. Eventualmente ns iremos despachar fetchOrdersStart, fetchOrdersSuccess e fetchOrdersFail aqui, ento devemos

104
00:08:37,020 --> 00:08:41,070
nos certificar disso no ndice. arquivo js da

105
00:08:41,100 --> 00:08:51,300
pasta actions, ns realmente exportamos todas essas aes. Ento, fetchOrdersSuccess, fetchOrdersStart e fetchOrdersFail, adicionei

106
00:08:51,300 --> 00:08:53,190
todos eles

107
00:08:53,310 --> 00:08:55,420
 exportao.

108
00:08:55,740 --> 00:09:06,590
Com isso de volta no filem da saga, podemos comear simplesmente fornecendo nossa chamada para aes de despacho.

109
00:09:06,620 --> 00:09:13,490
fetchOrdersStart para mostrar essencialmente o spinner. Em seguida, configuramos nossos parmetros de consulta, nos quais

110
00:09:13,490 --> 00:09:20,030
extramos o token e o ID do usurio, para acess-los, devemos esperar que eles os obtenham da

111
00:09:20,030 --> 00:09:29,290
ao que manipulamos, portanto, vamos adicionar uma ao. na frente de ambos. Em seguida, fazemos uma solicitao HTTP e voc aprendeu

112
00:09:29,380 --> 00:09:30,670
como fazer isso, armazen-lo

113
00:09:31,520 --> 00:09:38,880
em uma resposta ou em uma constante em geral, no importa como voc nome-lo, use o rendimento para garantir que ele

114
00:09:39,730 --> 00:09:44,150
termine e use um bloco try / catch para tambm lidar com erros.

115
00:09:44,200 --> 00:09:52,780
Ento, vou tentar executar meus pedidos de get aqui, certifique-se de levar isso com voc, mas tambm

116
00:09:53,940 --> 00:09:57,800
vou pegar quaisquer erros que possamos encontrar.

117
00:09:58,050 --> 00:10:00,180
Vamos primeiro trabalhar no caso de sucesso

118
00:10:00,360 --> 00:10:03,370
e vamos usar o cdigo que tivemos no bloco then.

119
00:10:03,420 --> 00:10:11,220
Ento, aqui no nosso bloco try, eu vou colar o cdigo que ns tivemos na funo then antes, ns criamos nosso array vazio, passamos

120
00:10:11,340 --> 00:10:15,460
pelos dados de resposta e os colocamos neste array, ento est tudo bem.

121
00:10:15,600 --> 00:10:25,780
E no final, ns despachamos o fetchOrdersSuccess aqui ou aqui, eu simplesmente entregarei aes. fetchOrdersSuccess e repassar essa matriz

122
00:10:25,870 --> 00:10:33,160
fetchedOrders que preenchemos. Com isso, o bloco then  feito, temos essa funcionalidade adicionada

123
00:10:33,160 --> 00:10:41,770
 nossa saga, no caso da flecha ns s precisamos render aes de put. fetchOrdersFail e passa o

124
00:10:41,950 --> 00:10:45,130
erro, isso 

125
00:10:45,280 --> 00:10:46,910
tudo.

126
00:10:46,940 --> 00:10:55,450
Agora, com isso, vamos cortar tudo isso, uma coisa que preciso fazer aqui, estou acessando dados de res,

127
00:10:55,480 --> 00:10:57,640
bem, na verdade  resposta,

128
00:10:57,810 --> 00:11:01,990
ento vamos usar esse nome constante, reestruturar o cdigo

129
00:11:02,190 --> 00:11:07,670
e, com isso, terminamos, movemos isso em nossa saga, no fetchOrdersSaga.

130
00:11:08,100 --> 00:11:17,520
Agora, o criador de aes fetchOrders deve, portanto, apenas criar nosso objeto de ao, para isso eu

131
00:11:17,520 --> 00:11:24,280
criarei um novo tipo de ao como sempre, esse novo tipo de

132
00:11:24,390 --> 00:11:30,340
ao ser fetchOrders, ento vamos exportar uma constante chamada fetchOrders.

133
00:11:30,410 --> 00:11:37,880
Usaremos isso como um identificador de string e, em seguida, na ordem do criador de ao. js, vou definir o

134
00:11:37,970 --> 00:11:43,730
tipo de actionTypes. FETCH_ORDERS e passar o token e o

135
00:11:43,970 --> 00:11:49,250
ID do usurio, j que extrairemos ambos da ao em nossa saga.

136
00:11:49,250 --> 00:11:56,020
Finalmente, devemos ouvir fetchOrders, para esse tipo de ao no ndice. arquivo js na pasta sagas,

137
00:11:56,140 --> 00:12:08,540
aqui quando tivermos watchOrder, eu produzirei takeAvery actionTypes. FETCH_ORDERS e, em seguida, use o meu recm-criado fetchOrdersSaga, ento 

138
00:12:08,600 --> 00:12:10,270
isso que eu

139
00:12:10,490 --> 00:12:19,600
quero executar sempre que detectarmos esse tipo de ao. Vamos salvar tudo isso e, com isso, devemos ter

140
00:12:19,600 --> 00:12:26,530
uma configurao onde podemos realmente recarregar o aplicativo, estamos logados automaticamente e visitar

141
00:12:26,800 --> 00:12:30,500
nossos pedidos e isso ainda funciona, agora

142
00:12:30,520 --> 00:12:32,350
atravs de uma saga.

