1
00:00:02,180 --> 00:00:05,520
Wic duo mwiem o tym, jak moemy uy sagi redux,

2
00:00:05,720 --> 00:00:11,540
teraz uyjmy jej, aby poczu, jak to dziaa. Z sag redux, tworzysz tak

3
00:00:11,570 --> 00:00:21,050
zwane sagi, ktre s w zasadzie rodzajami funkcji, ktre uruchamiasz na pewnych akcjach i ktre obsuguj ca twoj

4
00:00:21,130 --> 00:00:28,460
logik efektw ubocznych, a efektem ubocznym jest po prostu co w rodzaju dostpu do

5
00:00:28,460 --> 00:00:36,280
lokalnej pamici, sigania do serwera, moe zmiana trasy lub wykonanie taktowania takiego jak tutaj.

6
00:00:36,290 --> 00:00:41,930
S to wszystkie efekty uboczne, poniewa nie bezporednio manipuluj twoim sklepem redux, mog zrobi

7
00:00:41,930 --> 00:00:47,330
co, co prowadzi do innego stanu, ktry na koniec jest przechowywany w twoim

8
00:00:47,660 --> 00:00:51,450
sklepie redux, ale nie s bezporednio zuywane przez reduktor.

9
00:00:51,890 --> 00:00:56,700
W tym celu utworz nowy podfolder w folderze sklepu, a ja nadam mu nazw sagi, nazwa

10
00:00:56,870 --> 00:00:59,970
zaley od ciebie, ale to co, co zobaczysz cakiem sporo.

11
00:01:00,170 --> 00:01:05,290
Teraz w sagach utworz rne pliki dla rnych rodzajw sag

12
00:01:05,300 --> 00:01:08,800
i dlaczego nie zaczniemy tutaj od authagi.

13
00:01:08,990 --> 00:01:18,170
Wic utworz nowy plik, auth. js w folderze sagas, teraz tutaj, chc stworzy moje sagi redux,

14
00:01:18,260 --> 00:01:22,100
pytanie brzmi wanie w jaki sposb tworzymy tak sag,

15
00:01:22,100 --> 00:01:25,010
co to waciwie jest? W gruncie rzeczy jest

16
00:01:25,040 --> 00:01:31,280
to swego rodzaju funkcja i mwi troch, poniewa jest w niej troch skrtu, ktry wkrtce

17
00:01:31,280 --> 00:01:32,280
wam poka.

18
00:01:32,660 --> 00:01:35,900
Najpierw stwrzmy tutaj funkcj, uyj sowa kluczowego

19
00:01:36,100 --> 00:01:39,490
function i nazwijmy j, powiedzmy, e chcemy

20
00:01:39,530 --> 00:01:46,820
zastpi sag do wylogowania, gdzie wyczycimy j w lokalnej pamici, wic aden asynchroniczny kod w

21
00:01:46,850 --> 00:01:52,580
tam, tylko jaki efekt uboczny, ktry dzieje si synchronicznie w rzeczywistoci.

22
00:01:52,730 --> 00:01:54,550
Tak wic nazw funkcji

23
00:01:54,710 --> 00:01:55,880
tutaj wyloguj

24
00:01:55,880 --> 00:02:01,880
si, teraz na tej funkcji, mog przyj argument, ktry ponownie otrzymam automatycznie, oczywicie

25
00:02:01,880 --> 00:02:04,370
poka ci, jak podczy takie

26
00:02:04,370 --> 00:02:07,020
sagi, argumentem byoby dziaanie, wic akcja

27
00:02:07,070 --> 00:02:12,820
ktry zosta wysany, poniewa sagi s powizane z dziaaniami, powrc do tego.

28
00:02:12,860 --> 00:02:18,660
Teraz powiedziaem, e to nie bdzie funkcja, powiedziaem rodzaj funkcji, dodajmy

29
00:02:19,070 --> 00:02:25,350
gwiazdk za sowem kluczowym function, a ta gwiazda jest tutaj wana, nie

30
00:02:25,580 --> 00:02:28,820
jest czci nazwy funkcji, faktycznie zamienia

31
00:02:28,820 --> 00:02:34,480
t funkcj w tak zwany generator. Generatory to funkcje javascript nastpnej

32
00:02:34,480 --> 00:02:42,830
generacji, ktre s funkcjami, ktre mog by wykonywane przyrostowo, dziki czemu mona je wywoywa

33
00:02:42,830 --> 00:02:49,490
i nie uruchamiaj si od razu do pocztku, ale mona wstrzyma

34
00:02:49,490 --> 00:02:56,780
wykonywanie funkcji, na przykad czeka na zakoczenie asynchronicznego kodu i wanie to wykorzystuje

35
00:02:56,780 --> 00:02:57,760
saga redux.

36
00:02:57,950 --> 00:03:03,470
A jeli masz kod synchroniczny, to moesz go od razu uruchomi od pocztku do

37
00:03:03,470 --> 00:03:06,860
koca, poka ci, jak oba dziaaj w tym module.

38
00:03:06,860 --> 00:03:11,600
Mamy wic tutaj t funkcj generatora, teraz w wylogowaniu oczywicie

39
00:03:11,600 --> 00:03:17,870
chc zrobi to samo, co robi z moim twrc akcji wylogowania, wic skopiuj tutaj

40
00:03:17,870 --> 00:03:23,900
trzy lokalne wywoania pamici i wklej je do mojego generatora saga wylogowania tutaj.

41
00:03:23,900 --> 00:03:26,780
Teraz ju widzisz, e moje IDE tego

42
00:03:26,860 --> 00:03:33,710
nie lubi, mwi, e ten generator nie ma funkcji wydajnoci ani wydajnoci, adnego sowa kluczowego yield, teraz zajmiemy

43
00:03:33,770 --> 00:03:36,800
si tym, a ja wyjani, jaki jest zysk.

44
00:03:36,800 --> 00:03:39,460
Na razie wyczyszczamy tutaj lokaln pami, teraz

45
00:03:39,710 --> 00:03:48,260
z lokaln pamici usuwajc elementy tutaj, moemy rzuci okiem na auth. js action creator i widzimy, e na

46
00:03:48,260 --> 00:03:54,410
kocu zwrcilimy ten obiekt akcji, ktry w zasadzie doprowadziby do

47
00:03:54,410 --> 00:03:55,860
wysania tego.

48
00:03:56,210 --> 00:04:03,620
Chcemy zrobi to samo tutaj iw sadze, faktycznie robimy to ze specjaln funkcj, ktr otrzymujemy

49
00:04:03,620 --> 00:04:05,870
z pakietu, ktry wanie zainstalowalimy,

50
00:04:06,170 --> 00:04:16,610
wic zaimportuj co z sagi redux i faktycznie z podpakietu efektw. Tam chc zaimportowa funkcj put, a teraz w

51
00:04:16,620 --> 00:04:24,960
kocu po prostu wyeksportuj now akcj, wic wykonamy tu i teraz po

52
00:04:25,480 --> 00:04:32,370
prostu skopiuj t sam definicj akcji, ktr uyem w kreatorze

53
00:04:32,370 --> 00:04:36,220
akcji, z typami akcji wylogowania, wic

54
00:04:36,220 --> 00:04:40,830
podam t akcj. Oczywicie, aby to zadziaao,

55
00:04:40,840 --> 00:04:49,320
musz rwnie zaimportowa mj typ akcji, wic zaimportuj wszystko jako dziaania z takich dziaa.

56
00:04:49,330 --> 00:04:57,780
Tak jak zrobilimy to w auth. js plik i tam z pliku typw akcji.

57
00:04:58,020 --> 00:05:04,170
Tak wic teraz to robimy i nadal mam wszystkie te bdy, poniewa nie

58
00:05:04,170 --> 00:05:06,580
jest to normalna funkcja, ale

59
00:05:06,690 --> 00:05:09,150
generator, a w generatorze powinnimy

60
00:05:09,360 --> 00:05:17,060
poprzedza, przed kadym krokiem, ktry wykonujemy, sowem kluczowym yield. Oznacza to po prostu, e ten krok powinien zosta

61
00:05:17,060 --> 00:05:19,380
wykonany, a nastpnie bdzie oczekiwa na

62
00:05:19,380 --> 00:05:25,030
zakoczenie, wic jeli jest to dziaanie asynchroniczne, nie bdzie kontynuowany przed wykonaniem kroku, tak

63
00:05:25,110 --> 00:05:26,180
samo tutaj.

64
00:05:26,400 --> 00:05:34,200
W zwizku z tym wszystkie powysze kroki zostawiamy tutaj i teraz wykonamy ten krok, ten krok, ten

65
00:05:34,200 --> 00:05:36,590
krok, a nastpnie w kocu

66
00:05:36,600 --> 00:05:41,750
wywoamy put, ktry w kocu za kulisami po prostu wyle t akcj.

67
00:05:41,910 --> 00:05:47,950
To jest saga redux i wyglda na bardziej skomplikowany sposb stworzenia twrcy akcji, prawda?

68
00:05:48,000 --> 00:05:54,660
C, chodzi o to, aby mie oddzielny obszar w aplikacji, w ktrym si tym zajmujesz, mamy

69
00:05:54,660 --> 00:06:01,860
nasz generator wylogowania i teraz potrzebujemy tylko podczy go do naszego sklepu, aby mc z niego korzysta.

70
00:06:01,860 --> 00:06:04,960
Zobaczmy teraz, jak to dziaa w nastpnym wykadzie.

