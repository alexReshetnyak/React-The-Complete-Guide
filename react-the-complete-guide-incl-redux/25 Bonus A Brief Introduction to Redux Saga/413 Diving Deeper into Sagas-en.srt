1
00:00:02,140 --> 00:00:05,570
So over the last lectures we learned a lot about redux saga,

2
00:00:05,570 --> 00:00:06,980
there's always more you can learn

3
00:00:07,010 --> 00:00:10,360
but here are a couple of nice things I want to share with you.

4
00:00:10,430 --> 00:00:12,690
Let's start the auth.js file,

5
00:00:12,890 --> 00:00:19,010
here we for example access local storage and I used yield here even though technically, this is a synchronous

6
00:00:19,010 --> 00:00:21,220
code we don't need to wait for it.

7
00:00:21,500 --> 00:00:30,170
Now one thing you can do here is you can use another helper method or function redux saga

8
00:00:30,170 --> 00:00:31,630
provides you with,

9
00:00:31,750 --> 00:00:38,540
you can import it from redux saga effects and it's called call. Call is a function which allows you to

10
00:00:38,540 --> 00:00:49,640
call some function on some object, so you could rewrite this line here where we remove the item by executing

11
00:00:50,670 --> 00:00:51,660
yield

12
00:00:51,850 --> 00:01:01,260
call and then as a first argument, pass an array where the first element is local storage

13
00:01:01,260 --> 00:01:07,620
but now don't call remove item but instead as a second element, pass that function you want to execute

14
00:01:07,650 --> 00:01:08,460
on it.

15
00:01:08,460 --> 00:01:13,120
So remove item, written exactly as it is down here,

16
00:01:13,170 --> 00:01:19,890
now you can pass a second argument to the call function and these can be arguments you would pass

17
00:01:19,890 --> 00:01:20,980
to remove item,

18
00:01:21,060 --> 00:01:24,030
so in this case, the token.

19
00:01:24,210 --> 00:01:27,700
Now you might wonder what the advantage of this is

20
00:01:27,720 --> 00:01:30,650
after all, it's longer than before, right?

21
00:01:31,230 --> 00:01:38,280
Well this actually makes your generators testable because you can easily mock this and not really execute this

22
00:01:38,460 --> 00:01:46,560
code whilst you always need to execute it down there. So you can use call here all over the place to

23
00:01:46,560 --> 00:01:55,780
also remove expiration date and user ID, that allows you to get rid of that.

24
00:01:55,820 --> 00:02:04,400
So now we get the same effect as before but with the call function and you can use call wherever you

25
00:02:04,400 --> 00:02:11,220
use some object and call something including axios of course or these local storage calls.

26
00:02:11,270 --> 00:02:17,510
So I'm not replacing it everywhere but you can do it and if you want to test generators, you should do

27
00:02:17,510 --> 00:02:18,180
it.

28
00:02:18,320 --> 00:02:22,190
Now let me prove you that it still works by saving this

29
00:02:22,190 --> 00:02:24,710
and now let's go back to the application and reload,

30
00:02:24,980 --> 00:02:33,290
let's click log out and inspect our application tab and you see everything was deleted from local storage

31
00:02:33,290 --> 00:02:34,000
still.

32
00:02:34,130 --> 00:02:37,100
So this works now with the call function,

33
00:02:38,130 --> 00:02:42,300
now there is one other thing you can do with it, in the index.js file,

34
00:02:42,300 --> 00:02:48,750
here we have all our yields to set up our various watchers or our various sagas we want to execute

35
00:02:48,750 --> 00:02:50,460
on different actions.

36
00:02:50,460 --> 00:02:55,070
Here we can import all, another nice function, in watchAuth,

37
00:02:55,080 --> 00:02:57,110
we can now yield

38
00:02:57,210 --> 00:03:08,010
all and there pass an array of all the actions we want to yield and there I will now copy all these functions

39
00:03:08,010 --> 00:03:11,760
here, however remove the real keyword in there,

40
00:03:14,810 --> 00:03:22,070
remove that Y and replaced the semi-colons with colons, with commas

41
00:03:23,550 --> 00:03:32,640
and now with that, if we save this and I reload my application, if we inspect the redux developer tools,

42
00:03:32,770 --> 00:03:35,070
it'll still work as before

43
00:03:35,080 --> 00:03:40,550
so all our watch related, auth related watchers are still working

44
00:03:40,840 --> 00:03:46,840
but with all, they are actually run concurrently. Now here, this doesn't matter at all because when we

45
00:03:46,840 --> 00:03:52,750
yielded them off each other, it didn't pause anyways because it were synchronous tasks.

46
00:03:52,960 --> 00:03:56,080
But you cannot only use that here when setting up the watchers,

47
00:03:56,080 --> 00:03:57,410
you can use it anywhere,

48
00:03:57,430 --> 00:04:04,570
for example if you have these three calls here, you could execute them simultaneously with the all by wrapping

49
00:04:04,570 --> 00:04:05,230
it.

50
00:04:05,260 --> 00:04:07,240
However these also are synchronous

51
00:04:07,240 --> 00:04:12,460
but if you have for example two axios requests and you want to run them simultaneously, you can use

52
00:04:12,520 --> 00:04:14,570
all to do just that.

53
00:04:14,620 --> 00:04:21,130
So all is another nice option if you want to run multiple generators or multiple tasks, don't have to

54
00:04:21,130 --> 00:04:25,190
be generators, multiple tasks simultaneously.

55
00:04:25,240 --> 00:04:27,840
Again you could use it for the other watchers too,

56
00:04:27,940 --> 00:04:30,090
it's not really required here though.

57
00:04:30,130 --> 00:04:39,250
One other thing I want to show, we always use takeEvery which can really be translated as this take every

58
00:04:39,550 --> 00:04:43,840
action of this type and execute this saga.

59
00:04:43,840 --> 00:04:49,780
Now in our application, this behavior is all right but what if you actually just wanted to have one

60
00:04:49,780 --> 00:04:51,970
of this saga run at any time?

61
00:04:51,970 --> 00:04:59,500
So for example if the user hammers the purchase burger button, we maybe only always want to use the

62
00:04:59,500 --> 00:05:01,790
latest click,

63
00:05:01,840 --> 00:05:05,720
that is why besides takeEvery,

64
00:05:05,900 --> 00:05:09,460
we can also use takeLatest

65
00:05:09,660 --> 00:05:20,550
and if we use that here on purchase burger, takeLatest will automatically cancel any ongoing executions

66
00:05:20,550 --> 00:05:25,680
of purchaseBurgerSaga and always only execute the latest one.

67
00:05:25,680 --> 00:05:31,920
So that's another nice addition which you might need from time to time to make sure that only one of these

68
00:05:31,920 --> 00:05:38,910
processes here is going on at a time. With takeEvery, it will execute fetchOrdersSaga

69
00:05:38,910 --> 00:05:47,100
whenever this action type is detected, with takeLatest, it won't and there is more. Here I'm on the official

70
00:05:47,100 --> 00:05:49,550
page redux-saga.js.org

71
00:05:49,570 --> 00:05:51,290
.

72
00:05:51,600 --> 00:05:56,420
and there you can also find an API reference with all the functions it exposes.

73
00:05:56,520 --> 00:06:00,770
Now this looks like a lot but you probably don't ever need most of them,

74
00:06:01,140 --> 00:06:07,710
you can also dive into some advanced concepts on this documentation here or go through the basics again

75
00:06:07,710 --> 00:06:12,840
in case something is unclear after going through this module. In its core,

76
00:06:12,840 --> 00:06:19,020
the whole idea behind redux saga really is to make sure your action creators are lean, that you don't

77
00:06:19,020 --> 00:06:25,170
run any side effects in there but that you instead handle these side effects in your sagas, that you

78
00:06:25,170 --> 00:06:31,310
have one place where you have all the side effects and one place where you have all the actions and

79
00:06:31,310 --> 00:06:33,040
that you don't mix that.

80
00:06:33,120 --> 00:06:36,070
That's the idea, as I just mentioned,

81
00:06:36,150 --> 00:06:41,570
feel free to dive deeper here in the official documentation and play around with it.

82
00:06:41,580 --> 00:06:47,790
I hope that our little refactoring of the course project help you dive into redux saga and that it's

83
00:06:47,790 --> 00:06:53,840
much clearer what you can use it for and that you definitely can consider it for your next project.

