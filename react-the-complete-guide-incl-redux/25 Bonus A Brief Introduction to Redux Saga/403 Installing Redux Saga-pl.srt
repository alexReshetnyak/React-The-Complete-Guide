1
00:00:02,160 --> 00:00:09,220
Wic wrciem do naszego ukoczonego projektu, zasadniczo w takim samym stanie, w jakim kiedy go wdroylimy

2
00:00:09,690 --> 00:00:14,170
i tam, oczywicie jeli uruchamiamy nasz aplikacj, wyglda to tak.

3
00:00:14,220 --> 00:00:16,080
Mamy naszego budowniczego burgerw,

4
00:00:16,080 --> 00:00:19,320
moemy uwierzytelni poprzez firebase, po prostu wpisujc

5
00:00:19,500 --> 00:00:25,560
nasze referencje, logujc si, a nastpnie moemy zacz budowa burgera tak, jak zawsze

6
00:00:25,560 --> 00:00:27,420
robilimy to podczas tego

7
00:00:27,420 --> 00:00:29,710
kursu, wic nic spektakularnego tutaj.

8
00:00:29,850 --> 00:00:33,540
Jeli spojrzymy na kod, ktry powinien by

9
00:00:33,750 --> 00:00:41,170
nam znany, obsugujemy wszystkie te asynchroniczne zadania lub faktycznie wszelkie efekty uboczne, nawet synchroniczne, wic

10
00:00:41,280 --> 00:00:48,660
rzeczy, ktre nie s bezporednio zwizane ze zmian naszego sklepu redux, obsugujemy wszystkie te rzeczy

11
00:00:48,660 --> 00:00:49,920
w twrcy akcji.

12
00:00:49,920 --> 00:00:55,480
A wic jestem w pliku auth actions, w ktrym mam wszystkich twrcw akcji zwizanych z

13
00:00:55,560 --> 00:00:57,620
auth, mamy tu kilka synchronicznych,

14
00:00:57,810 --> 00:01:03,860
ale mamy te takie rzeczy jak dostp do lokalnego sklepu i powinnimy si wylogowa, co jest

15
00:01:03,870 --> 00:01:07,300
akcj synchroniczn, ktr ci dam. to, ale mona si

16
00:01:07,440 --> 00:01:13,410
spiera i znowu, to niekoniecznie najlepsza praktyka, ale mona by twierdzi, e nie jest to tak

17
00:01:13,410 --> 00:01:15,900
naprawd zwizane z aktem wysyki akcji, wic

18
00:01:15,960 --> 00:01:22,890
moe nie chcesz tego mie w tym pliku. Mamy te akcje asynchroniczne, takie jak limit czasu czekania, w ktrym

19
00:01:22,890 --> 00:01:30,120
ustawilimy limit czasu i gdzie wysyamy wylogowanie po pewnym czasie wyganicia. I wycigamy rk do sieci, wysyamy

20
00:01:30,120 --> 00:01:31,320
proby poczt

21
00:01:31,320 --> 00:01:35,630
i oczywicie musimy czeka, a si skocz.

22
00:01:36,030 --> 00:01:40,230
A wic to wszystko, co mamy w twrcach akcji

23
00:01:40,500 --> 00:01:43,850
i jak ju mwiem wielokrotnie, niekoniecznie jest

24
00:01:44,070 --> 00:01:51,840
to ze, ale mona by argumentowa, e twrcy akcji lub caa idea wysyania dziaa s bardzo

25
00:01:52,260 --> 00:02:00,480
czyste, e nie Chc mie tam jakikolwiek inny kod, ktry nie jest tak naprawd zwizany z wysyk

26
00:02:00,480 --> 00:02:04,020
akcji, a tu pojawia si saga redux.

27
00:02:04,260 --> 00:02:08,600
Najpierw zainstalujmy to, ebymy mogli zobaczy, jak to

28
00:02:08,850 --> 00:02:15,180
dziaa, wic uruchomi npm install - zapisz i e to jest sx-redux,

29
00:02:15,180 --> 00:02:18,910
to jest nazwa pakietu, a to jak

30
00:02:19,020 --> 00:02:26,550
zawsze pobierz, umie wpis w paczce . json, a nastpnie daj nam dostp do niego w

31
00:02:26,550 --> 00:02:30,300
tym projekcie i zrestartuj serwer programistyczny, uruchamiajc ponownie npm.

32
00:02:30,300 --> 00:02:35,900
Teraz moemy rozpocz prac nad projektem i moemy zacz uywa sagi redux,

33
00:02:36,030 --> 00:02:38,420
zrbmy to w nastpnym wideo.

