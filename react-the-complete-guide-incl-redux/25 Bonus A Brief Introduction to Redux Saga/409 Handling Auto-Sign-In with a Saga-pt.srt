1
00:00:02,190 --> 00:00:07,830
De volta ao auth. arquivo js na pasta actions, ns j terceirizamos

2
00:00:07,830 --> 00:00:14,430
bastante lgica na pasta saga, na saga como ns criamos e, portanto, ns temos um arquivo de criador de

3
00:00:14,850 --> 00:00:17,440
ao muito enxuto aqui, onde eu no preciso

4
00:00:17,460 --> 00:00:23,670
mais importar axios, ns podemos remova essa importao e agora s temos criadores de ao que retornam aes,

5
00:00:23,670 --> 00:00:24,110
que

6
00:00:24,150 --> 00:00:27,490
realmente fazem exatamente isso, eles criam aes, com uma exceo.

7
00:00:27,690 --> 00:00:35,370
Na parte inferior deste arquivo, ns temos o criador de ao authCheckState que ns executamos no momento em que

8
00:00:35,370 --> 00:00:40,600
nosso aplicativo comea a ver se podemos logar o usurio automaticamente, isso tambm

9
00:00:40,950 --> 00:00:43,480
deve entrar em uma saga por

10
00:00:43,710 --> 00:00:52,110
ltimo mas no menos importante, vamos adicionar o saga aqui tambm. Vou dar o nome assim como nomeamos o criador de ao authCheckStateSaga

11
00:00:52,110 --> 00:00:54,190
aqui, ento eu o nomeei authCheckStateSaga,

12
00:00:55,200 --> 00:00:57,920
esse  o nome, recebo minha ao aqui

13
00:00:58,020 --> 00:01:07,130
como argumento e novamente vou copiar todo o cdigo da minha autenticao. js.

14
00:01:07,380 --> 00:01:11,260
arquivo na pasta de aes e substitu-lo passo a passo.

15
00:01:11,670 --> 00:01:13,320
Ento, o que fazemos aqui?

16
00:01:13,530 --> 00:01:16,390
Recebemos o token do armazenamento local, adicionarei

17
00:01:16,440 --> 00:01:22,230
rendimento aqui tambm, como fao para todas as etapas que executo nas minhas sagas.

18
00:01:22,380 --> 00:01:28,380
Ento agora ns pegamos o token que  uma tarefa sncrona aqui, ento eu verifico se o token realmente existe

19
00:01:28,380 --> 00:01:29,880
e se ele no existir,

20
00:01:30,210 --> 00:01:38,810
 claro que eu ainda quero enviar o logout aqui, eu vou colocar aes. logout para basicamente despachar isso e eu adicionarei

21
00:01:38,810 --> 00:01:42,610
rendimento aqui tambm. Agora, a prxima coisa

22
00:01:42,630 --> 00:01:50,460
que fazemos  se tivermos um token vlido, ns verificamos a data de expirao, calculamos,

23
00:01:50,460 --> 00:01:57,150
tambm cedemos e, se isso for bem anterior  data atual, eu tambm

24
00:01:57,300 --> 00:02:03,050
quero dar logout porque temos uma data de expirao invlida.

25
00:02:03,180 --> 00:02:11,280
Seno eu vou pegar um ID de usurio do armazenamento local e tambm produzir isso e ento

26
00:02:11,280 --> 00:02:14,780
fomos bem sucedidos, ento aqui eu vou

27
00:02:14,790 --> 00:02:16,070
render colocar authSuccess

28
00:02:16,080 --> 00:02:23,010
e passar token e user ID, porm aqui tanto l como o authSuccess deve

29
00:02:23,010 --> 00:02:27,530
ser acessado no objeto actions ns import para usar

30
00:02:27,540 --> 00:02:30,310
esses criadores de ao e eu

31
00:02:30,340 --> 00:02:38,290
tambm quero dar checkUuthTiemout de aes de put referindo-se a este criador de ao que, bem,

32
00:02:38,290 --> 00:02:43,330
retorna essa ao authCheckoutTimeout que por sua vez acionar outra saga.

33
00:02:43,330 --> 00:02:52,790
Isso  tudo, so todas as mudanas que precisamos, essa  a minha authCheckStateSaga.

34
00:02:53,060 --> 00:03:00,240
Agora, queremos ligar e garantir que isso seja executado no momento em que iniciarmos o

35
00:03:00,350 --> 00:03:07,210
aplicativo, para isso, vou para a autenticao. js action creator file e retornar todo o cdigo nessa

36
00:03:07,210 --> 00:03:09,180
funo, no preciso mais dele.

37
00:03:09,620 --> 00:03:16,460
Em vez disso, eu simplesmente quero retornar meu objeto de ao e vou criar um novo

38
00:03:16,460 --> 00:03:25,900
tipo de ao para isso, vou nome-lo AUTH_CHECK_INITIAL_STATE por exemplo, o nome do curso  totalmente com voc, use isso aqui tambm

39
00:03:26,900 --> 00:03:29,390
ou talvez no, vamos apenas nomeie-o

40
00:03:29,510 --> 00:03:36,410
como AUTH_CHECK_STATE para estar mais alinhado com o nome do nosso criador de ao, ento AUTH_CHECK_STATE

41
00:03:37,580 --> 00:03:38,780
e, em seguida,

42
00:03:38,880 --> 00:03:47,520
l em baixo, retornarei minha ao do tipo actionTypes. AUTH_CHECK_STATE e eu no preciso passar nenhum argumento ou

43
00:03:47,520 --> 00:03:49,800
algo com essa ao, isso

44
00:03:49,830 --> 00:03:57,410
agora deve acionar meu authCheckStateSaga aqui e para permitir que isso acontea, eu preciso configurar

45
00:03:57,600 --> 00:04:02,020
um ouvinte no ndice. js arquivo,

46
00:04:02,040 --> 00:04:14,120
l eu vou render eachAvery para actionTypes. AUTH_CHECK_STATE e importe o meu authCheckStateSaga recm-criado, que ser executado

47
00:04:14,120 --> 00:04:15,530
assim que

48
00:04:15,590 --> 00:04:22,340
esse tipo de ao for detectado. Vamos salvar todos os arquivos que mudamos,

49
00:04:22,410 --> 00:04:30,760
vamos voltar e recarregar o aplicativo, vemos o authSuccess para que ele nos logue automaticamente com sucesso.

50
00:04:30,980 --> 00:04:33,390
Vamos agora sair e recarregar novamente

51
00:04:33,890 --> 00:04:41,630
e agora voc v ainda inicia a chamada de estado de verificao aqui, mas inicia o logout porque no encontra

52
00:04:41,630 --> 00:04:44,150
um token vlido e assim por diante.

53
00:04:44,180 --> 00:04:52,790
Ento, agora substitumos todos os efeitos colaterais que manipulamos na autenticao. js criador de ao com cdigo em nosso arquivo saga, as sagas que

54
00:04:52,790 --> 00:04:54,680
executei devido aos nossos ouvintes, nossos

55
00:04:54,880 --> 00:05:02,480
observadores aqui que por sua vez so executados aqui no ndice. arquivo js onde o corremos

56
00:05:02,480 --> 00:05:06,130
em nosso middleware saga.

57
00:05:06,440 --> 00:05:12,990
E com isso, fizemos o redux-thunk totalmente redundante para a parte auth de nosso aplicativo, agora

58
00:05:13,040 --> 00:05:20,210
para podermos remov-lo totalmente,  claro que tambm precisamos torn-lo redundante para a parte de construtor de hambrguer

59
00:05:20,210 --> 00:05:23,440
e a parte de pedido e isso j

60
00:05:23,660 --> 00:05:26,250
seja uma tima prtica para voc.

61
00:05:26,270 --> 00:05:27,450
Ento, se voc

62
00:05:27,530 --> 00:05:29,490
quiser, tente isso sozinho.

63
00:05:29,510 --> 00:05:31,420
Tente adicionar mais sagas, talvez em

64
00:05:31,490 --> 00:05:33,040
novos arquivos, configurar observadores e

65
00:05:33,170 --> 00:05:40,390
substituir o cdigo que voc tem no burgerBuilder. js na pasta de aes e em ordem. js na pasta actions com o

66
00:05:40,400 --> 00:05:48,290
cdigo saga para terceirizar todos os seus efeitos colaterais em sagas. Faremos isso juntos, comeando com

67
00:05:48,290 --> 00:05:50,660
o prximo vdeo.

