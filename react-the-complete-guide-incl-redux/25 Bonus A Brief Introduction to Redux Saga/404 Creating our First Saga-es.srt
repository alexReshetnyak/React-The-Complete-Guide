1
00:00:02,180 --> 00:00:05,520
As que habl mucho sobre cmo podemos usar la saga redux, ahora

2
00:00:05,720 --> 00:00:11,540
vamos a usarla para tener una idea de cmo funciona realmente. Con la saga redux, creas las

3
00:00:11,570 --> 00:00:21,050
llamadas sagas, que son esencialmente un tipo de funciones que ejecutas en ciertas acciones y que manejan toda tu

4
00:00:21,130 --> 00:00:28,460
lgica de efectos secundarios y un efecto secundario simplemente es algo como acceder al almacenamiento

5
00:00:28,460 --> 00:00:36,280
local, llegar a un servidor, quizs cambiando la ruta o ejecutando un temporizador como este aqu.

6
00:00:36,290 --> 00:00:41,930
Estos son todos los efectos secundarios porque no manipulan directamente su tienda redux, pueden hacer

7
00:00:41,930 --> 00:00:47,330
algo que los lleve a un estado diferente que al final se almacena en su

8
00:00:47,660 --> 00:00:51,450
tienda redux pero no son consumidos directamente por el reductor.

9
00:00:51,890 --> 00:00:56,700
Entonces, para eso, crear una nueva subcarpeta en la carpeta de la tienda y la nombrar sagas, el

10
00:00:56,870 --> 00:00:59,970
nombre depende de ti, pero esto es algo que vers bastante.

11
00:01:00,170 --> 00:01:05,290
Ahora en sagas, crear diferentes archivos para los diferentes tipos de sagas y

12
00:01:05,300 --> 00:01:08,800
por qu no empezamos con la saga auth aqu.

13
00:01:08,990 --> 00:01:18,170
As que crear un nuevo archivo, auth. js en la carpeta sagas, ahora aqu, quiero crear mis sagas

14
00:01:18,260 --> 00:01:22,100
redux, la pregunta es cmo creamos tal saga, qu

15
00:01:22,100 --> 00:01:25,010
es en realidad? En esencia, es una

16
00:01:25,040 --> 00:01:31,280
especie de funcin y estoy diciendo algo as porque hay un pequeo giro que te

17
00:01:31,280 --> 00:01:32,280
mostrar pronto.

18
00:01:32,660 --> 00:01:35,900
Entonces, primero crearemos una funcin aqu, usar la

19
00:01:36,100 --> 00:01:39,490
palabra clave function y la nombrar, digamos que

20
00:01:39,530 --> 00:01:46,820
queremos reemplazar la saga por cerrar sesin, donde la borramos en el almacenamiento local, por lo que no

21
00:01:46,850 --> 00:01:52,580
hay cdigo asncrono en all, solo algunos efectos colaterales que ocurren sincrnicamente en realidad.

22
00:01:52,730 --> 00:01:54,550
As que nombrar la funcin

23
00:01:54,710 --> 00:01:55,880
aqu cerrar sesin,

24
00:01:55,880 --> 00:02:01,880
ahora en esta funcin, puedo aceptar un argumento que volver a obtener automticamente, por supuesto

25
00:02:01,880 --> 00:02:04,370
te mostrar cmo conectar tales sagas,

26
00:02:04,370 --> 00:02:07,020
el argumento sera la accin para que

27
00:02:07,070 --> 00:02:12,820
la accin que fue enviado porque las sagas estn relacionadas con acciones, volver a esto.

28
00:02:12,860 --> 00:02:18,660
Ahora dije que esto no sera una funcin, dije que tipo de funcin, agreguemos una

29
00:02:19,070 --> 00:02:25,350
estrella despus de la palabra clave de funcin y esta estrella aqu es importante, no es

30
00:02:25,580 --> 00:02:28,820
parte del nombre de la funcin, en realidad

31
00:02:28,820 --> 00:02:34,480
est convirtiendo esta funcin en una llamada generador. Los generadores son funciones javascript de prxima

32
00:02:34,480 --> 00:02:42,830
generacin que son funciones que se pueden ejecutar de forma incremental, as que puedes llamarlas y no se ejecutan de

33
00:02:42,830 --> 00:02:49,490
principio a fin de inmediato, pero puedes pausar durante la ejecucin de la funcin, por ejemplo,

34
00:02:49,490 --> 00:02:56,780
esperar a que el cdigo asncrono termine y eso es exactamente de lo que se beneficia la

35
00:02:56,780 --> 00:02:57,760
saga redux.

36
00:02:57,950 --> 00:03:03,470
Y si tiene un cdigo sincrnico, entonces puede ejecutarlo de principio a fin de

37
00:03:03,470 --> 00:03:06,860
inmediato, le mostrar cmo funcionan ambos en este mdulo.

38
00:03:06,860 --> 00:03:11,600
As que tenemos aqu la funcin de generador, ahora en logout Obviamente quiero hacer

39
00:03:11,600 --> 00:03:17,870
lo mismo que hago con mi creador de acciones de cierre de sesin, as que copiar aqu las

40
00:03:17,870 --> 00:03:23,900
tres llamadas de almacenamiento local y las pegar en mi generador de sacas de cierre de sesin aqu.

41
00:03:23,900 --> 00:03:26,780
Ahora que ya ves que a mi IDE no

42
00:03:26,860 --> 00:03:33,710
le gusta esto, est diciendo que este generador no tiene una funcin de rendimiento o un rendimiento, cualquier palabra clave de rendimiento,

43
00:03:33,770 --> 00:03:36,800
ahora nos ocuparemos de esto y explicar qu rendimiento tiene.

44
00:03:36,800 --> 00:03:39,460
Por ahora estamos limpiando el almacenamiento local aqu, ahora

45
00:03:39,710 --> 00:03:48,260
con el almacenamiento local eliminando elementos aqu, podemos echarle un vistazo a la autenticacin. js creador de acciones y vemos que al

46
00:03:48,260 --> 00:03:54,410
final, devolvimos este objeto de accin que esencialmente llevara a que

47
00:03:54,410 --> 00:03:55,860
este sea enviado.

48
00:03:56,210 --> 00:04:03,620
As que queremos hacer lo mismo aqu y en una saga, en realidad hacemos esto con una funcin especial que obtenemos

49
00:04:03,620 --> 00:04:05,870
del paquete que acabamos de instalar,

50
00:04:06,170 --> 00:04:16,610
as que importar algo de la saga redux y de hecho, del subpaquete de efectos. Ah, quiero importar la funcin put, ahora al final

51
00:04:16,620 --> 00:04:24,960
solo despachar una nueva accin, as que ejecutaremos put aqu y ahora simplemente copiar

52
00:04:25,480 --> 00:04:32,370
la misma definicin de accin que us en el creador de acciones,

53
00:04:32,370 --> 00:04:36,220
con tipos de acciones de logout, entonces

54
00:04:36,220 --> 00:04:40,830
ah pondr esta accin. Por supuesto, para que esto

55
00:04:40,840 --> 00:04:49,320
funcione, tambin necesito importar mi tipo de accin, as que importar todo como tipos de accin de acciones como esta.

56
00:04:49,330 --> 00:04:57,780
As como lo hicimos en la autenticacin. js y all desde el archivo de tipos de accin.

57
00:04:58,020 --> 00:05:04,170
As que ahora estamos poniendo esto y aun as obtuve todos estos errores porque esta no

58
00:05:04,170 --> 00:05:06,580
es una funcin normal sino un

59
00:05:06,690 --> 00:05:09,150
generador, y en un generador, debemos

60
00:05:09,360 --> 00:05:17,060
prefijar, anteponer cada paso que ejecutamos con la palabra clave yield. Esto simplemente significa que se debe ejecutar este paso y

61
00:05:17,060 --> 00:05:19,380
luego esperar a que termine, por

62
00:05:19,380 --> 00:05:25,030
lo que si fuera una accin asncrona, no continuara antes de que se realice el

63
00:05:25,110 --> 00:05:26,180
paso, lo mismo aqu.

64
00:05:26,400 --> 00:05:34,200
As que cedemos todos estos pasos aqu y ahora ejecutaremos este paso, este paso, este paso

65
00:05:34,200 --> 00:05:36,590
y finalmente call pond, que

66
00:05:36,600 --> 00:05:41,750
al final detrs de las escenas simplemente enviar esta accin.

67
00:05:41,910 --> 00:05:47,950
Ahora, esta es una saga redux y parece una forma ms complicada de crear un creador de accin, verdad?

68
00:05:48,000 --> 00:05:54,660
Bueno, la idea es tener tu rea separada en la aplicacin donde lidias con eso, tenemos

69
00:05:54,660 --> 00:06:01,860
nuestro generador de cierre de sesin y ahora solo tenemos que conectarlo a nuestra tienda para poder usarlo.

70
00:06:01,860 --> 00:06:04,960
Ahora veamos cmo funciona eso en la prxima conferencia.

