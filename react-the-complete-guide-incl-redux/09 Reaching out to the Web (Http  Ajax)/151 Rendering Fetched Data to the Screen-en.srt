1
00:00:01,990 --> 00:00:05,440
In the last lecture we added the code to get some data,

2
00:00:05,590 --> 00:00:11,950
of course that is a huge first step but it would be even more useful if we could write that data to

3
00:00:11,950 --> 00:00:18,940
the screen, if it could render it to the screen and replace this array of dummy posts here with a dynamically

4
00:00:18,940 --> 00:00:26,380
generated array based on the posts we fetched. For this, we need to manage some state of course and we

5
00:00:26,380 --> 00:00:29,340
should have some posts in that state,

6
00:00:29,470 --> 00:00:32,290
initially this can be an empty array.

7
00:00:32,320 --> 00:00:38,530
Now I want to update this state once we fetch data from the server and therefore the place to call this

8
00:00:38,620 --> 00:00:42,140
set state is inside the then method.

9
00:00:42,460 --> 00:00:50,200
If we would call it outside of this, so after this axios get method, we wouldn't have the post yet because

10
00:00:50,200 --> 00:00:51,860
of the thing I mentioned earlier.

11
00:00:52,090 --> 00:00:58,900
The code javascript doesn't wait for this to finish so if you're immediately calling this set state after the

12
00:00:58,900 --> 00:01:02,020
get method, the data won't have been fetched yet.

13
00:01:02,440 --> 00:01:10,550
So inside the then blog is the right place and there we can set posts to response data,

14
00:01:10,600 --> 00:01:16,510
you just saw in the console that the data property is available on that response object and that the

15
00:01:16,510 --> 00:01:24,460
data property holds an array of posts. So I'll comment out the response logging and instead set my state

16
00:01:24,490 --> 00:01:26,170
to the posts.

17
00:01:26,170 --> 00:01:30,380
Now let's output posts dynamically in the render method, for that

18
00:01:30,400 --> 00:01:38,260
I'll create a new constant here, posts, and that should be an array of jsx elements. So I will use this.

19
00:01:38,350 --> 00:01:40,180
state.posts, the state,

20
00:01:40,180 --> 00:01:46,720
we just updated it with the server data and there as you learned it, call the map method to map it

21
00:01:46,780 --> 00:01:52,570
into an array of jsx elements and the map method of course returns a new array which I store in

22
00:01:52,570 --> 00:01:54,790
the posts constant.

23
00:01:54,890 --> 00:01:56,830
Now in the map method here,

24
00:01:56,840 --> 00:02:03,560
I get my individual posts as an input in that function we're passing to the map method and there I want

25
00:02:03,560 --> 00:02:05,480
to return a jsx element.

26
00:02:05,480 --> 00:02:08,100
I want to return my single post here

27
00:02:09,030 --> 00:02:11,420
like this, down there

28
00:02:11,420 --> 00:02:18,060
I then of course want to output this array of posts which is stored in that posts constant.

29
00:02:18,060 --> 00:02:21,210
Now this post should of course at least output the title,

30
00:02:21,210 --> 00:02:25,260
if we inspect the post component, we see an output title here.

31
00:02:25,650 --> 00:02:27,210
So therefore here,

32
00:02:27,270 --> 00:02:32,180
I probably want to get some props, maybe a props with the name title.

33
00:02:32,180 --> 00:02:35,810
So it should pass this title property to the single post,

34
00:02:35,970 --> 00:02:43,680
so in the blog container, I need to set a title property here and pass post.title, the title

35
00:02:43,680 --> 00:02:50,130
property on this post element is available because of the data we fetched from the server just to reassure

36
00:02:50,130 --> 00:02:50,710
you,

37
00:02:51,060 --> 00:02:52,940
you already got spoiler that it worked.

38
00:02:53,190 --> 00:02:58,260
But the data that we get back from the service is this array and each element here has a title property.

39
00:02:58,710 --> 00:03:01,450
So as you can clearly see, it already works here.

40
00:03:01,650 --> 00:03:02,970
Styling is a bit off,

41
00:03:02,970 --> 00:03:08,580
we also output all the posts which might be too much and we haven't set the key prop,

42
00:03:08,640 --> 00:03:10,750
so let's fix these three things.

43
00:03:10,770 --> 00:03:12,280
Let's set the key prop

44
00:03:12,510 --> 00:03:16,450
and as you can verify by checking out the data we get back from the server,

45
00:03:16,560 --> 00:03:19,760
you'll see that there also is an id property on each post.

46
00:03:19,800 --> 00:03:23,750
That of course makes up for a perfect key because it's unique.

47
00:03:23,790 --> 00:03:30,120
Now regarding the styling and the amount of posts, for the styling, let's go to the post component and

48
00:03:30,120 --> 00:03:33,320
change the width to maybe 250px,

49
00:03:33,690 --> 00:03:37,020
now they have a little bit more room for the title.

50
00:03:37,020 --> 00:03:41,920
Still there are too many posts and that is something I'll take care about in the next lecture

51
00:03:42,000 --> 00:03:44,750
when I show you how to transform the data you get back.

