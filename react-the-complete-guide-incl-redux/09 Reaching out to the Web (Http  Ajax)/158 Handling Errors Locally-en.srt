1
00:00:02,250 --> 00:00:08,010
It's great that we now know how we can send requests and this is a super important part of most web

2
00:00:08,010 --> 00:00:09,820
applications of course.

3
00:00:10,030 --> 00:00:13,250
However, requests don't always succeed,

4
00:00:13,380 --> 00:00:17,020
you also need to know how you may handle errors

5
00:00:17,220 --> 00:00:22,790
and this is something I want to show you now. Handling errors is super simple with axios,

6
00:00:23,100 --> 00:00:28,500
let's say we've fetched the posts incorrectly and of course you can handle errors in the way I'm going

7
00:00:28,500 --> 00:00:28,970
to show you

8
00:00:28,970 --> 00:00:32,150
now for every type of request you send.

9
00:00:32,250 --> 00:00:38,400
So here in the blog container, let's say we sent the request to postsssss, that's an incorrect

10
00:00:38,400 --> 00:00:40,750
URL with that many s'es at the end.

11
00:00:41,190 --> 00:00:47,380
So what we can now see is that if we reload this, we get an error here but it's unhandled,

12
00:00:47,670 --> 00:00:49,500
we of course want to handle it.

13
00:00:49,710 --> 00:00:56,640
Now since axios uses promises, we don't only have the then method we can chain but we can also add a

14
00:00:56,640 --> 00:00:59,180
second method, simply chain it after

15
00:00:59,230 --> 00:01:06,030
then, the catch method, as the names suggests, this catches any errors you get.

16
00:01:06,060 --> 00:01:14,520
So here, let's for now simply console log that error.If I do that, the request of course still fails

17
00:01:14,550 --> 00:01:16,850
because the URL still is incorrect

18
00:01:16,890 --> 00:01:22,260
but now the error is handled and here I'm simply printing this with console log.

19
00:01:22,380 --> 00:01:24,940
Of course you can do more than logging this here,

20
00:01:24,960 --> 00:01:27,110
you can update your UI,

21
00:01:27,120 --> 00:01:33,600
you can update the state to show something went wrong, let me show this. Here we can set an error property,

22
00:01:33,780 --> 00:01:42,550
which is set to false initially and in that catch method here, I don't want to log the error, instead I'll

23
00:01:42,720 --> 00:01:46,550
set state and I'll set error to true.

24
00:01:47,130 --> 00:01:54,390
And now what we can do is we can render something different to the screen. Instead of storing the post

25
00:01:54,390 --> 00:02:02,740
in a constant, I'll create a new variable posts where I'll initially say something went wrong

26
00:02:03,930 --> 00:02:12,260
and let me quickly add some inline styling to center this, so I'll simply add text align center and I'll

27
00:02:12,260 --> 00:02:17,240
only overwrite these posts very little if error is not set.

28
00:02:17,250 --> 00:02:24,480
So if this.state.error, if this is not true indicated by the exclamation mark at the beginning. Then I

29
00:02:24,480 --> 00:02:29,170
will then overwrite posts to my array of posts.

30
00:02:29,250 --> 00:02:33,630
So now with that if we save this and center should be a string,

31
00:02:33,630 --> 00:02:34,400
thank you,

32
00:02:34,410 --> 00:02:41,950
if we save this now, we see something went wrong here because now we have this error.

33
00:02:41,950 --> 00:02:51,880
Now if I return to my application and fix posts here to the correct URL, we would see the posts again

34
00:02:51,910 --> 00:02:52,860
instead.

35
00:02:53,200 --> 00:02:58,570
So that is a pretty cool way of handling errors and that is something you definitely also need to be

36
00:02:58,570 --> 00:02:59,490
aware of.

37
00:02:59,680 --> 00:03:05,680
Things don't always succeed so you should have a way of catching errors and then doing something with

38
00:03:05,680 --> 00:03:12,280
them, logging them to the console, sending some error log requests to your own server to log the error

39
00:03:12,670 --> 00:03:19,810
and or show something on the UI to allow the user to still continue or to give instructions what the

40
00:03:19,810 --> 00:03:21,500
user should do instead.

