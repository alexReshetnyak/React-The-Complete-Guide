1
00:00:02,100 --> 00:00:07,220
In allegato a questa conferenza, qui troverai il progetto di partenza che puoi vedere qui.

2
00:00:07,250 --> 00:00:16,250
L'ho appena iniziato con NPM start utilizza il progetto Riak che ho creato e modificato per utilizzare i moduli CSSA invece di importare

3
00:00:16,250 --> 00:00:20,920
CSA come file in modo che influenzino il progetto a livello globale.

4
00:00:21,020 --> 00:00:23,360
Ma questo non rappresenta un problema qui.

5
00:00:23,630 --> 00:00:28,220
E ho preso un paio di contenitori o un container e un paio di componenti.

6
00:00:28,220 --> 00:00:33,530
Come puoi vedere sull'esempio del componente completo post qui che  responsabile per il rendering di questa

7
00:00:33,530 --> 00:00:40,160
parte qui ho anche componenti basati sulla classe qui come componenti perch ho intenzione di aggiungere alcuni stati locali e alcuni

8
00:00:40,160 --> 00:00:45,940
hook di ciclo di vita a questi componenti ed  per questo che ho impostato loro in questo modo

9
00:00:45,950 --> 00:00:52,100
Tuttavia, ho solo un componente che distribuir alcune propriet ai componenti di Obert.

10
00:00:52,130 --> 00:00:58,730
Questa  la pagina radice che si potrebbe dire che dovrebbe rendere alcuni post in alto poi un post completo con alcuni

11
00:00:58,730 --> 00:01:04,730
dettagli su un post su cui fare clic e l'area per la creazione di un nuovo post  possibile vedere

12
00:01:04,730 --> 00:01:06,790
tutte queste funzionalit qui in quella pagina.

13
00:01:06,800 --> 00:01:13,230
Ora ho alcuni contenuti fittizi qui perch voglio caricare i dati di questo post da un server.

14
00:01:13,370 --> 00:01:16,230
E per questo non useremo un vero server.

15
00:01:16,310 --> 00:01:22,930
Lo faremo per nel prossimo modulo quando applicheremo alcune funzionalit HTP al nostro progetto di corso.

16
00:01:23,180 --> 00:01:31,070
dati fittizi o per simulare la memorizzazione a volte dei dati l, anche se in realt non si memorizzer qualcosa.

17
00:01:31,220 --> 00:01:37,070
Ma qui user un segnaposto che puoi trovare in J un segnaposto tipo dot codice

18
00:01:37,070 --> 00:01:44,350
punto com che  semplicemente un back-end un backend API riposante che usi normalmente come ho spiegato nell'ultima lezione

19
00:01:44,390 --> 00:01:47,510
in cui puoi inviare richieste a recuperare qualche

20
00:01:47,510 --> 00:01:53,510
Ovviamente si tratta solo di simulare alcuni dati ma esattamente di ci di cui abbiamo bisogno per imparare come inviare l'et

21
00:01:53,510 --> 00:01:54,730
per ripetere le richieste.

22
00:01:54,770 --> 00:02:02,030
Ad esempio, puoi inviare una richiesta a Dad prima di una richiesta GET e otterrai una serie di

23
00:02:02,060 --> 00:02:04,220
oggetti javascript di post fittizi.

24
00:02:04,220 --> 00:02:06,730
E questo  in realt ci che voglio iniziare.

25
00:02:06,800 --> 00:02:10,010
Quindi inizieremo con quello nella prossima lezione.

26
00:02:10,040 --> 00:02:15,280
Ma ovviamente abbiamo bisogno di un modo per inviare richieste Ajax di DS.

27
00:02:15,470 --> 00:02:18,870
E qui hai fondamentalmente due opzioni.

28
00:02:19,250 --> 00:02:25,040
Javascript ovviamente ha l'oggetto Exham per l'oggetto request.

29
00:02:25,130 --> 00:02:32,010
Questo oggetto qui con questo  possibile costruire le proprie richieste Ajax e inviarle ad una specifica

30
00:02:32,050 --> 00:02:33,890
L e gestire la risposta.

31
00:02:33,890 --> 00:02:39,330
Non c' niente di sbagliato in Dead dal momento che il re-act riguarda solo la scrittura di javascript ovunque.

32
00:02:39,350 --> 00:02:46,640
Ovviamente puoi usare tutte le funzionalit di javascript tra cui Exham L. H. delle richieste con quell'oggetto sono piuttosto macchinose.

33
00:02:46,640 --> 00:02:50,400
La richiesta TDP, ma la scrittura e la configurazione manuale

34
00:02:50,630 --> 00:02:57,560
Quindi la seconda opzione  usare il pacchetto di una libreria di terze parti che lo rende pi facile.

35
00:02:57,710 --> 00:03:04,130
E per questo consiglio di usare X anni x anni come libreria javascript di terze parti che puoi

36
00:03:04,160 --> 00:03:06,170
aggiungere a qualsiasi progetto javascript.

37
00:03:06,170 --> 00:03:08,850
Non  collegato a reagire affatto.

38
00:03:08,990 --> 00:03:15,890
Ma ovviamente si adatta bene alla EC perch  ben javascript e DXi  la pagina qui su get have  un

39
00:03:15,980 --> 00:03:18,970
buon punto di partenza per saperne di pi sul pacchetto.

40
00:03:19,010 --> 00:03:23,300
Naturalmente ti guider per alcune delle sue funzionalit principali in questo modulo.

41
00:03:23,330 --> 00:03:29,720
Ma di nuovo questo non  qualcosa a cui mi connetto fortemente per reagire ex-U. S. pu essere utilizzato in qualsiasi codice javascript.

42
00:03:29,720 --> 00:03:36,710
Quindi installiamo X-ists in questa lezione e quindi iniziamo a usarlo nella prossima lezione per

43
00:03:36,710 --> 00:03:37,480
installare X.

44
00:03:37,470 --> 00:03:44,750
S, eseguir rapidamente il mio server di sviluppo con il controllo C e quindi eseguir l'installazione di NPM ex-U. S. dash dash salva in tutti

45
00:03:44,750 --> 00:03:48,640
gli store e inserisce il file adiacente al pacchetto.

46
00:03:48,650 --> 00:03:54,200
Questo scaricher e memorizzer il pacchetto e con esso possiamo iniziare a usarlo nella prossima

47
00:03:54,200 --> 00:04:01,580
lezione per recuperare alcuni post in modo da riavviare il server di sviluppo con NPM start e poi nella prossima lezione

48
00:04:01,940 --> 00:04:04,460
per scaricare alcuni post e inviarli l.

