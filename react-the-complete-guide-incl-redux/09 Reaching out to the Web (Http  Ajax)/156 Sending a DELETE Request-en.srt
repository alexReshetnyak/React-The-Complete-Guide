1
00:00:02,160 --> 00:00:05,730
Now that we learn how to post data in the last lecture,

2
00:00:05,730 --> 00:00:10,110
let me also show you how to send a delete request to really wrap this up.

3
00:00:10,230 --> 00:00:17,520
Now just like for posting data, deleting here will not really delete any data from the backend, it just

4
00:00:17,520 --> 00:00:22,240
mirrors back the data we send with our response we get basically.

5
00:00:22,320 --> 00:00:27,570
But still I can show you how you send it and you would use it on any other server in the same way.

6
00:00:27,570 --> 00:00:34,850
Of course this server needs to accept the delete HTTP word for a given URL. Now the delete button is

7
00:00:34,850 --> 00:00:36,650
in the full post component,

8
00:00:36,870 --> 00:00:41,560
so there let's simply hook this button up to a method which handles this,

9
00:00:41,580 --> 00:00:42,830
I'll implement this method here,

10
00:00:42,840 --> 00:00:51,090
the deletePostHandler maybe, doesn't require any input and let's hook this method up here to onClick,

11
00:00:51,450 --> 00:00:55,400
should execute this deletePostHandler method.

12
00:00:55,500 --> 00:00:57,960
We already import axios in here,

13
00:00:58,200 --> 00:01:05,860
so now let's simply use axios and there we can use to delete method to issue delete requests. The

14
00:01:06,080 --> 00:01:08,580
delete method, whoops here

15
00:01:08,600 --> 00:01:10,890
I need to add an equals sign.

16
00:01:10,940 --> 00:01:17,450
The Delete method also takes a URL and we need to target a specific post with it. So we can simply

17
00:01:17,450 --> 00:01:20,690
take the URL we used for fetching a single post,

18
00:01:20,690 --> 00:01:27,230
it's the same URL we need for deleting and we don't pass any extra data because that URL already

19
00:01:27,230 --> 00:01:28,820
contains all the data we need,

20
00:01:28,820 --> 00:01:36,870
it targets a specific resource which should be deleted. I'll then chain then because again this is asynchronous,

21
00:01:36,980 --> 00:01:45,560
we will get some response and then I can log the response here to see what happened on the server.

22
00:01:45,560 --> 00:01:46,460
Let's now see these,

23
00:01:46,460 --> 00:01:49,710
let's load a post and click delete.

24
00:01:50,660 --> 00:01:55,200
And you can see, we successfully get back a response,

25
00:01:55,250 --> 00:01:56,960
we don't get actual data here,

26
00:01:56,990 --> 00:02:00,140
that is just what the dummy backend returns to us here.

27
00:02:00,290 --> 00:02:03,780
But the status code 200 indicates that it was successful,

28
00:02:03,800 --> 00:02:11,960
again it wasn't really deleted but I just want to show you that sending delete requests also is as simple

29
00:02:12,140 --> 00:02:19,100
as exchanging one method, get or post, exchange it for delete and of course comparable methods are available

30
00:02:19,100 --> 00:02:21,690
for put, patch and so on.

