1
00:00:02,080 --> 00:00:06,510
So over the last lectures I showed you a lot how you can get data.

2
00:00:06,520 --> 00:00:12,450
Now of course I also want to show you how you can post data to a server and for that we get the add a

3
00:00:12,510 --> 00:00:15,290
post area here at the bottom,

4
00:00:15,370 --> 00:00:21,070
it's managed by the new post component which is a class based component which manages its own state

5
00:00:21,340 --> 00:00:27,020
and hence is in a container because we're not passing or distributing the state to any other components.

6
00:00:27,100 --> 00:00:33,230
And now I want to hook up this add post button to essentially send a POST request to our dummy backend.

7
00:00:33,740 --> 00:00:34,640
For this, I'll

8
00:00:34,660 --> 00:00:42,290
first of all add a method, the postDataHandler or post post handler if you want to do it

9
00:00:42,300 --> 00:00:45,330
and then there of course I need to use axios

10
00:00:45,340 --> 00:00:53,260
Now first of all let's hook this method up by adding the on click listener down there, this

11
00:00:53,270 --> 00:00:54,330
postDataHandler

12
00:00:54,670 --> 00:01:00,180
and now let's import axios so we that we can send a post request.

13
00:01:00,550 --> 00:01:02,290
Now sending post requests

14
00:01:02,310 --> 00:01:04,180
still use the axios object

15
00:01:04,320 --> 00:01:08,440
but now of course not the get method but the post method.

16
00:01:08,700 --> 00:01:15,360
The post mehtod still takes a URL as an input and for our dummy backend, we can simply use the same

17
00:01:15,480 --> 00:01:21,090
URL we used for the get request, it also accepts post requests.

18
00:01:21,120 --> 00:01:27,390
Now a post request needs more than the URL though, it needs a second argument which is the data we want

19
00:01:27,390 --> 00:01:32,850
to send because obviously a post request without data doesn't make that much sense.

20
00:01:32,850 --> 00:01:39,930
The data I want to send is a javascript object which contains title, body and author of a post.

21
00:01:39,930 --> 00:01:45,900
So I'll create a new constant which should be a javascript object and there i'll set a title to this.

22
00:01:46,140 --> 00:01:47,940
state.title,

23
00:01:48,020 --> 00:01:55,290
I'll set the body to this.state.content and you can of course choose any properties you want here for that

24
00:01:55,290 --> 00:02:00,980
object and I will set the author to this state of author.

25
00:02:00,990 --> 00:02:02,450
Again you can add more,

26
00:02:02,520 --> 00:02:06,500
you can expand this form here at the bottom of course.

27
00:02:06,660 --> 00:02:13,230
Then I will said post, this constant here as a second argument to the post method

28
00:02:13,470 --> 00:02:18,840
and of course, this is just called post because what we are submitting is some data about a post, you can name

29
00:02:18,840 --> 00:02:20,080
this whatever you want,

30
00:02:20,100 --> 00:02:22,360
you can also name this data.

31
00:02:22,860 --> 00:02:27,120
Now you can also pass a third argument to configure this request but we don't need that

32
00:02:27,120 --> 00:02:29,500
here. Important for us,

33
00:02:29,550 --> 00:02:35,460
This of course is a javascript object but axios will automatically basically stringify this, so

34
00:02:35,460 --> 00:02:37,160
turn this into json data,

35
00:02:37,170 --> 00:02:43,200
it will do it for us just as it extract the json data and get requests for us too.

36
00:02:43,680 --> 00:02:46,820
And now this also of course runs asynchronously,

37
00:02:46,860 --> 00:02:54,210
we can listen to the response just like we can do it for get requests and we can print it to the console

38
00:02:54,210 --> 00:02:55,290
here.

39
00:02:55,290 --> 00:02:56,480
Now let's try this out,

40
00:02:56,480 --> 00:02:57,680
let's save this,

41
00:02:57,900 --> 00:03:03,570
let's open the console and let's enter some content here,

42
00:03:03,580 --> 00:03:09,670
this is some test content, maybe switch the author to Manu and hit add post.

43
00:03:10,020 --> 00:03:18,000
And here's the response, status text 201 which indicates that it was successful. And now that the dummy backend

44
00:03:18,000 --> 00:03:24,540
here won't store the data of course, it just returns the data in the response so that we can see

45
00:03:24,540 --> 00:03:27,880
that we did send it successfully and looks like we did,

46
00:03:27,910 --> 00:03:28,620
this is the data

47
00:03:28,620 --> 00:03:32,640
we did send. Again for a real server of course, for your own server

48
00:03:32,640 --> 00:03:38,430
you probably have some logic on the server to then also store this in the database.

49
00:03:38,430 --> 00:03:44,250
This is how we can post data, that is all there's to it. Just exchanging the word here, the name of the

50
00:03:44,250 --> 00:03:47,460
method and passing the data as a second argument

51
00:03:47,610 --> 00:03:50,350
and now we can also send data to servers.

