1
00:00:02,130 --> 00:00:05,510
W ostatnim wykadzie nauczysz si, jak wybiera posty,

2
00:00:05,660 --> 00:00:10,380
ale to oczywicie nie ma nic wsplnego z aksjami lub z

3
00:00:10,400 --> 00:00:13,070
daniami HTTP, to bya reakcja wanilii,

4
00:00:13,070 --> 00:00:17,230
mia praktyka, ale teraz przejdmy do rzeczy, a teraz wylijmy

5
00:00:17,330 --> 00:00:22,670
danie HTTP, gdy tylko dostaniemy wany ID. Teraz, jaki hak cyklu ycia powinnimy tutaj uy?

6
00:00:22,910 --> 00:00:27,630
Spjrzmy. Jeli przyjrzymy si hakowaniu cyklu

7
00:00:27,740 --> 00:00:34,100
ycia w celu aktualizacji komponentw i oczywicie mwimy o haku cyklu aktualizacji, poniewa komponent

8
00:00:34,100 --> 00:00:35,060
jest tam

9
00:00:35,210 --> 00:00:38,900
od samego pocztku, ale dane powinny zosta pobrane

10
00:00:38,960 --> 00:00:46,030
po otrzymaniu nowego ID wniosku, wic to wanie szukam. Nastpnie componentDidUpdate jest dobrym miejscem do wywoywania efektw ubocznych,

11
00:00:46,250 --> 00:00:48,110
ale ma rwnie jedn kwesti.

12
00:00:48,260 --> 00:00:55,690
Jeli zaktualizujemy stan w tym miejscu, aktualizujemy komponent ponownie i dlatego wprowadzamy nieskoczon ptl, na

13
00:00:55,700 --> 00:00:57,890
ktr musimy zwrci uwag, ale

14
00:00:58,040 --> 00:01:03,000
przede wszystkim zrbmy danie HTTP. Udam si do penego postu i

15
00:01:03,200 --> 00:01:12,620
przede wszystkim musimy zaimportowa tutaj aksios, axios z pakietu axios. Nastpnie, w penym pocie, w komponencie, moemy zaimplementowa

16
00:01:12,620 --> 00:01:21,050
komponentDidUpdate i utworzy danie HTTP, wic mog uywa osi get, a teraz adres URL

17
00:01:21,460 --> 00:01:29,240
musi kierowa jeden post przez identyfikator. jeli przyjrzymy si naszemu manuaowemu backendowi, znajdziemy dla

18
00:01:29,540 --> 00:01:37,910
niego tras, otrzymamy, a nastpnie opublikujemy slash jako identyfikator, abymy mogli skopiowa ten URL i teraz wysa

19
00:01:37,910 --> 00:01:44,810
zapytanie do tego adresu URL, chocia oczywicie nie utworzymy twardego kodu w ale zamiast

20
00:01:44,900 --> 00:01:49,440
tego uyj plusa. rekwizyty. id, aby wzi identyfikator, ktry mamy na rekwizytach.

21
00:01:49,700 --> 00:01:53,820
Oczywicie nie chcemy te wysya tego dania, jeli identyfikator jest

22
00:01:53,830 --> 00:01:55,630
zerowy, wic nie chcemy tego

23
00:01:55,910 --> 00:01:57,930
robi, jeli pomys jest nieprawidowy.

24
00:01:58,490 --> 00:02:04,240
Wic sprawdz, czy to. rekwizyty. identyfikator jest traktowany jako

25
00:02:04,520 --> 00:02:11,030
prawdziwy, co oznacza, e jest to poprawny identyfikator, a nastpnie moemy wysa

26
00:02:11,030 --> 00:02:23,750
to danie za pomoc axios i metody get do tego adresu URL. Teraz, jeli robi whoops w tym, a nastpnie blok tutaj, mog wypisa, e z logu konsoli

27
00:02:23,750 --> 00:02:28,380
odpowiedzi i powinnimy zobaczy odpowied, jak tylko kliknlimy na jednym elemencie.

28
00:02:28,400 --> 00:02:32,480
Jeli klikniemy element tutaj, zobaczymy odpowied.

29
00:02:32,480 --> 00:02:34,660
Teraz to dziaa dobrze tutaj,

30
00:02:34,850 --> 00:02:36,680
jednak oczywicie chcesz go wypuci.

31
00:02:36,920 --> 00:02:44,270
Tak wic powinnimy rwnie zarzdza jakim stanem tutaj i by moe mamy jak zaadowany post w tym elemencie, w tym komponencie, ktry pocztkowo

32
00:02:44,270 --> 00:02:54,740
jest ustawiony na warto null, a nastpnie tutaj moemy wypisa loadPost. tytu i zaadowanyPost. tre w

33
00:02:54,920 --> 00:02:57,950
naszej treci

34
00:02:57,950 --> 00:03:05,750
post jsx. I tutaj, gdzie rejestruj odpowied, nie bd tego

35
00:03:05,930 --> 00:03:07,630
wicej rejestrowa, zamiast

36
00:03:07,670 --> 00:03:16,190
tego chc to nazwa tym, co chc tutaj zrobi. setState i tam ustawi zaadowany post na dane odpowiedzi,

37
00:03:16,230 --> 00:03:23,330
ktre bd postami, ktre pobralimy z zaplecza. I oczywicie w naszym kodzie jsx powinnimy uzyska

38
00:03:23,570 --> 00:03:32,380
dostp do zaadowanego posta na ten temat. stan, w ten sposb. Teraz, jeli przejdziemy do naszej aplikacji

39
00:03:33,130 --> 00:03:38,050
i przeadujemy j, a klikn na post, faktycznie otrzymujemy

40
00:03:38,050 --> 00:03:46,620
bd, ktry uniemoliwia odczytanie tytuu o wartoci null. Ma to wiele sensu, poniewa tutaj w naszym kodzie jsx dla penego postu, mamy natychmiastowy dostp do tego.

41
00:03:46,630 --> 00:03:52,090
stan. loadedPost. tytu i robimy to, gdy tylko otrzymamy prawidow waciwo.

42
00:03:52,090 --> 00:03:58,960
Teraz otrzymujemy poprawn waciwo, zanim bdziemy mieli prawidowy zaadowany wpis, poniewa jak si dowiedzielicie, pobieranie

43
00:03:58,960 --> 00:04:00,320
danych jest asynchroniczne.

44
00:04:00,340 --> 00:04:06,940
Najpierw dostajemy identyfikator, a potem troch pniej, otrzymujemy zaadowany post, ale wracamy do domingu natychmiast po

45
00:04:06,940 --> 00:04:08,770
tym, jak otrzymamy identyfikator.

46
00:04:09,310 --> 00:04:15,970
Moemy to naprawi, dodajc do tego sprawdzanie poprawnoci identyfikatora. rekwizyty. id, jak ju mamy,

47
00:04:15,970 --> 00:04:24,910
i mwimy, e w tym przypadku post powinien w rzeczywistoci by akapitem, ale moe paragrafem, w ktrym

48
00:04:24,910 --> 00:04:31,130
po prostu mwimy o adowaniu, poniewa wybralimy post, ale dane jeszcze nie istniej.

49
00:04:31,180 --> 00:04:37,600
A nastpnie na dole, jeli owiadczenie, sprawdzamy stan. loadedPost zosta ustawiony, poniewa pocztkowo jest pusty, wic

50
00:04:37,600 --> 00:04:40,020
bdzie traktowany jako faszywy, ale jak

51
00:04:40,180 --> 00:04:44,470
tylko go otrzymamy, to powrci do true lub rozwie true,

52
00:04:44,650 --> 00:04:47,020
a wic wyrenderujemy ten kod jsx.

53
00:04:47,230 --> 00:04:53,710
A teraz, jeli to zapisz, klikam na post, ktry widzimy przez uamek sekundy, a

54
00:04:53,710 --> 00:04:55,390
potem widzimy post.

55
00:04:55,390 --> 00:04:57,320
Mamy tu rwnie

56
00:04:57,550 --> 00:05:05,890
problem, jeli otworzymy kart sieciow, zobaczysz, e ponownie wysyasz danie po probie po probie, moemy

57
00:05:06,100 --> 00:05:08,990
po prostu ponownie zaadowa stron,

58
00:05:09,190 --> 00:05:20,920
aby si upewni, e to si skoczy, ale dlaczego to widzimy? Widzimy te nieskoczone dania, poniewa aktualizujemy stan z poziomu elementu

59
00:05:20,920 --> 00:05:27,940
componentDidUpdate, a to tworzy nieskoczon ptl, poniewa gdy wywoujemy setState, komponent zostanie

60
00:05:27,940 --> 00:05:31,950
zaktualizowany, a skadnik componentDidUpdate zostanie ponownie wykonany.

61
00:05:32,320 --> 00:05:41,080
Musimy wic upewni si, e wysyamy tylko to danie HTTP, a zatem aktualizujemy stan, jeli faktycznie

62
00:05:41,100 --> 00:05:42,880
zaadowalimy nowy wpis.

63
00:05:42,880 --> 00:05:44,510
Wic jak to robimy?

64
00:05:44,710 --> 00:05:53,470
Moemy wpisa, jeli zaznaczymy wewntrz zewntrznej, jeli zaznaczymy tutaj i tam moemy pokaza, czy mamy ju zaadowany

65
00:05:53,470 --> 00:05:55,350
post, jeli to prawda.

66
00:05:55,360 --> 00:05:59,020
To pierwszy wskanik, e ju wczytalimy post.

67
00:05:59,230 --> 00:06:06,310
Oczywicie chcemy rwnie upewni si, e dla tego zaadowanego posta identyfikator nie jest tym samym identyfikatorem, co wanie

68
00:06:06,310 --> 00:06:12,940
otrzymalimy przez rekwizyt, poniewa oznaczaoby to, e ID, dla ktrego chcemy pobra nowe dane, jest tym, ktry

69
00:06:12,940 --> 00:06:16,940
ju zaadowalimy, wic w tym przypadku nie musimy wysya dania HTTP.

70
00:06:17,320 --> 00:06:20,080
Sprawdzimy tutaj, czy mamy zaadowany

71
00:06:20,080 --> 00:06:29,170
post, a jeli tak. stan. loadedPost. id nie jest rwny rekwizytom. ID.

72
00:06:29,230 --> 00:06:35,770
Jeli wic zasadniczo staramy si uzyska dane dla nowego postu, co jest w porzdku, w takim przypadku chc wysa danie

73
00:06:36,130 --> 00:06:37,200
HTTP we wszystkich

74
00:06:37,210 --> 00:06:41,740
innych przypadkach, nie bd kontynuowa, bo wtedy prbujemy pobra dane na danie, ktre ju

75
00:06:41,770 --> 00:06:47,560
mamy, dla postu, ktry ju mamy, powinno to by to. rekwizyty, oczywicie.

76
00:06:47,560 --> 00:06:51,070
Teraz zobaczmy, jeli zaaduj t stron i klikn na post,

77
00:06:51,430 --> 00:06:54,010
to nigdy nie otrzymamy danych o wpisie,

78
00:06:54,010 --> 00:06:57,000
wic jako nasz test tutaj si nie udaje.

79
00:06:57,250 --> 00:07:03,040
No c, musimy to troch zmieni, poniewa pocztkowo to si nie powiedzie, poniewa zaadowany post jest pocztkowo pusty,

80
00:07:03,040 --> 00:07:04,230
wic to by si

81
00:07:04,270 --> 00:07:07,530
udao tylko wtedy, gdybymy zaadowali co najmniej jeden post.

82
00:07:07,840 --> 00:07:16,270
Zamiast tego sprawdz, czy tego nie mamy. stan. loadedPost lub jeli mamy go, ale jeli ma

83
00:07:16,270 --> 00:07:19,600
on rwnie inny identyfikator ni ID, ktry planujemy zaadowa.

84
00:07:19,630 --> 00:07:25,660
Tak wic robimy to, nawet jeli nie mamy zaadowanego postu lub jeli mamy taki, ale identyfikatory

85
00:07:25,660 --> 00:07:26,590
s rne, whoops

86
00:07:26,760 --> 00:07:27,060
to

87
00:07:27,100 --> 00:07:28,620
powinien by zaadowany post.

88
00:07:28,660 --> 00:07:34,930
Jeli teraz to zapiszemy i wrcimy do aplikacji, na zakadce sieci, jeli klikn post, ktry aduje i nie

89
00:07:35,020 --> 00:07:37,510
rozpocznie wysyania da nieskoczonoci, i nadal moe

90
00:07:37,720 --> 00:07:42,940
si przecza, ale dostajemy tylko jedno danie na przecznik i to jest dokadnie to, czego chcemy.

91
00:07:42,940 --> 00:07:49,600
Tak wic mamy teraz sposb na bezpieczne pobieranie danych w componentDidUpdate i nadal element componentDidUpdate jest waciwym

92
00:07:49,600 --> 00:07:54,410
miejscem, poniewa chcemy pobiera dane za kadym razem, gdy otrzymamy nowe rekwizyty.

