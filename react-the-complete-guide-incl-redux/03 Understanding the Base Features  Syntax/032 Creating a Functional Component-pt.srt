1
00:00:02,210 --> 00:00:08,480
Todos ns realmente aprendemos muito sobre os principais fundamentos do re-agir, especialmente este gnio X, coisa que

2
00:00:08,480 --> 00:00:14,930
 super importante para entender e entender, mas eu tambm mencionei no primeiro mdulo do curso que

3
00:00:15,140 --> 00:00:21,890
o reator  tudo sobre componentes que voc constri seu aplicativo com componentes e reage como uma biblioteca

4
00:00:21,890 --> 00:00:24,410
que facilita a construo desses componentes.

5
00:00:24,590 --> 00:00:27,590
Bem, agora, estamos usando apenas um componente.

6
00:00:27,620 --> 00:00:33,870
Hora de mudar isso e, para isso, vou adicionar um novo arquivo na pasta de origem do nosso projeto.

7
00:00:33,890 --> 00:00:39,020
Na verdade, at mesmo adicionarei uma nova pasta e irei nome-la pessoa com uma P. principal.

8
00:00:39,100 --> 00:00:41,220
Esta  uma espcie de conveno que reage.

9
00:00:41,240 --> 00:00:48,620
Voc no precisa fazer isso, mas voc fornece seus componentes aos arquivos onde voc os cria personagens iniciais de

10
00:00:48,620 --> 00:00:54,380
capital e voc descreve o que esse componente  espao e, portanto, aqui eu quero

11
00:00:54,380 --> 00:01:01,490
renderizar algumas informaes sobre uma pessoa dentro da pasta da pessoa que est armazenada na pasta de origem

12
00:01:01,490 --> 00:01:04,120
ou na pessoa que js arquivam.

13
00:01:04,220 --> 00:01:09,410
Mais uma vez seguindo esta conveno de ter um personagem inicial e

14
00:01:09,410 --> 00:01:16,420
descrevendo o que esse componente est agora, eu quero criar um componente e j fizemos isso.

15
00:01:16,520 --> 00:01:23,750
Na verdade, conseguimos isso fora da caixa no arquivo JS do pensamento, estendendo a classe de

16
00:01:23,750 --> 00:01:25,580
componente da biblioteca re-act.

17
00:01:25,670 --> 00:01:31,940
Ns podemos usar absolutamente esta abordagem e isso ser mais importante depois, quando voc aprender sobre o estado,

18
00:01:32,300 --> 00:01:37,800
que basicamente permite que voc altere seu componente em tempo de execuo, voc poderia dizer.

19
00:01:38,060 --> 00:01:43,850
Mas na maioria das vezes voc deve usar uma forma diferente de componente.

20
00:01:43,850 --> 00:01:51,620
Ou de criar componentes uma funo melhor uma funo javascript simples, porque em sua forma mais simples,

21
00:01:51,950 --> 00:01:58,480
um componente  apenas uma funo que retorna algum GSX algum HVM de outra forma.

22
00:01:58,520 --> 00:02:03,040
Voc poderia dizer Agora, claro, voc pode criar uma funo com uma palavra-chave de funo.

23
00:02:03,050 --> 00:02:08,290
Voc poderia nomear uma pessoa aqui com um personagem inicial minsculo que  um tipo de conveno aqui.

24
00:02:08,330 --> 00:02:13,970
Voc poderia usar um capital e, ento, voc poderia retornar algum gnio X aqui.

25
00:02:13,970 --> 00:02:16,050
Voc pode absolutamente fazer isso.

26
00:02:16,070 --> 00:02:22,550
Voc tambm pode usar a sintaxe de Diest cinco para criar uma varivel que contenha uma funo que,

27
00:02:22,550 --> 00:02:24,570
no final, resultaria no mesmo.

28
00:02:25,070 --> 00:02:29,450
Mas eu vou usar isso como seis neste curso que eu recomendo encarecidamente fazer.

29
00:02:29,450 --> 00:02:32,700
 uma boa prtica ao tratar os projetos da Riak.

30
00:02:32,720 --> 00:02:36,080
Isso lhe d acesso a muitos recursos novos e modernos.

31
00:02:36,170 --> 00:02:42,650
Por isso, vou tratar uma varivel no com a palavra palavra-chave, mas com a palavra Konski, porque

32
00:02:42,650 --> 00:02:45,950
no planejo alterar essa varivel efetivamente tornando-a constante.

33
00:02:46,070 --> 00:02:48,410
E, portanto, devemos comercializar como tal.

34
00:02:48,530 --> 00:02:51,430
Eu irei nome-lo pessoa com um caractere minsculo.

35
00:02:51,730 --> 00:02:59,930
Como eu disse, voc poderia escolher pessoa com maiscula P, mas muitas vezes voc v o nome da funo sendo em minscula.

36
00:02:59,930 --> 00:03:06,980
Deveria ser o mesmo nome do nome do arquivo ou o nome do componente Asti que deseja usar.

37
00:03:07,100 --> 00:03:12,380
Ento eu atribuirei um valor a essa varivel ou constante para ser preciso.

38
00:03:12,560 --> 00:03:14,330
E esta deve ser uma funo.

39
00:03:14,380 --> 00:03:18,880
Agora, eu poderia usar novamente a funo aqui, mas na verdade eu quero usar para sim.

40
00:03:18,920 --> 00:03:20,580
Sintaxe de seis funes.

41
00:03:20,690 --> 00:03:29,810
Esta sintaxe da funo de seta, ento eu direi o corpo da funo de seta da lista de argumento igual.

42
00:03:29,810 --> 00:03:31,310
Este  apenas um seis.

43
00:03:31,310 --> 00:03:35,090
Equivalente  funo criada com a palavra-chave da funo.

44
00:03:35,090 --> 00:03:41,480
Ele possui algumas vantagens, especialmente quando se trata dessa palavra-chave, ento eu recomendo

45
00:03:41,480 --> 00:03:43,520
vivamente usar essa sintaxe.

46
00:03:43,520 --> 00:03:49,970
Se isso  novo para voc agora voc sabe disso e, em geral, voc pode estar interessado

47
00:03:49,970 --> 00:03:57,890
em mergulhar em alguns como seis cursos ou materiais de aprendizagem, voc simplesmente aprende sobre todos os recursos incrveis que sim

48
00:03:57,890 --> 00:04:00,140
6 tem para oferecer como este.

49
00:04:00,140 --> 00:04:01,800
Volte para a sintaxe.

50
00:04:01,970 --> 00:04:08,510
Ns efetivamente temos uma funo aqui e, como eu disse na sua forma mais simples, um componente  uma funo que

51
00:04:08,510 --> 00:04:10,020
retorna alguns J S x.

52
00:04:10,010 --> 00:04:11,010
Ento vamos fazer isso.

53
00:04:11,240 --> 00:04:22,770
Vamos retornar alguns j como X e ns poderamos simplesmente retornar um pargrafo aqui onde eu digo que eu sou uma pessoa agora.

54
00:04:22,790 --> 00:04:30,970
Isso s cria uma funo vlida que podemos usar como componente, mas tambm temos que fazer duas coisas.

55
00:04:30,980 --> 00:04:36,020
Voc tem uma idia do que temos que fazer.

56
00:04:36,090 --> 00:04:44,850
que esta sintaxe GSX  transformada para reagir e criar um elemento e poder chamar esse mtodo.

57
00:04:44,940 --> 00:04:49,220
Para um, precisamos importar rejeitar porque tenha em mente

58
00:04:49,260 --> 00:04:55,500
Ns precisamos importar reagir com um capital so do pacote re-agir como este.

59
00:04:55,500 --> 00:05:03,800
Ento, assim como fazemos em Abchurch Sim aqui, no precisamos de componente, porque aqui no estamos usando uma

60
00:05:03,800 --> 00:05:05,830
classe que estenda o componente.

61
00:05:05,960 --> 00:05:08,270
Em vez disso, estamos criando uma funo.

62
00:05:08,720 --> 00:05:14,300
Ainda precisamos exportar essa funo como padro desse arquivo.

63
00:05:14,300 --> 00:05:21,890
de seguir para que este Daut aqui aparece e ns s vejamos a cruz e agora podemos comear

64
00:05:21,890 --> 00:05:29,360
a usar esse componente em outras facetas de nosso projeto, seja no nico nosso componente nosso componente raiz.

65
00:05:29,450 --> 00:05:35,930
Aqui ns exportamos essa pessoa Constand que mantm esta funo com aquilo que  seguro

66
00:05:35,930 --> 00:05:40,570
Ns ainda pensamos que a JS chegou l.

67
00:05:40,580 --> 00:05:45,290
Vou adicionar uma importao e vou importar pessoa.

68
00:05:45,290 --> 00:05:50,420
Este nome  agora totalmente para voc, mas deve ser o nome dos seus componentes, comeando com

69
00:05:50,420 --> 00:05:51,370
um personagem principal.

70
00:05:52,630 --> 00:06:01,210
Do ponto de barras porque  uma recompensa relativa a pasta pessoa.

71
00:06:01,360 --> 00:06:08,320
Ento, referindo-se a esta pasta que est no mesmo caminho que o laptop acaba de cair e l a

72
00:06:08,380 --> 00:06:15,700
pessoa que js arquivo embora possamos omitir o ponto J ass porque  adicionado automaticamente pelo workflow de compilao.

73
00:06:15,700 --> 00:06:21,140
Agora,  importante que voc o d como um nome que comea com o personagem em maiscula.

74
00:06:21,250 --> 00:06:26,320
Voc pode usar qualquer outro nome que no precisa ser pessoa, embora faa

75
00:06:26,320 --> 00:06:34,000
sentido usar para nomear alguns componentes, mas deve ter carter apretado porque em reagir em GSX todos os elementos que

76
00:06:34,000 --> 00:06:40,740
comeam com caracteres minsculos como div onde a idade 1  reservada para os elementos nativos da HVM.

77
00:06:41,050 --> 00:06:47,710
Ento, voc poderia criar seu prprio componente, que voc chamou de div com D em maiscula e, em seguida, Riette

78
00:06:47,710 --> 00:06:53,800
poderia usar isso porque no interferiria com a definio normal e pelo mesmo motivo, voc deveria dar a

79
00:06:53,800 --> 00:06:59,710
sua pessoa o caractere em letras maisculas para que o reagem o identifique como um componente personalizado.

80
00:07:00,040 --> 00:07:07,150
e encerramento como esta ou porque no aninhamos nada entre ou voltamos para o pai e as prximas palestras tambm.

81
00:07:07,150 --> 00:07:11,550
Ento, vamos usar a pessoa aqui e podemos usar a marca de abertura

82
00:07:11,830 --> 00:07:19,730
Voc tambm pode usar uma etiqueta de fechamento automtico onde barra e, em seguida, maior que assinar o dnt com dvida se voc

83
00:07:19,730 --> 00:07:20,740
salvar este outono.

84
00:07:20,740 --> 00:07:26,560
Q E voc agora volta para o seu aplicativo com o NPM comeando ainda em execuo no terminal.

85
00:07:26,600 --> 00:07:32,700
Voc v que eu sou uma pessoa que est sendo processada abaixo do contedo do nosso componente da aplicao.

86
00:07:32,750 --> 00:07:35,210
Isso agora vem do nosso prprio componente.

87
00:07:35,300 --> 00:07:40,970
E se inspecionarmos, estamos vendo o fim, no vemos o nosso elemento personalizado, s vemos o pargrafo em

88
00:07:40,970 --> 00:07:45,130
que estamos exportando para a funo e  na verdade como deveria ser.

89
00:07:45,620 --> 00:07:53,300
Ento, este  o nosso nico componente que se usa,  claro, us-lo como este j  bom,

90
00:07:53,300 --> 00:08:01,270
mas o que exatamente  o benefcio de trat-lo assim em vez de simplesmente adicionar o cdigo diretamente aos

91
00:08:01,280 --> 00:08:02,470
objetos apt caem.

92
00:08:02,510 --> 00:08:07,200
Vamos fazer mais com este componente para ver esse benefcio na prxima palestra.

