1
00:00:02,210 --> 00:00:08,480
Dowiedzielimy si ju duo o podstawowych podstawach reagowania, szczeglnie tego jsx, co jest bardzo

2
00:00:08,480 --> 00:00:14,930
wane, aby uzyska prawo i zrozumienie, ale wspomniaem rwnie w pierwszym module kursu, ktry reaguje

3
00:00:15,140 --> 00:00:21,890
na wszystkie komponenty, budujesz swoj aplikacj za pomoc komponentw i reaguj jak biblioteka, dziki ktrej

4
00:00:21,890 --> 00:00:24,410
budowanie tych komponentw jest tak atwe.

5
00:00:24,590 --> 00:00:27,590
Teraz uywamy tylko jednego komponentu, czas

6
00:00:27,620 --> 00:00:33,870
to zmieni i do tego dodam nowy plik w folderze rdowym naszego projektu.

7
00:00:33,890 --> 00:00:39,020
Dodam nawet nowy folder, a ja nadam mu nazw Person z wysokim P.

8
00:00:39,100 --> 00:00:41,220
Taka konwencja reaguje, nie

9
00:00:41,240 --> 00:00:48,620
musisz tego robi, ale dajesz swoim komponentom pliki, w ktrych tworzysz kapitaowe znaki

10
00:00:48,620 --> 00:00:54,380
pocztkowe, i opisujesz, czym waciwie jest ten komponent i tutaj

11
00:00:54,380 --> 00:01:01,490
chc przekaza pewne informacje o osobie . Wewntrz folderu tej osoby, ktry jest przechowywany w folderze

12
00:01:01,490 --> 00:01:04,120
rdowym lub w osobie. plik js,

13
00:01:04,220 --> 00:01:09,410
ponownie zgodny z t konwencj, majcy kapitaowy charakter pocztkowy i

14
00:01:09,410 --> 00:01:16,420
opisujcy, o co chodzi w tym komponencie. Teraz chciabym stworzy komponent i ju to zrobilimy,

15
00:01:16,520 --> 00:01:23,750
w rzeczywistoci otrzymalimy go z pudeka w aplikacji. plik js poprzez rozszerzenie klasy komponentw

16
00:01:23,750 --> 00:01:25,580
z biblioteki reagowania.

17
00:01:25,670 --> 00:01:31,940
Moemy bezwzgldnie stosowa to podejcie, a pniej stanie si waniejsze, gdy dowiesz si

18
00:01:32,300 --> 00:01:37,800
take o stanie, ktry zasadniczo pozwala na zmian komponentu w czasie wykonywania.

19
00:01:38,060 --> 00:01:43,850
Ale przez wikszo czasu powiniene uywa innej formy komponentu

20
00:01:43,850 --> 00:01:51,620
lub tworzenia komponentw, lepszej funkcji, prostej funkcji javascript, poniewa w najprostszej postaci

21
00:01:51,950 --> 00:01:58,480
komponent jest po prostu funkcj, ktra zwraca jaki jsx, jaki

22
00:01:58,520 --> 00:02:03,040
html, ktry mgby powiedzie. Teraz moesz oczywicie utworzy funkcj ze

23
00:02:03,050 --> 00:02:08,290
sowem kluczowym function, moesz nazwa osob, tutaj z ma postaci pocztkow, ktra jest

24
00:02:08,330 --> 00:02:13,970
take tego rodzaju konwencj tutaj, ale moesz uy kapitau ale moesz tu zwrci jsx

25
00:02:13,970 --> 00:02:16,050
, absolutnie moesz to zrobi.

26
00:02:16,070 --> 00:02:22,550
Mona rwnie uy skadni ES5 tworzenia zmiennej, ktra posiada funkcj, ktra w

27
00:02:22,550 --> 00:02:24,570
rezultacie spowoduje to samo.

28
00:02:25,070 --> 00:02:29,450
Ale bd uywa ES6 w tym kursie, ktry zdecydowanie zalecam,

29
00:02:29,450 --> 00:02:32,700
jest to najlepsza praktyka w leczeniu projektw reakcji,

30
00:02:32,720 --> 00:02:36,080
daje dostp do wielu nowych i nowoczesnych funkcji.

31
00:02:36,170 --> 00:02:42,650
Dlatego utworz zmienn nie za pomoc sowa kluczowego var, lecz za sowem const, poniewa nie planuj

32
00:02:42,650 --> 00:02:45,950
zmienia tej zmiennej skutecznie, czynic j sta i

33
00:02:46,070 --> 00:02:48,410
dlatego powinnimy oznaczy j jako tak.

34
00:02:48,530 --> 00:02:51,430
Nazw go osob maymi literami, poniewa powiedziaem,

35
00:02:51,730 --> 00:02:59,930
e moesz wybra osob z wielk liter P, ale czsto widzisz, e nazwa funkcji skada si wycznie z maych liter,

36
00:02:59,930 --> 00:03:06,980
w przeciwnym razie powinna by taka sama jak nazwa pliku lub jako nazwa komponentu, ktr chcesz uywa.

37
00:03:07,100 --> 00:03:12,380
Nastpnie przypisz warto tej zmiennej lub staej, aby bya dokadna i

38
00:03:12,560 --> 00:03:14,330
powinna to by funkcja.

39
00:03:14,380 --> 00:03:18,880
Teraz znowu mgbym uy funkcji tutaj, ale w

40
00:03:18,920 --> 00:03:20,580
rzeczywistoci chc uy

41
00:03:20,690 --> 00:03:29,810
skadni funkcji ES6, tej skadni funkcji strzaki, wic powiem cia strzaki ze strzak z list argumentw.

42
00:03:29,810 --> 00:03:31,310
Jest to po

43
00:03:31,310 --> 00:03:35,090
prostu odpowiednik ES6 funkcji utworzonej za pomoc sowa

44
00:03:35,090 --> 00:03:41,480
kluczowego function, ma pewne zalety, szczeglnie jeli chodzi o to sowo kluczowe, wic zdecydowanie

45
00:03:41,480 --> 00:03:43,520
polecam uycie tej skadni.

46
00:03:43,520 --> 00:03:49,970
Jeli jest to dla Ciebie zupenie nowe, teraz ju wiesz i generalnie moesz

47
00:03:49,970 --> 00:03:57,890
zainteresowa si rwnie nurkowaniem na niektre kursy ES6 lub materiay do nauki, po prostu poznasz wszystkie

48
00:03:57,890 --> 00:04:00,140
niesamowite funkcje, jakie oferuje ES6.

49
00:04:00,140 --> 00:04:01,800
Wracajc jednak do skadni,

50
00:04:01,970 --> 00:04:08,510
efektywnie mamy tutaj funkcj i jak powiedziaem w jej najprostszej formie, komponent jest funkcj

51
00:04:08,510 --> 00:04:10,020
zwracajc niektre jsx.

52
00:04:10,010 --> 00:04:11,010
Zrbmy to,

53
00:04:11,240 --> 00:04:22,770
zwrmy jsx i moemy po prostu zwrci akapit tutaj, gdzie mwi, e jestem osob. Teraz to samo tworzy wan funkcj, ktr

54
00:04:22,790 --> 00:04:30,970
moglibymy uy jako komponent, ale musimy rwnie zrobi dwie inne rzeczy.

55
00:04:30,980 --> 00:04:36,020
Czy masz pomys, co musimy zrobi?

56
00:04:36,090 --> 00:04:44,850
Po pierwsze, musimy zaimportowa reagowa, poniewa pamitajmy, e skadnia jsx jest przeksztacana, aby reagowa na element create

57
00:04:44,940 --> 00:04:49,220
i mc wywoywa t metod, musimy zaimportowa reagowa

58
00:04:49,260 --> 00:04:55,500
z du wartoci R z pakietu reakcji, tak jak to, wic tak

59
00:04:55,500 --> 00:05:03,800
jak my zrb w aplikacji. js tutaj. Nie potrzebujemy tego komponentu, poniewa tutaj

60
00:05:03,800 --> 00:05:05,830
nie uywamy klasy, ktra rozszerza

61
00:05:05,960 --> 00:05:08,270
komponent, zamiast tego tworzymy funkcj.

62
00:05:08,720 --> 00:05:14,300
Nadal musimy wyeksportowa t funkcj jako domyln dla tego pliku, tutaj

63
00:05:14,300 --> 00:05:21,890
eksportujemy t sta osoby, ktra posiada t funkcj. Za pomoc tego zapiszmy pliki, aby ta kropka

64
00:05:21,890 --> 00:05:29,360
tutaj znikna i widzimy tylko krzy, a teraz moemy zacz uywa tego komponentu w innych

65
00:05:29,450 --> 00:05:35,930
plikach naszego projektu, a mianowicie w jedynym innym komponencie, ktrego nasz skadnik root

66
00:05:35,930 --> 00:05:40,570
mamy jeszcze w aplikacji. plik js. Tam dodaj import

67
00:05:40,580 --> 00:05:45,290
i bd importowa osob, ta nazwa jest teraz

68
00:05:45,290 --> 00:05:50,420
cakowicie od Ciebie zalena, ale powinna to by nazwa

69
00:05:50,420 --> 00:05:51,370
twoich komponentw

70
00:05:52,630 --> 00:06:01,210
zaczynajca si od znaku kapitau, od kropki, poniewa jest to wzgldna cieka, folder osoby.

71
00:06:01,360 --> 00:06:08,320
Odwoujc si do tego folderu, ktry znajduje si na tej samej ciece co aplikacja. js i tam ta osoba. plik js,

72
00:06:08,380 --> 00:06:15,700
cho moemy pomin. js, poniewa jest on dodawany automatycznie przez przepyw pracy budowania.

73
00:06:15,700 --> 00:06:21,140
Teraz wane jest, aby poda to jako nazw zaczynajc si od wielkiej litery.

74
00:06:21,250 --> 00:06:26,320
Moesz wybra dowoln inn nazw, nie musi to by osoba, ale warto

75
00:06:26,320 --> 00:06:34,000
uywa nazwy komponentu, ale powinna ona mie wielk liter. Poniewa w odpowiedzi, w jsx, wszystkie elementy zaczynajce

76
00:06:34,000 --> 00:06:40,740
si od maych liter, takich jak div lub h1, s zarezerwowane dla natywnych elementw HTML.

77
00:06:41,050 --> 00:06:47,710
Aby mg stworzy swj wasny komponent, ktry nazwaby div z wielk liter D, a nastpnie zareagowaby

78
00:06:47,710 --> 00:06:53,800
na to, poniewa nie kolidowaoby to z normalnym divem i z tego samego powodu,

79
00:06:53,800 --> 00:06:59,710
powiniene nada swojej osobie wielk posta, tak aby zareagowaa identyfikujc j jako niestandardowy komponent.

80
00:07:00,040 --> 00:07:07,150
Uyjmy wic osoby tutaj i moemy albo uy tagu otwierajcego i zamykajcego w ten sposb, albo poniewa nie zagniedamy niczego

81
00:07:07,150 --> 00:07:11,550
pomidzy, powrc do tego rwnie w nastpnych wykadach, moesz te uy tagu zamykajcego

82
00:07:11,830 --> 00:07:19,730
si automatycznie z cicie, a nastpnie wikszy ni znak na kocu. Dziki temu, jeli zapiszesz ten plik rwnie,

83
00:07:19,730 --> 00:07:20,740
a teraz

84
00:07:20,740 --> 00:07:26,560
wrcisz do swojej aplikacji z npm start nadal dziaajcym w

85
00:07:26,600 --> 00:07:32,700
terminalu, zobaczysz, e jestem renderowany poniej zawartoci naszego komponentu aplikacji.

86
00:07:32,750 --> 00:07:35,210
To teraz pochodzi z naszego wasnego

87
00:07:35,300 --> 00:07:40,970
komponentu i jeli sprawdzimy to, widzimy w kocu, e nie widzimy naszego niestandardowego elementu, widzimy

88
00:07:40,970 --> 00:07:45,130
tylko akapit, ktry eksportujemy w funkcji i tak wanie powinno by.

89
00:07:45,620 --> 00:07:53,300
Wic to jest teraz nasz jedyny komponent, ktry jest wykorzystywany, oczywicie uywanie go tak, jak to jest ju mie, ale co to jest korzy z

90
00:07:53,300 --> 00:08:01,270
tworzenia tego w ten sposb, zamiast po prostu dodawa kod bezporednio do aplikacji. plik js.

91
00:08:01,280 --> 00:08:02,470
&nbsp;

92
00:08:02,510 --> 00:08:07,200
Zrbmy wicej z tym komponentem, aby zobaczy t korzy w nastpnym wykadzie.

