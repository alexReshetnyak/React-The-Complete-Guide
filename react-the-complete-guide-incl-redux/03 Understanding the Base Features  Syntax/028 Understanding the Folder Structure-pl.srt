1
00:00:02,360 --> 00:00:06,360
W ostatnim wykadzie stworzylimy nasz projekt z aplikacj do tworzenia reakcji i,

2
00:00:06,450 --> 00:00:11,980
jak ju wspomniaem, upewnij si, e npm start, ten proces jest uruchamiany za kadym razem, gdy

3
00:00:11,980 --> 00:00:13,260
pracujesz nad swoim kodem.

4
00:00:13,290 --> 00:00:19,160
Teraz otwieram folder utworzony za pomoc kodu Visual Studio Microsoftu, jest to IDE, ktrego

5
00:00:19,200 --> 00:00:22,030
zamierzam uy w trakcie kursu, ale moesz

6
00:00:22,200 --> 00:00:25,430
uy dowolnego IDE lub edytora, ktrego chcesz uy.

7
00:00:25,500 --> 00:00:31,950
Na przykad WebStorm moe by alternatyw lub Sublime lub Atomem lub dowolnym innym edytorem, ktry

8
00:00:31,950 --> 00:00:33,000
ci si podoba.

9
00:00:33,000 --> 00:00:38,850
Teraz tutaj instaluj motyw i niektre rozszerzenia i moesz znale dokadn konfiguracj, ktrej uywam, opisan w dokumencie PDF

10
00:00:39,140 --> 00:00:42,170
doczonym do tego wideo, na wypadek, gdyby chcia uy

11
00:00:42,210 --> 00:00:48,150
tego samego, ale moesz uy swojej ulubionej konfiguracji . Niezalenie od uytego motywu i konfiguracji,

12
00:00:48,150 --> 00:00:53,230
bdziesz mie tak sam ilo plikw i folderw w swoim projekcie.

13
00:00:53,460 --> 00:00:58,890
Wic poznajmy wszystkie pliki i foldery, ktre tutaj mamy. Na poziomie root otrzymujemy kilka plikw

14
00:00:58,890 --> 00:01:00,420
konfiguracyjnych, te pliki

15
00:01:00,480 --> 00:01:03,010
blokad mona tutaj w zasadzie zignorowa,

16
00:01:03,030 --> 00:01:07,800
po prostu blokuj wersje zalenoci, ktrych uywamy, oglne zalenoci, ktre nasz

17
00:01:07,800 --> 00:01:14,250
projekt s zdefiniowane w pakiecie. pliki json. A potem wida, e mamy trzy zalenoci

18
00:01:14,250 --> 00:01:18,360
w tym projekcie i wszystko to zostao stworzone przez aplikacj do tworzenia reakcji.

19
00:01:18,540 --> 00:01:24,720
Jak wida, oczywicie importujemy reakcje, tutaj uywam wersji kandydujcej do wydania 16 w momencie, w

20
00:01:24,720 --> 00:01:26,520
ktrym to przegldasz, to

21
00:01:26,520 --> 00:01:32,710
powinno by wypuszczone, reaguj domem, to jest to samo i reaguj na skrypty, o ktrych

22
00:01:32,760 --> 00:01:39,900
wspomniaem. pakiet oferujcy cay ten przepyw pracy, ten serwer rozwoju, obsug javascript nastpnej generacji i wszystkie te

23
00:01:39,990 --> 00:01:46,340
rzeczy, ktrych uywamy w tym projekcie. W paczce. plik json, byo kilka zdefiniowanych skryptw,

24
00:01:46,560 --> 00:01:51,000
moesz uruchomi te skrypty za pomoc npm run, a nastpnie nazw skryptu.

25
00:01:51,180 --> 00:01:57,060
Wyjtki zaczynaj si od uruchomienia npm start, polecenia, ktre wykonalimy i jak wida, uywa tego

26
00:01:57,060 --> 00:02:02,680
pakietu skryptw reagowania, aby nastpnie wykona tam polecenie startowe, to po prostu polecenie udostpnione przez

27
00:02:02,690 --> 00:02:03,730
ten pakiet i

28
00:02:03,750 --> 00:02:08,900
polecenie to dzieje si uruchom ten serwer programistyczny, obejrzyj cay nasz kod, skompiluj

29
00:02:08,940 --> 00:02:15,750
nasz kod, zoptymalizuj kod i wykonaj wszystkie te czynnoci. Gdy bdziesz gotowy do wdroenia aplikacji, moesz

30
00:02:15,750 --> 00:02:21,360
uruchomi npm run build, aby zoptymalizowa j jeszcze bardziej, nie uruchamia serwera

31
00:02:21,570 --> 00:02:28,740
programistycznego, ale zamiast tego uzyska zoptymalizowany kod zapisany w folderze, poniewa teraz nie zobaczysz tutaj

32
00:02:28,770 --> 00:02:30,090
skompilowanego kodu wszystko

33
00:02:30,090 --> 00:02:31,770
dzieje si w pamici.

34
00:02:31,770 --> 00:02:35,190
Ale wrc do wdroenia aplikacji w dalszej czci kursu.

35
00:02:35,220 --> 00:02:37,140
Wic zamknijmy ten pakiet. plik

36
00:02:37,140 --> 00:02:44,710
json na razie. Folder moduw wzw zawiera wszystkie zalenoci i zalenoci od naszego projektu,

37
00:02:44,940 --> 00:02:46,780
dlatego mamy ich tak wiele.

38
00:02:46,800 --> 00:02:53,130
Mielimy tylko reagowa, reagowa na dom i reagowa na skrypty, ale reagowa na skrypty maj wiele innych zalenoci, wszystkie

39
00:02:53,130 --> 00:02:56,550
te mae narzdzia do kompilacji, ktre kompiloway kod i tak dalej.

40
00:02:56,760 --> 00:02:59,820
Nie powiniene edytowa niczego w folderze moduw

41
00:02:59,850 --> 00:03:06,510
wzw, jest on generowany automatycznie, jeli uruchomisz program npm install w folderze projektu, co zostao automatycznie

42
00:03:06,570 --> 00:03:08,680
wykonane przez utworzenie skryptw reakcji.

43
00:03:08,850 --> 00:03:11,160
Folder publiczny jest bardziej interesujcy, jest

44
00:03:11,160 --> 00:03:16,070
to w zasadzie folder gwny, na ktrym serwer kocowy jest obsugiwany przez

45
00:03:16,080 --> 00:03:23,090
serwer WWW, ale tutaj tylko pliki, ktre moemy edytowa, pliki skryptw s dodawane w folderze rdowym.

46
00:03:23,490 --> 00:03:26,580
Oto jeden wany indeks plikw. html, to jest

47
00:03:26,700 --> 00:03:30,960
normalna strona html i jest to jedyna strona, ktr

48
00:03:30,980 --> 00:03:32,010
mamy tutaj.

49
00:03:32,070 --> 00:03:35,760
Nigdy nie dodamy wicej stron HTML w tym projekcie,

50
00:03:35,820 --> 00:03:41,950
jeli tworzysz projekt wielostronicowy, utworzysz tutaj wiele takich projektw z aplikacj do tworzenia reakcji, nie

51
00:03:42,240 --> 00:03:43,630
dodasz tutaj wicej

52
00:03:43,650 --> 00:03:47,690
plikw html lub potrzebujesz wasnego przepywu pracy, jeli chcesz Zrb to.

53
00:03:47,820 --> 00:03:54,820
Tak wic jest to pojedyncza strona, na ktrej w kocu nasze pliki skryptowe zostan wstrzyknite przez ten przepyw pracy,

54
00:03:54,840 --> 00:04:01,200
dlatego nie widzisz tu importu skryptu i moesz edytowa ten plik, ale nie bdziemy tutaj zapisywa adnego

55
00:04:01,200 --> 00:04:02,160
kodu HTML.

56
00:04:02,340 --> 00:04:05,670
Chc podkreli t div tutaj z rootem ID,

57
00:04:05,700 --> 00:04:11,910
stanie si to wane, poniewa bdzie to miejsce, w ktrym pniej montujemy nasz aplikacj reagowania,

58
00:04:12,060 --> 00:04:14,160
a my oczywicie bdziemy reagowa.

59
00:04:14,160 --> 00:04:20,880
Ale jeli chcesz doda import, powiedzmy inne biblioteki, biblioteki CSS lub chcesz doda

60
00:04:20,880 --> 00:04:25,170
kilka metatagw, moesz to zrobi tutaj w pliku html.

61
00:04:25,170 --> 00:04:26,930
Moesz rwnie doda wicej html tutaj,

62
00:04:26,940 --> 00:04:33,480
ale znowu, prawdopodobnie chcesz to zrobi w reakcji. Manifest. Plik json istnieje, poniewa aplikacja do

63
00:04:33,480 --> 00:04:37,230
tworzenia reakcji daje nam progresywn aplikacj internetow po wyjciu z pudeka,

64
00:04:37,260 --> 00:04:43,230
co najmniej bardzo podstawow i daje nam to manifest. plik json, w ktrym moemy zdefiniowa

65
00:04:43,230 --> 00:04:45,630
niektre metadane dotyczce naszej aplikacji.

66
00:04:45,630 --> 00:04:48,150
Interesujcym dla nas jest ten folder

67
00:04:48,270 --> 00:04:53,150
rdowy, tutaj dostajemy kilka plikw i s to waciwie pliki, nad ktrymi

68
00:04:53,240 --> 00:04:56,310
bdziemy pracowa, to jest waciwie nasza aplikacja reagowania.

69
00:04:56,580 --> 00:04:58,380
Najwaniejszy dla

70
00:04:58,380 --> 00:05:06,540
nas teraz, indeks. Plik js uzyskuje dostp do tego elementu gwnego w naszej domenie, w naszym pliku html, wic element

71
00:05:06,540 --> 00:05:12,000
z identyfikatorem root, ktry oczywicie jest tym div, ktry widzielimy w indeksie. plik html, ten i

72
00:05:12,000 --> 00:05:20,500
tam, jak wida, renderuje nasz aplikacj reagujc za pomoc metody renderowania.

73
00:05:20,850 --> 00:05:29,940
Teraz mamy referencj do jakiego obiektu aplikacji lub elementu, ktry importujemy z pliku aplikacji, rozszerzenia. js jest pominity, poniewa jest automatycznie dodawany przez nasz przepyw

74
00:05:30,060 --> 00:05:36,480
pracy i jeli przyjrzymy si tej aplikacji. W zwizku z tym, wanie tutaj widzimy nasz pierwszy

75
00:05:36,480 --> 00:05:38,290
i

76
00:05:38,290 --> 00:05:45,870
jedyny komponent reagowania, ktry mamy teraz w tym projekcie pocztkowym.

77
00:05:45,870 --> 00:05:47,010
Tutaj widzimy niektre JSX, a nastpnie zanurkujemy gboko w to, co widzimy tutaj dokadnie w nastpnych wykadach.

78
00:05:47,070 --> 00:05:53,580
Pki co, usumy ca zawarto tego pakujcego div, a po

79
00:05:53,880 --> 00:06:01,210
prostu dodajmy tutaj tag h1, w ktrym powiem, e jestem aplikacj

80
00:06:01,240 --> 00:06:12,010
reagowania, zamknijmy to oczywicie, a potem uratujmy to, to zawsze wane, don Nie zapomnij zapisa swoich plikw.

81
00:06:12,010 --> 00:06:15,200
Teraz, odkd masz ju zacz, to

82
00:06:15,240 --> 00:06:21,400
automatycznie uruchomi ponown kompilacj i powinno automatycznie ponownie zaadowa twoj stron, dlatego

83
00:06:21,580 --> 00:06:27,130
powiniene teraz zobaczy Cze Jestem aplikacj reagowania zamiast starej zawartoci.

84
00:06:27,190 --> 00:06:28,960
Dziki temu moemy rwnie usun to logo. Plik svg, poniewa nie uywamy go

85
00:06:29,050 --> 00:06:35,380
ju w naszym projekcie, a teraz mamy troch szczuplejszego folderu rdowego.

86
00:06:35,380 --> 00:06:38,850
Co jeszcze stworzya dla nas aplikacja reagowania?

87
00:06:38,860 --> 00:06:42,040
Daa nam t aplikacj. plik css, ktry zasadniczo definiuje niektre style, ktrych uywamy w tej aplikacji. Plik js, chocia powiem, e nie

88
00:06:42,070 --> 00:06:48,640
s one objte zakresem

89
00:06:48,640 --> 00:06:52,660
tego pliku, s to nadal globalne stylizacje i

90
00:06:52,660 --> 00:07:00,370
faktycznie usun wszystko z tej pierwszej definicji klasy aplikacji w tym pliku i zapisz j pniej. Otrzymujemy rwnie indeks. plik css, ktry stosuje style na caym wiecie i co powinno by uywane w niektrych oglnych konfiguracjach, jak tutaj

91
00:07:00,370 --> 00:07:07,240
w przypadku treci naszej aplikacji.

92
00:07:07,240 --> 00:07:14,540
Usuga registerServiceWorker. Plik js jest jak nazwa wskazuje wane dla rejestracji pracownika usug, ktry jest generowany automatycznie, ktry jest zwizany

93
00:07:14,660 --> 00:07:20,020
z t progresywn aplikacj internetow, ktr

94
00:07:20,260 --> 00:07:22,290
otrzymalimy po wyjciu z pudeka.

95
00:07:22,300 --> 00:07:26,490
Bdzie to zasadniczo pre-cache naszych plikw

96
00:07:26,560 --> 00:07:30,180
skryptw, nie musimy nic tutaj konfigurowa. A plik testowy, c, zajmiemy si testowaniem w dalszej czci kursu, w

97
00:07:30,220 --> 00:07:34,160
zasadzie pozwala nam tworzy testy jednostkowe dla

98
00:07:34,290 --> 00:07:36,880
rnych jednostek, na przykad komponentw w naszej aplikacji.

99
00:07:36,880 --> 00:07:44,380
To jest oglna konfiguracja i dla wikszoci tego kursu bdziemy pracowa w aplikacji. js lub inne nowe komponenty,

100
00:07:44,410 --> 00:07:51,670
ktre tworzymy.

101
00:07:51,670 --> 00:07:52,630
Mwic o

102
00:07:52,630 --> 00:07:58,260
tym, przeanalizujmy ten plik, poznajmy skadni, ktr tam widzimy, pozbdmy si tego importu

103
00:07:58,390 --> 00:08:01,990
logo, poniewa usuwamy teraz plik logo, ktry widz, i

104
00:08:01,990 --> 00:08:08,530
zanurzmy si w JSX, co to dokadnie jest i jak dodajemy wicej komponenty do naszej aplikacji.

105
00:08:08,530 --> 00:08:09,730
&nbsp;

