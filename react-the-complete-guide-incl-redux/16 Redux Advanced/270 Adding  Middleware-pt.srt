1
00:00:02,150 --> 00:00:08,930
Antes de mergulhar em executar cdigo assncrono, deixe-me mergulhar em um conceito super importante e avanado que

2
00:00:08,930 --> 00:00:10,740
temos ao trabalhar com redux.

3
00:00:10,850 --> 00:00:18,200
E com isso eu sempre quero dizer que X para empacotar por conta prpria seja conectado a sua reao ou no.

4
00:00:18,470 --> 00:00:21,370
Voc pode adicionar o middleware diretamente.

5
00:00:21,380 --> 00:00:28,270
Entre sua ao sendo despachada e chegando ao produtor,  aqui que voc pode adicionar middleware.

6
00:00:28,350 --> 00:00:35,480
Agora voc pode no saber o que  o middleware se seu colaborador do lado do servidor tenha trabalhado

7
00:00:35,480 --> 00:00:43,490
com o Express chicest. Por exemplo, voc pode ter uma idia, embora o middleware basicamente seja um termo usado para funes

8
00:00:43,570 --> 00:00:51,180
ou um cdigo geral que voc engata em um processo que ento  executado como parte de esse processo sem interromp-lo.

9
00:00:51,230 --> 00:00:57,320
Ento, podemos adicionar o middleware e a ao ainda chegar ao produtor depois disso, mas pode

10
00:00:57,560 --> 00:01:03,860
fazer algo com essa ao antes que ele atinja o produtor que pode estar simplesmente registrando algo.

11
00:01:04,040 --> 00:01:10,040
Mas isso se tornar importante mais tarde quando quisermos executar um cdigo sncrono.

12
00:01:10,280 --> 00:01:17,260
Ento, por enquanto, vejamos o middleware em ao adicionando-o ao nosso projeto para mostrar como o middleware funciona.

13
00:01:17,270 --> 00:01:18,650
Deixe-me entrar no ndice.

14
00:01:18,720 --> 00:01:22,440
Sim, siga a seguir onde realmente criamos a loja.

15
00:01:22,910 --> 00:01:30,050
 neste momento que tambm podemos adicionar middleware ao projeto e, claro,

16
00:01:30,050 --> 00:01:33,270
precisamos aprender exatamente a fazer isso.

17
00:01:33,320 --> 00:01:35,750
Antes de tudo, precisamos de um middleware.

18
00:01:35,990 --> 00:01:42,470
Como eu disse malware neste caso, aqui  apenas um pedao de cdigo especificamente uma funo.

19
00:01:42,530 --> 00:01:44,670
Agora vou criar meu prprio middleware aqui.

20
00:01:44,720 --> 00:01:48,770
Mais tarde, adicionaremos middleware fornecidos pelos nossos provedores.

21
00:01:48,770 --> 00:01:54,310
Eu quero que voc crie um middleware simples que simplesmente bloqueie cada ao ou ns emitimos.

22
00:01:54,320 --> 00:01:57,590
Ento, o que eu quero fazer  alterar uma nova constante e eu vou nome-la.

23
00:01:57,630 --> 00:02:02,570
Logger este ser o nome do meu middleware para dizer, claro, o nome do

24
00:02:02,570 --> 00:02:06,700
contedo  totalmente para voc como sempre distend toma uma funo.

25
00:02:06,830 --> 00:02:10,060
E usarei a sintaxe de seis Eros.

26
00:02:10,480 --> 00:02:18,230
Ele conseguir armazenar como uma entrada de baixo para o caso porque em breve usamos um mtodo especfico fornecido pelo

27
00:02:18,230 --> 00:02:21,330
redux para conectar nosso prprio middleware para armazenar.

28
00:02:21,500 --> 00:02:29,010
E este mtodo fornecido pelo redux acabar por executar nossa funo de middleware e nos dar a histria.

29
00:02:29,180 --> 00:02:38,170
Agora, a funo body off  uma funo ciente que parece que devolvemos outra funo.

30
00:02:38,360 --> 00:02:42,540
Ento, isso pode ser confuso, mas essa funo simplesmente retorna outra funo.

31
00:02:42,540 --> 00:02:47,930
Tudo bem, nossa funo na sintaxe da funo de seta E-6  essa.

32
00:02:47,960 --> 00:02:52,690
Nossa funo receber o prximo argumento.

33
00:02:52,820 --> 00:02:58,580
Voc pode nomear este argumento o que quiser, mas depois faz sentido porque esta ser uma

34
00:02:58,580 --> 00:03:04,360
funo que voc pode executar para permitir que a ao continue sua jornada at o redutor.

35
00:03:04,370 --> 00:03:10,210
Voc pode saber sua prxima funo se voc  um desenvolvedor expresso experiente.

36
00:03:10,310 --> 00:03:19,100
Ento, esta funo que  retornada aqui tambm ser executada pelo redux e o fim funcionar ento e agora ele realmente

37
00:03:19,210 --> 00:03:24,190
se torna um pouco confuso, mas esse funcional tambm retorna uma funo.

38
00:03:24,200 --> 00:03:30,170
O ltimo, porm, que receber a ao que voc enviou como entrada.

39
00:03:30,170 --> 00:03:33,640
Mais uma vez, esta funo tambm ser executada para voc.

40
00:03:33,740 --> 00:03:38,230
Ento, esta festa de funo aninhada aqui  simplesmente um middleware.

41
00:03:38,230 --> 00:03:45,140
Agora, dentro dessa funo interna que recebe a ao, tambm podemos acessar uma loja e esta prxima funo.

42
00:03:45,140 --> 00:03:46,870
E, claro, a ao em si.

43
00:03:47,000 --> 00:03:52,600
E aqui podemos agora executar o cdigo que queremos executar entre a ao e o redutor.

44
00:03:52,610 --> 00:03:57,270
Ento, aqui, todos adicionam um middleware perguntado pelo mercado de declaraes de bloqueio.

45
00:03:57,290 --> 00:04:01,520
Ento,  s para ns, para que possamos ver rapidamente de onde isso vem.

46
00:04:01,520 --> 00:04:10,670
E eles dizem que vou despachar e vou imprimir a ao l depois que eu executarei a seguir.

47
00:04:10,790 --> 00:04:12,380
E aqui  importante.

48
00:04:12,440 --> 00:04:19,610
a ao continue a ser reduzida, porm para que possamos ter sucesso, precisamos passar a ao como um argumento.

49
00:04:19,610 --> 00:04:20,860
Isso permitir que

50
00:04:20,870 --> 00:04:26,030
Agora, isso  importante porque, em teoria, tambm pode mudar essa ao aqui no meio onde temos

51
00:04:26,420 --> 00:04:27,410
acesso a ela.

52
00:04:27,440 --> 00:04:28,750
Ns entendemos isso como um argumento.

53
00:04:28,790 --> 00:04:33,650
Podemos mudar o tipo de curso que devemos fazer com cautela porque voc pode quebrar nossa aplicao

54
00:04:33,950 --> 00:04:35,390
ou pior do que isso.

55
00:04:35,390 --> 00:04:38,990
Podemos implementar comportamentos inesperados.

56
00:04:38,990 --> 00:04:42,530
Ento, aqui vou chamar o prximo ampacity de uma ao modificada.

57
00:04:42,530 --> 00:04:51,740
A coisa legal  que agora posso armazenar o resultado dessa chamada, que eu precisarei para retornar essa funo interna para que

58
00:04:51,740 --> 00:04:53,920
eu gire os resultados aqui.

59
00:04:54,080 --> 00:04:57,730
Agora, entre esses dois passos, posso registrar outra coisa.

60
00:04:57,740 --> 00:05:04,140
Ento, log de log da consola um passo de bloqueio relacionado ao middleware aqui e a.

61
00:05:04,170 --> 00:05:10,820
Eu terei meu prximo estado para que eu possa simplesmente chamar o estado da loja, porque eu tenho acesso  minha loja.

62
00:05:10,820 --> 00:05:12,540
Ns o conseguimos na funo externa.

63
00:05:12,540 --> 00:05:16,130
 a loja X normal que voc aprende tem que obter o estado do Methot.

64
00:05:16,320 --> 00:05:19,450
Ento, claro, posso chamar isso tambm no middleware.

65
00:05:19,860 --> 00:05:24,140
Ento, esta rvore de funes est no final, o que  executado.

66
00:05:24,180 --> 00:05:28,220
Tudo isso  feito pela Reducto, no precisamos chamar nenhuma dessas funes.

67
00:05:28,230 --> 00:05:32,230
Tudo o que temos a fazer  aplicar este modelo atento  nossa loja.

68
00:05:32,460 --> 00:05:34,510
Ento, como fazemos isso.

69
00:05:34,560 --> 00:05:38,730
Em primeiro lugar, precisamos importar algo da Rydex.

70
00:05:38,730 --> 00:05:45,960
Ento, aqui, os lados combinam redutores todos empregados aplicam a disfuno do middleware, pois os nomes dos bas

71
00:05:46,230 --> 00:05:49,540
nos permitem adicionar nosso prprio middleware para distorcer.

72
00:05:50,010 --> 00:05:53,240
Ento, aqui e crie a loja onde inicializamos a loja.

73
00:05:53,340 --> 00:05:55,110
Podemos adicionar mais argumentos.

74
00:05:55,200 --> 00:06:01,270
E o segundo argumento aqui pode ser um chamado intensificador.

75
00:06:01,290 --> 00:06:05,720
Agora, esta e sua resposta no so seno um middleware, por exemplo.

76
00:06:05,760 --> 00:06:13,550
Ento, aqui podemos chamar de middleware de aplicao e agora podemos passar a nossa constante logger que mantm esta rvore

77
00:06:13,560 --> 00:06:20,350
de funes que acontece ser um executvel de middleware vlido por redox para aplicar middleware e, portanto, conectar

78
00:06:20,340 --> 00:06:21,510
isso  loja.

79
00:06:21,810 --> 00:06:24,050
E isso j est tudo aqui.

80
00:06:24,150 --> 00:06:28,750
E, na verdade, voc pode passar uma lista de middleware aqui para aplicar o middleware.

81
00:06:28,830 --> 00:06:33,820
Eles sero executados em ordem, ento, s temos um.

82
00:06:33,870 --> 00:06:38,910
Ento, vamos salvar isso e depois executar o NPM comear a iniciar este projeto.

83
00:06:38,910 --> 00:06:44,400
Isso deve permitir-nos ainda usar o projeto perguntar antes, mas devemos obter uma sada adicional

84
00:06:44,400 --> 00:06:46,350
aqui  direita no console.

85
00:06:46,740 --> 00:06:51,680
Ento, aqui, clicamos no incremento, vemos duas leis aqui.

86
00:06:51,720 --> 00:06:55,700
O primeiro  o registro de despacho onde vemos a ao que despachamos.

87
00:06:55,890 --> 00:06:58,170
Esse  o objeto javascript que enviamos.

88
00:06:58,170 --> 00:07:04,080
o prximo estado onde vemos o estado atualizado e, claro, acontece para cada ao que despachamos.

89
00:07:04,530 --> 00:07:06,010
E o segundo 

90
00:07:06,030 --> 00:07:08,390
Ento, este  o nosso middleware em ao.

91
00:07:08,460 --> 00:07:14,140
Agora,  claro, no meio onde j pode ser bom fazer exatamente esse registro do seu estado e

92
00:07:14,140 --> 00:07:16,820
ver onde est bem o que est acontecendo agora.

93
00:07:16,830 --> 00:07:23,960
Um caso de uso mais til para um middleware deve ser visto mais tarde, quando realmente manipulamos o cdigo assncrono.

94
00:07:24,270 --> 00:07:29,660
Mas primeiro eu quero manter essa idia de obter algumas informaes sobre esse estado.

95
00:07:29,790 --> 00:07:34,440
Seria bom para depurar se pudssemos sempre olhar para a loja.

96
00:07:34,590 --> 00:07:40,050
mais do que isso, mesmo que no envissemos nada, poderamos ainda olhar para a histria atual.

97
00:07:40,050 --> 00:07:42,020
Ento, se tivssemos algum registro, mas

98
00:07:42,090 --> 00:07:45,370
Vamos dar uma olhada no que pode nos ajudar com isso na prxima palestra.

