1
00:00:02,340 --> 00:00:05,630
Ahora reestructuramos nuestras acciones en la ltima conferencia.

2
00:00:05,640 --> 00:00:10,410
Ahora quiero sumergirme en lo que realmente ponemos en los creadores de accin.

3
00:00:10,440 --> 00:00:12,990
Obviamente es fcil para el cdigo asincrnico.

4
00:00:13,020 --> 00:00:18,720
El nico lugar donde podemos ejecutar cdigo asncrono est en nuestro creador de ecciones.

5
00:00:18,810 --> 00:00:23,700
Es para lo que est hecho el funk redux y es el patrn comn y de mejores prcticas.

6
00:00:23,790 --> 00:00:29,820
Debe comunicarse con un servidor para obtener datos de l y, a continuacin, almacenarlo en su tienda.

7
00:00:29,940 --> 00:00:35,580
Definitivamente hazlo con el creador de la accin, enva tu solicitud de HTP aqu en lugar de dicho tiempo de espera y una vez

8
00:00:35,580 --> 00:00:37,860
que la respuesta est all, la respuesta ser la mirada.

9
00:00:37,890 --> 00:00:42,780
Gurdelo en su tienda lo ver como una accin en el proyecto del curso, por supuesto.

10
00:00:42,890 --> 00:00:51,010
Sin embargo, por supuesto, puede poner mucha ms lgica en sus creadores de accin pensar en el mismo resultado.

11
00:00:51,120 --> 00:00:57,300
Guardamos nuestro resultado, lo tomamos como argumento y simplemente devolvemos una accin donde lo transmitimos

12
00:00:57,300 --> 00:00:58,390
como carga til.

13
00:00:58,410 --> 00:01:00,930
Ahora este es un creador de eccin muy seco.

14
00:01:00,930 --> 00:01:05,940
No hace nada ms que solo devolver el objeto con la respuesta sin cambios.

15
00:01:05,940 --> 00:01:07,260
Resultado disclpeme.

16
00:01:07,260 --> 00:01:15,700
es crear una constante, tal vez darle un nombre al resultado actualizado y luego un resultado igual a dos por igual.

17
00:01:15,720 --> 00:01:17,960
Ahora, obviamente, lo que podramos hacer

18
00:01:17,970 --> 00:01:24,720
Ahora, obviamente, eso no tiene mucho sentido aqu, pero tericamente podemos alterar todo lo que quieras

19
00:01:24,720 --> 00:01:28,310
aqu y podras tener transformaciones que tengan ms sentido.

20
00:01:28,470 --> 00:01:36,690
Tal vez queremos actualizar algunas ideas, queremos agregar un nombre de usuario y luego transmitimos nuestro resultado actualizado.

21
00:01:36,690 --> 00:01:39,770
El caso es que esto sucede al ahorrar aos.

22
00:01:39,780 --> 00:01:40,960
Lo tendr en mente.

23
00:01:41,280 --> 00:01:49,620
Nuestra aplicacin todava funciona para una tienda que almacenamos 20 porque actualizamos su asalto

24
00:01:49,620 --> 00:01:51,470
multiplicndolo por dos.

25
00:01:51,480 --> 00:01:54,110
Ahora tenemos lgica en el creador de acciones.

26
00:01:54,180 --> 00:01:58,970
Y esta podra ser una lgica vlida en lugar de una operacin sin sentido como esta.

27
00:01:58,980 --> 00:02:03,160
Lo que pasa es que por supuesto tambin puedes ejecutar la misma lgica.

28
00:02:03,180 --> 00:02:07,700
As que permtanme reformular esto al estado previo de simplemente pasar la respuesta.

29
00:02:07,860 --> 00:02:13,440
Podra ejecutar esa misma lgica si necesita transformar los datos antes de almacenarlos en

30
00:02:13,440 --> 00:02:15,680
el estado que perfectamente podra suceder.

31
00:02:15,840 --> 00:02:20,210
Puedes ejecutar esa misma lgica, por supuesto, en tu reductor aqu.

32
00:02:20,340 --> 00:02:21,670
Almacenar resultado.

33
00:02:21,900 --> 00:02:25,750
Aqu concatenamos el resultado y almacenamos el valor.

34
00:02:25,780 --> 00:02:30,650
Ahora, obviamente, nada nos impide multiplicar esto con dos aqu.

35
00:02:30,720 --> 00:02:33,990
Si lo hago con ellos en su reductor de asalto.

36
00:02:34,020 --> 00:02:38,870
Ahora, si guardo 10, almacenamos 20 en la tienda como puede ver.

37
00:02:38,940 --> 00:02:41,620
Pero ahora lo cambiamos en un lugar totalmente diferente.

38
00:02:41,640 --> 00:02:43,310
Lo cambiamos en el reductor.

39
00:02:43,350 --> 00:02:49,470
Ahora, como dije, esta operacin aqu podra no tener mucho sentido, pero a menudo habr casos en los

40
00:02:49,470 --> 00:02:53,190
que realmente desee cambiar algo antes de almacenarlos en el estado.

41
00:02:53,310 --> 00:02:56,950
No siempre obtienes el valor que solo quieres transmitir.

42
00:02:57,030 --> 00:03:00,190
Dnde deberas cambiarlo Denne en el reductor?

43
00:03:00,300 --> 00:03:09,180
Como te muestro aqu, por supuesto tambin puedes ejecutar algn cdigo antes de devolver tus datos de cambio o cualquier creador

44
00:03:09,180 --> 00:03:10,000
de acciones.

45
00:03:10,140 --> 00:03:13,550
Como te mostr antes, lo que coment.

46
00:03:13,980 --> 00:03:15,570
Ambas obras.

47
00:03:15,600 --> 00:03:18,020
Lo mejor es echar un vistazo ms de cerca.

48
00:03:18,720 --> 00:03:23,030
Al final, la pregunta se reduce a dnde poner la lgica.

49
00:03:23,070 --> 00:03:27,670
Ahora tenemos creadores y productores reales como opciones.

50
00:03:27,690 --> 00:03:35,270
Los creadores de acciones, como ya aprendi, son excelentes para ejecutar cdigo asncrono cuando despacha una

51
00:03:35,280 --> 00:03:44,240
accin. Los reductores de Yaverland solo pueden ejecutar cdigo sncrono y son entradas puras en reductores de estado actualizados.

52
00:03:44,240 --> 00:03:50,740
Sin embargo, tenga en cuenta que son el lugar donde actualiza el estado.

53
00:03:50,740 --> 00:03:59,030
Este es un concepto redux de ncleo, los creadores de accin son el concepto redux de Natcore, un concepto central de nuestras acciones.

54
00:03:59,180 --> 00:04:05,930
DS celoso de los objetos con un tipo y una carga, por lo que los reductores del concepto bsico y la

55
00:04:05,930 --> 00:04:12,980
idea detrs de redux es que el reductor es lo nico que actualiza el estado de accin que los creadores no deben

56
00:04:12,980 --> 00:04:14,460
prepararse para la etapa demasiado.

57
00:04:14,460 --> 00:04:19,940
Por esa razn, porque debera ser el reductor el que realiza la actualizacin pero, por

58
00:04:19,940 --> 00:04:27,090
supuesto, existe una diferencia entre actualizar el estado, lo que bsicamente significa devolver un nuevo objeto que constituye nuestro

59
00:04:27,080 --> 00:04:30,910
estado y cambiar los datos que entran en el estado.

60
00:04:31,220 --> 00:04:35,370
An as puedes encontrar argumentos para ambas direcciones.

61
00:04:35,390 --> 00:04:42,770
Me inclino por poner la lgica en el reductor y no demasiada lgica en el creador de la accin.

62
00:04:42,770 --> 00:04:49,010
El cdigo asncrono tiene que ir all, pero una vez que haya recuperado los datos del

63
00:04:49,010 --> 00:04:55,860
servidor que posiblemente necesite alcanzar, puede, por supuesto, transformarlos en el Creador de acciones, y debe hacerlo

64
00:04:56,540 --> 00:05:03,970
en cierta medida, pero una vez que obtenga los datos que son relativamente limpio, debe entregrselo al productor.

65
00:05:04,130 --> 00:05:09,980
Y si todava necesita manipularlo, por ejemplo, tomando 8 veces o algo as en

66
00:05:09,980 --> 00:05:12,910
mi opinin, eso debera ir al reductor.

67
00:05:13,100 --> 00:05:18,620
Ahora tambin encontrars argumentos para el otro lado y, al final, es tu decisin

68
00:05:18,620 --> 00:05:21,660
si eliges un enfoque, pero no lo cambies.

69
00:05:21,800 --> 00:05:27,860
No pongas mucha lgica en un creador de acciones simplemente no tienes mucha lgica y un nmero reductor.

70
00:05:27,920 --> 00:05:35,120
Sea consistente y decida dnde quiere transformar y prepare su creador de direccin de datos o educar

71
00:05:35,120 --> 00:05:36,960
o recomiendo lo ltimo.

72
00:05:36,980 --> 00:05:38,640
Pero finalmente depende de ti.

73
00:05:38,750 --> 00:05:40,460
Solo toma una ruta consistente.

