1
00:00:02,240 --> 00:00:07,110
No ltimo vdeo, apresentamos alguns criadores de ao sncrona.

2
00:00:07,310 --> 00:00:13,670
Agora, quer aproveit-los para lidar com o cdigo assncrono e para lidar com o cdigo assncrono, precisamos

3
00:00:13,670 --> 00:00:16,660
adicionar um middleware especial ao nosso projeto redux.

4
00:00:16,730 --> 00:00:24,130
Uma biblioteca de terceiros que podemos adicionar chamada redux phunk aqui estou na pgina Get up, simplesmente, google para redox

5
00:00:24,140 --> 00:00:29,630
funk Ripp como essa para encontr-lo aqui, voc pode encontrar mais instrues sobre isso.

6
00:00:29,630 --> 00:00:36,740
Geralmente, esta  uma biblioteca que, como acabei de dizer, adiciona um middleware ao seu projeto

7
00:00:36,740 --> 00:00:45,740
que permite que suas aes no sejam onde seus criadores reais sejam precisos para no retornar a ao em si,

8
00:00:45,740 --> 00:00:52,460
mas retornam uma funo que acabar por despachar uma ao com este pequeno truque.

9
00:00:52,550 --> 00:00:57,390
Nadra agitando a ao em si, mas uma funo que depois enviar uma.

10
00:00:57,410 --> 00:01:05,910
Podemos executar cdigo assncrono porque, eventualmente, despachamos uma parte  a parte que pode ser executada de forma assncrona.

11
00:01:05,900 --> 00:01:08,500
Vai ficar mais claro uma vez que adicionamos.

12
00:01:08,570 --> 00:01:15,160
Ento, para adicion-lo, vamos pausar ou vamos parar o NPM start e vamos instalar um novo pacote

13
00:01:15,170 --> 00:01:21,460
com o NPH instalado dash dash, salve o nome como lido X dash phunk escrito assim.

14
00:01:21,530 --> 00:01:24,410
Agora com isso isso ser transferido e armazenado.

15
00:01:24,440 --> 00:01:29,800
Como sempre, podemos ento registr-lo como um middleware para o nosso projeto.

16
00:01:29,810 --> 00:01:33,580
Instrues detalhadas sempre podem ser encontradas e ns obtemos uma pgina,  claro.

17
00:01:33,590 --> 00:01:34,670
L voc v isso.

18
00:01:34,670 --> 00:01:39,790
Depois de instal-lo no final, acabamos de adicionar com o middleware Apply.

19
00:01:40,130 --> 00:01:47,330
Ento, voltemos aos nossos chips de ndice, onde criamos a loja e adicionamos middleware e

20
00:01:47,330 --> 00:01:49,880
agora importa este novo pacote.

21
00:01:50,020 --> 00:01:59,010
Ento importe algo da funo redox e que algo possa ser encontrado em sua pgina.

22
00:01:59,030 --> 00:02:01,710
Eles realmente tm exportaes padro e ns no.

23
00:02:01,740 --> 00:02:05,180
Igualmente braadeiras podemos dar qualquer nome que desejemos.

24
00:02:05,180 --> 00:02:08,420
Eu vou ficar com Phunk, mas voc pode renomear isso para o que quiser.

25
00:02:08,540 --> 00:02:11,490
Este pacote essencialmente apenas explora o middleware.

26
00:02:11,660 --> 00:02:13,250
Agora isso j  um middleware.

27
00:02:13,280 --> 00:02:19,550
Ento, nos bastidores, parece com o nosso costume com a palavra algumas chamadas de funo aninhadas e,

28
00:02:19,550 --> 00:02:21,530
portanto, podemos adicion-lo agora aqui.

29
00:02:21,560 --> 00:02:22,720
Agora aplique middleware.

30
00:02:22,810 --> 00:02:23,670
Eu vou adicion-lo.

31
00:02:23,780 --> 00:02:30,520
Aps o phunk mais longo Ento, um objeto acabamos de importar essa funo para ser preciso.

32
00:02:30,680 --> 00:02:36,260
executar o tempo limite dos sets e somente aps 2 segundos queremos armazenar o resultado.

33
00:02:36,440 --> 00:02:44,780
Ento, desta vez com o que foram adicionados com que podemos voltar para nossos criadores reais e o SJS real cair e vamos

34
00:02:44,810 --> 00:02:47,660
dizer que o resultado da loja realmente queremos

35
00:02:47,660 --> 00:02:56,000
Ento, aqui, nesta funo que  executada de alguma forma, queremos retornar essa ao aps dois segundos para simular

36
00:02:56,000 --> 00:03:03,230
que anteriormente ou antes dessa ao alcanamos um servidor para armazen-lo e atualizamos o nosso estado uma

37
00:03:03,320 --> 00:03:10,160
vez que isso foi bem sucedido por exemplo agora com o pai com a configurao atual

38
00:03:10,160 --> 00:03:11,710
aqui, isso no funcionar.

39
00:03:12,040 --> 00:03:19,460
Mas com o middleware Phunk adicione-o o que podemos fazer  que podemos mudar, fazemos declarao de retorno aqui e vou coloc-lo bem

40
00:03:19,460 --> 00:03:23,560
na frente desse tempo moldvel ir limpar o resto aqui em breve.

41
00:03:23,810 --> 00:03:29,480
Ento, vou adicionar uma nova declarao de retorno, na verdade, que retornar uma funo que  importante.

42
00:03:29,480 --> 00:03:31,910
Agora voc pode usar novamente a palavra-chave da funo.

43
00:03:31,910 --> 00:03:36,980
Esta funo recebe despacho como argumento para a ao de despacho.

44
00:03:36,980 --> 00:03:39,000
Agora recebemos despacho aqui.

45
00:03:39,190 --> 00:03:47,510
Devido ao redux func, eu disse que o middleware funciona entre o envio de uma ao eo ponto de tempo em

46
00:03:47,510 --> 00:03:49,800
que a ao atinge o produtor.

47
00:03:50,120 --> 00:03:56,150
Agora, o que fazemos aqui  que ainda enviamos uma ao, mas, em seguida, a Rydex Phunk, o

48
00:03:56,300 --> 00:03:59,470
middleware vem em etapas, tem acesso  ao l.

49
00:03:59,720 --> 00:04:06,530
Basicamente bloqueia a ao antiga que poderamos dizer e envi-la novamente no futuro.

50
00:04:06,530 --> 00:04:13,790
Agora, o novo X alcanar o produtor, mas o redux func pode esperar porque pode enviar

51
00:04:13,790 --> 00:04:15,890
uma ao do que quiser.

52
00:04:15,890 --> 00:04:21,860
Esta  a parte assncrona e isso est exatamente nos permitindo executar algum cdigo assncrono

53
00:04:21,860 --> 00:04:22,930
dentro dessa funo.

54
00:04:22,980 --> 00:04:29,360
E, claro, tambm podemos usar a boa sintaxe de erro ESX antiga aqui como esta.

55
00:04:29,570 --> 00:04:36,850
Ento o cdigo dentro desta funo de despacho aqui  executado e agora dentro do tempo limite estabelecido.

56
00:04:36,890 --> 00:04:45,500
para definir tempo limite, podemos executar este patch para agora despachar qualquer ao que desejemos despachar.

57
00:04:45,650 --> 00:04:47,480
Dentro dessa funo passada

58
00:04:47,480 --> 00:04:55,090
Agora,  claro, trataramos um loop infinito se voltar a despachar o resultado da loja aqui ou o criador de ao.

59
00:04:55,550 --> 00:05:02,030
Ento, o que normalmente fazemos  criar criadores de ao assncronos que a India despacha

60
00:05:02,030 --> 00:05:03,680
aes criadas por sinnimos.

61
00:05:03,680 --> 00:05:10,180
Ento, o que vou fazer  criar rapidamente um novo criador de ection e export-lo ou reivindic-lo para salvar o resultado.

62
00:05:10,210 --> 00:05:17,420
Isso ainda ser o criador de aes como o tivemos antes de receber o resultado e eles esto retornando a

63
00:05:17,780 --> 00:05:21,780
ao que usamos anteriormente com o resultado do tipo de loja.

64
00:05:23,220 --> 00:05:28,740
Papai  meu criador de ao de sincronizao no resultado da loja.

65
00:05:28,750 --> 00:05:37,440
No entanto, agora envio exatamente esse criador de ao de assalto Savery que me devolve essa ao que atualiza o

66
00:05:37,530 --> 00:05:42,960
estado e a loja porque  a ao do tipo que manipulamos

67
00:05:42,960 --> 00:05:43,990
no redutor.

68
00:05:44,040 --> 00:05:47,370
Agora, antes de ver isso em ao, o que deve tornar o fluxo mais claro.

69
00:05:47,640 --> 00:05:53,580
H uma coisa que temos que ter em mente aqui assalto no assaltado quando devolvemos essa funo, que ser

70
00:05:53,580 --> 00:05:59,310
executada pelo redux funk e onde estabelecemos tempo para fora, onde o dentista corrigiu a ao que deveria

71
00:05:59,310 --> 00:06:01,940
funcionar de forma sncrona e atualizar a histria.

72
00:06:02,190 --> 00:06:09,130
executar o assalto Savery, que  esse criador de ao como uma funo de curso e repita.

73
00:06:09,150 --> 00:06:09,780
Precisamos

74
00:06:09,780 --> 00:06:13,480
Portanto, no reto depois da carga til para a loja com a morte.

75
00:06:13,500 --> 00:06:20,910
Certifique-se de salvar todas as quedas incluindo o contador apenas cair e, em seguida, vamos reiniciar o NPM para ver se

76
00:06:20,910 --> 00:06:21,790
isso funciona.

77
00:06:21,840 --> 00:06:31,190
E tambm ver o fluxo de eventos em nossas ferramentas redox dev para que o aplicativo carregado ainda possamos manipular nossa loja de

78
00:06:31,190 --> 00:06:34,780
bebidas com efeito de contra efeito ou assalto aqui.

79
00:06:35,000 --> 00:06:40,760
Voc v que demorou dois segundos para realmente imprimir o resultado da loja.

80
00:06:40,880 --> 00:06:42,250
Agora, isso  interessante.

81
00:06:42,320 --> 00:06:44,840
Voc nunca viu este outro criador de ection.

82
00:06:44,840 --> 00:06:48,350
Temos que definir tempo no interior dele leva a qualquer sada.

83
00:06:48,480 --> 00:06:54,010
Resultado da loja de fatos, nada acontece imediatamente somente aps dois segundos, o resultado da C-store.

84
00:06:54,210 --> 00:07:00,830
Ento, apenas a ao despachada l depois de dois segundos deixa uma pegada porque  nossa

85
00:07:00,830 --> 00:07:08,900
ao sncrona e apenas aes sncronas podem ser adicionadas para armazenar os outros criadores de ao como o resultado

86
00:07:08,930 --> 00:07:11,630
da loja que executa algum cdigo assncrono.

87
00:07:11,780 --> 00:07:16,410
Nosso nico possvel youtoo redux func e so capturados entre eles.

88
00:07:16,670 --> 00:07:18,760
Eles nunca chegam ao redutor.

89
00:07:18,800 --> 00:07:27,050
Ns apenas os usamos como um passo de utilidade intermedirio para executar nosso cdigo assncrono que  necessrio para executar

90
00:07:27,050 --> 00:07:33,860
em muitas aes e, em seguida, despachou uma ao sncrona para alterar o estado na loja.

91
00:07:33,860 --> 00:07:36,150
Uma vez que estamos certos de que sabemos o que fazer l.

92
00:07:36,170 --> 00:07:41,780
Assim, uma vez que o nosso cdigo assncrono tenha terminado, por isso, ns o vemos aqui

93
00:07:42,190 --> 00:07:49,160
no console, bastante interessante, onde ns temos o nosso middleware logger para ficar claro que voc ver que ns obtemos

94
00:07:49,280 --> 00:07:56,630
mais resultados, porque o registro mais longo de tudo o que atinge o funil de ao e isso inclui o nosso

95
00:07:56,630 --> 00:08:03,820
funo que  retornada pela ao assncrona que nunca adicionamos este estado aqui, porm porque isso  bloqueado pelo redux func.

96
00:08:03,890 --> 00:08:11,890
Ento,  assim que podemos trabalhar com criadores de ao para lidar com cdigo assncrono em nossa loja redux.

