1
00:00:02,150 --> 00:00:08,930
Antes de sumergirnos en la ejecucin de cdigo asncrono, permtanme sumergirme en un concepto avanzado muy importante que

2
00:00:08,930 --> 00:00:10,740
tenemos cuando trabajamos con redux.

3
00:00:10,850 --> 00:00:18,200
Y con eso siempre me refiero a que X empaquetar por s mismo, que est conectado a su reaccin o no.

4
00:00:18,470 --> 00:00:21,370
Puede agregar middleware a la derecha.

5
00:00:21,380 --> 00:00:28,270
Entre su accin enviada y llegando al productor, aqu es donde puede agregar middleware.

6
00:00:28,350 --> 00:00:35,480
Ahora es posible que no sepa qu es el middleware si su desarrollador del lado del servidor ha

7
00:00:35,480 --> 00:00:43,490
trabajado con Express chicest. Por ejemplo, podra tener una idea aunque middleware es bsicamente un trmino utilizado para funciones o

8
00:00:43,570 --> 00:00:51,180
un cdigo general que engancha en un proceso que luego se ejecuta como parte de ese proceso sin detenerlo.

9
00:00:51,230 --> 00:00:57,320
As que podemos agregar middleware y la accin seguir llegando al productor a partir de entonces, pero

10
00:00:57,560 --> 00:01:03,860
puede hacer algo con esa accin antes de que llegue al productor que simplemente puede registrar algo.

11
00:01:04,040 --> 00:01:10,040
Pero eso se volver importante ms adelante cuando queremos ejecutar un cdigo sincrnico.

12
00:01:10,280 --> 00:01:17,260
As que, por ahora, vamos a ver el middleware en accin al agregarlo a nuestro proyecto para mostrarle cmo funciona el middleware.

13
00:01:17,270 --> 00:01:18,650
Djame entrar al ndice.

14
00:01:18,720 --> 00:01:22,440
S, sigue el siguiente punto donde creamos la tienda.

15
00:01:22,910 --> 00:01:30,050
Es en este momento que tambin podemos agregar middleware al proyecto y, por supuesto,

16
00:01:30,050 --> 00:01:33,270
tenemos que aprender a hacerlo exactamente.

17
00:01:33,320 --> 00:01:35,750
Primero que nada, necesitamos un middleware.

18
00:01:35,990 --> 00:01:42,470
Como dije en este caso, el malware es solo una pieza de cdigo especficamente una funcin.

19
00:01:42,530 --> 00:01:44,670
Ahora crear mi propio middleware aqu.

20
00:01:44,720 --> 00:01:48,770
Ms tarde agregaremos middleware provisto por nuestros proveedores.

21
00:01:48,770 --> 00:01:54,310
Quiero que crees un middleware simple que simplemente bloquea cada accin o emitimos.

22
00:01:54,320 --> 00:01:57,590
Entonces, lo que quiero hacer es alterar una nueva constante y la nombrar.

23
00:01:57,630 --> 00:02:02,570
Logger este ser el nombre de mi middleware, por lo que, por supuesto, el nombre del

24
00:02:02,570 --> 00:02:06,700
contenido depende totalmente de ti, ya que siempre el distendido toma una funcin.

25
00:02:06,830 --> 00:02:10,060
Y usar la sintaxis de Eros.

26
00:02:10,480 --> 00:02:18,230
Se almacenar como una entrada til para el caso, porque pronto usaremos un mtodo especfico proporcionado por redux para

27
00:02:18,230 --> 00:02:21,330
conectar nuestro propio middleware a la tienda.

28
00:02:21,500 --> 00:02:29,010
Y este mtodo provisto por redux eventualmente ejecutar nuestra funcin de middleware y nos dar la historia.

29
00:02:29,180 --> 00:02:38,170
Ahora el cuerpo de la funcin desactivada tiene una funcin consciente que parece que devolvimos otra funcin.

30
00:02:38,360 --> 00:02:42,540
Entonces eso puede ser confuso pero esta funcin simplemente devuelve otra funcin.

31
00:02:42,540 --> 00:02:47,930
De acuerdo, nuestra funcin en la sintaxis de la funcin de flecha E-6 es esto.

32
00:02:47,960 --> 00:02:52,690
Nuestra funcin recibir el siguiente argumento.

33
00:02:52,820 --> 00:02:58,580
Puedes ponerle nombre a este argumento como quieras pero luego tiene sentido porque ser una

34
00:02:58,580 --> 00:03:04,360
funcin que puedes ejecutar para permitir que la accin contine su viaje hasta el reductor.

35
00:03:04,370 --> 00:03:10,210
Es posible que conozca su prxima funcin si es un desarrollador rpido experimentado.

36
00:03:10,310 --> 00:03:19,100
Entonces, esta funcin que se devuelve aqu tambin ser ejecutada por redux y el final funciona entonces y ahora realmente

37
00:03:19,210 --> 00:03:24,190
se vuelve un poco confuso pero este funcional tambin devuelve una funcin.

38
00:03:24,200 --> 00:03:30,170
El ltimo que recibir la accin que enviaste como entrada.

39
00:03:30,170 --> 00:03:33,640
De nuevo, esta funcin tambin se ejecutar para usted.

40
00:03:33,740 --> 00:03:38,230
Entonces, esta funcin anidada aqu es simplemente un middleware.

41
00:03:38,230 --> 00:03:45,140
Ahora, dentro de esa funcin interna que recibe la accin, tambin podemos acceder a una tienda y a esta prxima funcin.

42
00:03:45,140 --> 00:03:46,870
Y, por supuesto, la accin en s misma.

43
00:03:47,000 --> 00:03:52,600
Y aqu ahora podemos ejecutar el cdigo que queremos ejecutar entre la accin y el reductor.

44
00:03:52,610 --> 00:03:57,270
As que aqu todos aaden un middleware pedido de mercado de declaracin de bloqueo.

45
00:03:57,290 --> 00:04:01,520
As que eso es solo para nosotros para que podamos ver rpidamente de dnde viene esto.

46
00:04:01,520 --> 00:04:10,670
Y ellos dirn despachar y imprimir la accin all despus de que ejecutar la prxima.

47
00:04:10,790 --> 00:04:12,380
Y aqu es importante.

48
00:04:12,440 --> 00:04:19,610
que la accin contine siendo reducida, aunque para que eso tenga xito necesitamos pasar la accin como argumento.

49
00:04:19,610 --> 00:04:20,860
Esto ahora permitir

50
00:04:20,870 --> 00:04:26,030
Ahora eso es importante porque tericamente tambin podras cambiar esa accin aqu en el medio donde tenemos

51
00:04:26,420 --> 00:04:27,410
acceso a ella.

52
00:04:27,440 --> 00:04:28,750
Lo tenemos como argumento.

53
00:04:28,790 --> 00:04:33,650
Podramos cambiar el tipo de curso que debemos hacer con precaucin porque puede romper nuestra

54
00:04:33,950 --> 00:04:35,390
aplicacin o peor que eso.

55
00:04:35,390 --> 00:04:38,990
Podemos implementar comportamientos inesperados.

56
00:04:38,990 --> 00:04:42,530
As que aqu llamar a la siguiente ampacidad una accin modificada.

57
00:04:42,530 --> 00:04:51,740
Lo bueno es que ahora puedo almacenar el resultado de esta llamada que necesitar para devolver esta funcin interna, por lo

58
00:04:51,740 --> 00:04:53,920
que dar los resultados aqu.

59
00:04:54,080 --> 00:04:57,730
Ahora, entre estos dos pasos, puedo registrar algo ms.

60
00:04:57,740 --> 00:05:04,140
Entonces, el registro de la consola registra un paso de bloqueo relacionado con el middleware aqu y all.

61
00:05:04,170 --> 00:05:10,820
Tendr mi prximo estado, as que simplemente puedo llamar a la tienda estado porque tengo acceso a mi tienda.

62
00:05:10,820 --> 00:05:12,540
Lo conseguimos en la funcin externa.

63
00:05:12,540 --> 00:05:16,130
Es la tienda X normal que aprendes tiene que obtener el estado Methot.

64
00:05:16,320 --> 00:05:19,450
As que, por supuesto, tambin puedo llamar eso en el middleware.

65
00:05:19,860 --> 00:05:24,140
Entonces, este rbol de funciones es al final lo que se ejecuta.

66
00:05:24,180 --> 00:05:28,220
Todo eso lo hace Reducto, no tenemos que llamar a ninguna de estas funciones.

67
00:05:28,230 --> 00:05:32,230
Todo lo que tenemos que hacer es aplicar este modelo a nuestra tienda.

68
00:05:32,460 --> 00:05:34,510
Entonces cmo hacemos eso.

69
00:05:34,560 --> 00:05:38,730
Antes que nada necesitamos importar algo de Rydex.

70
00:05:38,730 --> 00:05:45,960
Entonces, aqu los lados combinan los reductores, todos los empleados aplican la disfuncin del middleware, ya que los nombres de los

71
00:05:46,230 --> 00:05:49,540
cofres nos permiten agregar nuestro propio middleware para distorsionar.

72
00:05:50,010 --> 00:05:53,240
Entonces aqu y crea la tienda donde inicializamos la tienda.

73
00:05:53,340 --> 00:05:55,110
Podemos agregar ms argumentos.

74
00:05:55,200 --> 00:06:01,270
Y el segundo argumento aqu puede ser un llamado potenciador.

75
00:06:01,290 --> 00:06:05,720
Ahora bien, esta y su respuesta no son ms que un middleware, por ejemplo.

76
00:06:05,760 --> 00:06:13,550
As que aqu podemos llamar a aplicar middleware y ahora podemos pasar nuestra constante logger que contiene este rbol de funciones

77
00:06:13,560 --> 00:06:20,350
que resulta ser un ejecutable de middleware vlido por redox para aplicar middleware y, por lo tanto, conectar eso

78
00:06:20,340 --> 00:06:21,510
a la tienda.

79
00:06:21,810 --> 00:06:24,050
Y esto ya est todo aqu.

80
00:06:24,150 --> 00:06:28,750
Y en realidad puede pasar una lista de middleware aqu para aplicar middleware.

81
00:06:28,830 --> 00:06:33,820
Se ejecutarn en orden, entonces aqu solo tenemos uno.

82
00:06:33,870 --> 00:06:38,910
Guardemos esto y luego ejecutemos el inicio de NPM para comenzar este proyecto.

83
00:06:38,910 --> 00:06:44,400
Esto debera permitirnos seguir usando el proyecto preguntar antes, pero deberamos obtener resultados adicionales aqu

84
00:06:44,400 --> 00:06:46,350
a la derecha en la consola.

85
00:06:46,740 --> 00:06:51,680
Entonces aqu hacemos clic en incrementar, vemos dos Lawks aqu.

86
00:06:51,720 --> 00:06:55,700
El primero es el registro de despacho donde vemos la accin que despachamos.

87
00:06:55,890 --> 00:06:58,170
Ese es el objeto javascript que enviamos.

88
00:06:58,170 --> 00:07:04,080
prximo estado en el que vemos el estado actualizado y eso, por supuesto, sucede para cada accin que despachamos.

89
00:07:04,530 --> 00:07:06,010
Y el segundo es el

90
00:07:06,030 --> 00:07:08,390
Entonces este es nuestro middleware en accin.

91
00:07:08,460 --> 00:07:14,140
Ahora, por supuesto, el medio donde ya puede ser bueno hacer exactamente eso, registrar su estado

92
00:07:14,140 --> 00:07:16,820
y ver dnde est el pozo ahora.

93
00:07:16,830 --> 00:07:23,960
Un caso de uso ms til para un middleware se ver ms adelante cuando manejemos el cdigo asncrono.

94
00:07:24,270 --> 00:07:29,660
Pero primero quiero seguir con esta idea de obtener algunos conocimientos sobre este estado.

95
00:07:29,790 --> 00:07:34,440
Sera bueno para la depuracin si siempre pudiramos mirar en la tienda.

96
00:07:34,590 --> 00:07:40,050
pero ms que eso, incluso si simplemente no enviamos nada, podramos seguir investigando la historia actual.

97
00:07:40,050 --> 00:07:42,020
Entonces, si tuviramos algo de registro,

98
00:07:42,090 --> 00:07:45,370
Echemos un vistazo a lo que puede ayudarnos con eso en la prxima conferencia.

