1
00:00:02,190 --> 00:00:07,490
W ostatnim wykadzie mwiem o tym, gdzie umieci logik transformacji danych.

2
00:00:07,950 --> 00:00:15,270
Teraz na tej samej stronie, jeli wybrano lata twrcw akcji i kad metod uytkow, ktr warto

3
00:00:15,270 --> 00:00:17,460
pozna podczas pracy z Funk's.

4
00:00:17,460 --> 00:00:25,320
Tak wic z asynchronicznym kodem obsugiwanym przez redux phunk, na przykad nasz atak sklepu tutaj zwracamy funkcj, ktra

5
00:00:25,560 --> 00:00:31,410
pobiera wiadomo przekazan do niej jako argument przez redux phunk, ktry moemy wywoa,

6
00:00:31,410 --> 00:00:40,370
aby wywoa akcj po tym, jak nasz kod asynchroniczny zostanie wykonany rzeczywicie odczytuje x funkcja przekazuje jako dodatkowy stan pobrania argumentu.

7
00:00:40,710 --> 00:00:45,360
Jest to metoda, ktr moemy wykona, aby uzyska biecy stan.

8
00:00:45,370 --> 00:00:52,830
Czasami w swoim asynchronicznym kodzie musisz by w stanie dotrze do stanu sprzed

9
00:00:52,830 --> 00:00:54,220
wysania do dziaania.

10
00:00:54,480 --> 00:01:01,170
Powiedzmy, e chcesz zapisa niektre dane dla danego uytkownika i masz pomys, e uytkownik jest przechowywany w

11
00:01:01,170 --> 00:01:05,450
twoim stanie Giudecca, a nastpnie moesz go pobra ze stanem get.

12
00:01:05,460 --> 00:01:13,880
Na przykad tutaj moemy uzyska stary licznik, wykonujc tutaj stan get, a dostp do stanu get counter

13
00:01:13,910 --> 00:01:20,550
counter daje nam peny stan, ktry oczywicie ma waciwo Count lub dokadno, poniewa nasze

14
00:01:20,550 --> 00:01:24,320
reduktory tworz stan i mamy dwa z nich.

15
00:01:24,600 --> 00:01:31,050
Moemy uzyska licznik tak, jak w kontenerze licznikowym w stanie mapy do wniosku, musimy uzyska dostp do

16
00:01:31,050 --> 00:01:33,700
miasta naszego licznika, abymy mogli to zrobi.

17
00:01:33,700 --> 00:01:42,890
Twoja kropka CPR nasz licznik w twrcy akcji dziki drugiemu argumentowi przekazanemu przez

18
00:01:42,890 --> 00:01:44,060
redux phunk.

19
00:01:44,120 --> 00:01:47,840
Teraz ten stary licznik moe by tutaj wyprowadzony.

20
00:01:49,110 --> 00:01:52,850
Stary kontuar i widziaem, e mam tam literwk.

21
00:01:53,660 --> 00:01:54,710
Naprawmy to.

22
00:01:55,100 --> 00:01:58,390
Wic teraz to zapisaem i zapisuj wynik.

23
00:01:59,160 --> 00:02:05,500
Faktycznie dostaj moj star liczb lub wydrukuj, e jeste po prawej stronie w konsoli, niebieski 10 tutaj.

24
00:02:05,550 --> 00:02:13,290
To stary licznik, ktry pojawia si tu przed wysaniem tego zdarzenia, ktre nastpnie

25
00:02:13,300 --> 00:02:16,030
prowadzi do dekodowania w reduktorze.

26
00:02:16,110 --> 00:02:20,480
Teraz jest to zwizane z tym, co powiedziaem na ostatnim wykadzie.

27
00:02:20,910 --> 00:02:23,710
Jeli jest to potrzebne, jest to dobra funkcja uytecznoci.

28
00:02:23,790 --> 00:02:25,690
Nie naduywaj tego jednak.

29
00:02:26,010 --> 00:02:34,130
Staraem si pisa moich twrcw akcji i producentw w taki sposb, e nie musz uywa zamiast tego stanu.

30
00:02:34,350 --> 00:02:41,820
Moesz przekaza do niego wszystkie potrzebne dane w swoim kreatorze akcji asynchronicznych, takim jak identyfikator uytkownika, przyjmujc

31
00:02:41,820 --> 00:02:43,400
go jako argument.

32
00:02:43,470 --> 00:02:48,810
Oznacza to oczywicie, e musisz mie dostp do potrzebnych danych oraz do twrcy akcji

33
00:02:48,810 --> 00:02:52,820
i kontenera, w ktrym faktycznie wysyasz akcj prowadzc do twrcy akcji.

34
00:02:52,980 --> 00:02:57,450
A wic historia jest solidna, co prowadzi do stworzenia akcji asynchronicznej.

35
00:02:57,450 --> 00:03:02,000
Tutaj musielibymy przekaza ten identyfikator uytkownika lub cokolwiek to jest i nie yjemy.

36
00:03:02,100 --> 00:03:06,500
Oczywicie musimy mie dostp do tego identyfikatora uytkownika w naszym kontenerze.

37
00:03:06,690 --> 00:03:11,830
Ale jest to co, czego moglibymy si spodziewa i powinnimy odpowiednio zbudowa nasz aplikacj.

38
00:03:11,850 --> 00:03:17,700
Jeli nie moesz tego zrobi lub nie chcesz, otrzymasz stan jako awari i moesz uy opcji dodawania.

39
00:03:17,910 --> 00:03:19,580
Tylko nie naduywaj tego.

40
00:03:19,590 --> 00:03:25,690
Nie umieszczaj tam zbyt wiele logiki, przynajmniej jest to droga, ktr bior w moich wikszych aplikacjach do ponownego dziaania.

