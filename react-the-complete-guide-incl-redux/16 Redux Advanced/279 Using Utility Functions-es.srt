1
00:00:02,230 --> 00:00:10,120
Entonces, a lo largo de este mdulo aprender mucho sobre las cosas avanzadas que puede hacer con Rydex, especialmente con los creadores

2
00:00:10,120 --> 00:00:17,000
de acciones y las cosas de middleware Arkie, ya que nos permiten ejecutar un cdigo asncrono al despachar nuestras acciones.

3
00:00:17,030 --> 00:00:22,070
Ahora quiero sumergirme en el conjunto de reductores avanzados.

4
00:00:22,150 --> 00:00:23,640
En este momento tenemos dos rechazadoras.

5
00:00:23,680 --> 00:00:30,340
Es un poco avanzado porque ya lo dividimos y usamos reductores combinados, pero el introductor todava tiene

6
00:00:30,340 --> 00:00:37,150
una declaracin de conmutacin relativamente larga e incluso al dividir los reductores en mltiples archivos, es probable que

7
00:00:37,150 --> 00:00:43,060
todava tenga declaraciones de conmutador relativamente largas para el introductor al menos si maneja ms

8
00:00:43,060 --> 00:00:44,160
de dos acciones

9
00:00:44,620 --> 00:00:48,730
Por lo tanto, la limpieza que reduzca un poco ms a Rafal puede ser una idea.

10
00:00:48,850 --> 00:00:51,630
Y digo que puede ser, no es obligatorio.

11
00:00:51,700 --> 00:00:52,990
Es opcional

12
00:00:52,990 --> 00:00:55,500
Es una buena prctica que dira.

13
00:00:55,660 --> 00:00:57,820
Pero no tienes que hacerlo.

14
00:00:57,880 --> 00:01:03,970
Sin embargo, quiero mostrarte algunas maneras de limpiar estos reductores paso a paso para terminar

15
00:01:03,970 --> 00:01:05,800
con un reductor muy limpio.

16
00:01:05,800 --> 00:01:08,270
De nuevo, lo que te muestro es opcional.

17
00:01:08,680 --> 00:01:12,950
Entonces, lo primero que podemos hacer est relacionado con la inmutabilidad.

18
00:01:13,330 --> 00:01:18,740
Constantemente actualizamos un objeto aqu al final cada vez que devolvemos un nuevo estado.

19
00:01:18,940 --> 00:01:26,470
Lo que hacemos es simplemente devolver un objeto actualizado, devolvemos un objeto que copia las propiedades del

20
00:01:26,470 --> 00:01:30,570
estado anterior y luego reemplaza una de las propiedades.

21
00:01:30,910 --> 00:01:37,570
Ahora, obviamente, podemos hacerlo de esta manera, pero podramos crear funciones de utilidad para la deuda y

22
00:01:37,570 --> 00:01:38,960
lo mismo para actualizar.

23
00:01:38,970 --> 00:01:46,800
Erase does nos permitira llamar a esta funcin de utilidad y guardar aqu un cdigo.

24
00:01:46,840 --> 00:01:47,960
Cmo podra ser esto?

25
00:01:48,070 --> 00:01:49,290
Bueno, djame mostrarte.

26
00:01:49,420 --> 00:01:57,700
Para eso, crear un nuevo archivo al que dar un nombre de utilidad y lo almacenar en la carpeta de la tienda.

27
00:01:57,700 --> 00:02:02,760
Podras almacenarlo en la carpeta de reductores pero no quiero tener esto para Looked como si fuera un productor.

28
00:02:03,040 --> 00:02:07,010
Y podras guardarlo en alguna otra carpeta, pero lo usar solo en redux.

29
00:02:07,060 --> 00:02:09,440
Entonces, para m, la carpeta de la tienda suena genial.

30
00:02:10,300 --> 00:02:14,600
Todos crean una funcin con el estilo de funcin E-6.

31
00:02:14,680 --> 00:02:21,940
De modo que crear una constante que contenga una funcin al final que nombrar el objeto de actualizacin esta

32
00:02:22,180 --> 00:02:27,440
funcin nuevamente usando la sintaxis de la flecha E6 y espera dos argumentos.

33
00:02:27,550 --> 00:02:36,700
El objeto antiguo que quiero copiar y actualizar y los valores actualizados en esta funcin.

34
00:02:36,900 --> 00:02:40,220
Simplemente quiero hacer lo que hice anteriormente en mi reductor.

35
00:02:40,440 --> 00:02:43,310
Quiero devolver el objeto actualizado.

36
00:02:43,350 --> 00:02:48,520
Entonces copie 1 y regrselo en mi funcin de utilidad aqu.

37
00:02:48,610 --> 00:02:56,640
En primer lugar, tengo que distribuir las propiedades de mi antiguo objeto, as que crear un nuevo objeto con todas las propiedades

38
00:02:56,640 --> 00:02:59,700
y valores antiguos del objeto dentro de l.

39
00:03:00,000 --> 00:03:03,080
Y luego hay algunas partes que probablemente se actualizarn.

40
00:03:03,270 --> 00:03:07,880
Ahora, aqu saba que sera el contador del reductor dado del que saqu esto.

41
00:03:08,010 --> 00:03:15,810
Aqu hay valores actualizados y valores actualizados que al final podran ser solo un objeto javascript con todos los

42
00:03:15,810 --> 00:03:17,450
valores que quiero anular.

43
00:03:17,640 --> 00:03:20,780
Entonces, toda la distribucin obtiene valores actualizados.

44
00:03:20,940 --> 00:03:24,840
As que espero que los valores actualizados sean un objeto Java aqu.

45
00:03:24,840 --> 00:03:28,800
Esta es mi funcin de utilidad para actualizar un objeto.

46
00:03:28,800 --> 00:03:33,740
Ahora djame mostrarte cmo podras usarlo en el archivo counter js.

47
00:03:33,750 --> 00:03:35,240
Todo importado

48
00:03:35,450 --> 00:03:42,710
Importar algo y ahora pasar a la utilidad que acaba de caer y lo que importo.

49
00:03:42,750 --> 00:03:47,010
Por supuesto, como mi actualizacin y yo deberamos exportarlo.

50
00:03:47,020 --> 00:03:55,440
Por lo tanto, permtanme agregar una declaracin de exportacin para que algo que deseo importar sea la funcin de mi objeto

51
00:03:56,040 --> 00:04:02,000
de actualizacin. Luego puedo usar eso para reemplazarlo bsicamente cada vez que deseo actualizar algo.

52
00:04:02,250 --> 00:04:09,300
Entonces, en mi reductor, simplemente devuelvo una llamada para actualizar el objeto donde pas un estado como el antiguo y

53
00:04:10,140 --> 00:04:12,760
luego me opongo con todas las propiedades nuevas.

54
00:04:12,810 --> 00:04:19,150
MIKE HAYES objeta con la propiedad del contador donde el nuevo valor es contador de estado menos valor de accin.

55
00:04:19,560 --> 00:04:27,240
todo lo que toma el estado y luego un objeto javascript donde actualizamos el contador y necesito pasar un objeto

56
00:04:27,240 --> 00:04:34,580
javascript porque distribuir los valores de este objeto a travs del objeto viejo copiado en mi funcin de utilidad.

57
00:04:34,580 --> 00:04:40,320
Y ahora es un poco ms gil que esta funcin de utilidad pueda hacer esto

58
00:04:41,190 --> 00:04:44,690
para todos nuestros casos, as que hasta Optik cura

59
00:04:44,710 --> 00:04:48,770
Permtanme hacer esto rpidamente para todos los otros usos aqu tambin.

60
00:04:48,780 --> 00:04:58,080
Para todos los casos promedio, siempre actualice el estado y pase un objeto javascript con las propiedades actualizadas.

61
00:04:58,320 --> 00:05:06,960
As que, finalmente, la ltima vez que tengo que hacer esto est aqu en mi incremento. Mefford all utilizo el enfoque

62
00:05:07,020 --> 00:05:09,680
ms largo de actualizar mi estado previamente.

63
00:05:09,750 --> 00:05:16,940
Ahora todo es un enfoque muy breve y resumido de simplemente devolver el objeto de actualizacin que se devuelve all.

64
00:05:17,010 --> 00:05:19,640
Quiero incrementar el contador as que el ltimo.

65
00:05:20,010 --> 00:05:26,070
Guardemos rpidamente todos los archivos, incluido el nuevo archivo de utilidades japes, y veamos si funciona

66
00:05:26,070 --> 00:05:27,810
haciendo clic en 10 detrimento.

67
00:05:28,050 --> 00:05:30,660
Todo parece funcionar, por lo que nuestra aplicacin funciona.

68
00:05:30,690 --> 00:05:34,450
Preguntar antes tambin puede almacenar lo que ve.

69
00:05:34,590 --> 00:05:36,740
Pero ahora estamos usando la funcin de utilidad.

70
00:05:36,870 --> 00:05:40,470
Entonces, con qu estamos utilizando actualizar objeto de forma conveniente.

71
00:05:40,590 --> 00:05:42,600
Bien, todos son objetos.

72
00:05:42,600 --> 00:05:44,530
Vamos a hacer la actualizacin.

73
00:05:44,550 --> 00:05:49,940
El uso de objetos se implementa en el resultado J como Falzone reductor de aberant.

74
00:05:50,170 --> 00:06:01,420
As que importe el objeto de actualizacin para AUM y ahora tambin avance a la utilidad James fall y luego usemos los objetos de

75
00:06:01,420 --> 00:06:02,610
actualizacin aqu tambin.

76
00:06:02,810 --> 00:06:10,520
Para devolver un objeto de actualizacin donde pasamos el estado de estado para ser objeto actualizado y luego simplemente

77
00:06:10,520 --> 00:06:14,780
un objeto de JavaScript con las propiedades que deben actualizarse.

78
00:06:15,200 --> 00:06:22,940
Y nos permite entonces deshacernos del viejo cdigo que tenamos all y usarlo ms corto y lo mismo

79
00:06:22,940 --> 00:06:26,110
por supuesto tambin para eliminar el resultado.

80
00:06:26,120 --> 00:06:28,390
Ahora all estoy siempre actualizando una matriz.

81
00:06:28,430 --> 00:06:33,950
No escribir una funcin de utilidad para la deuda ya que la actualizacin de una matriz depende en gran medida de lo que hacemos

82
00:06:33,950 --> 00:06:34,650
con una matriz.

83
00:06:34,880 --> 00:06:39,590
Agregar un nuevo elemento funciona con la eliminacin de concat con la carpeta, por ejemplo.

84
00:06:39,620 --> 00:06:44,770
Por lo tanto, no es tan fcil como con el objeto y la funcin de utilidad no tiene mucho

85
00:06:44,780 --> 00:06:45,710
sentido por esa razn.

86
00:06:45,980 --> 00:06:48,450
Pero todava actualizamos un objeto aqu al final.

87
00:06:48,560 --> 00:06:50,580
Siempre hacemos con devolver un nuevo estado.

88
00:06:50,810 --> 00:06:56,950
Entonces, obtenemos el estado anterior y luego queremos anular los resultados con nuestra matriz actualizada.

89
00:06:57,080 --> 00:07:02,230
Pasemos esto en el objeto javascript del segundo argumento con eso.

90
00:07:02,330 --> 00:07:03,350
Ahorremos todo eso.

91
00:07:03,360 --> 00:07:05,320
Veamos tambin a los muertos en accin ahora.

92
00:07:05,660 --> 00:07:07,130
As que todo esto parece funcionar.

93
00:07:07,140 --> 00:07:08,490
Guardemos el resultado.

94
00:07:09,280 --> 00:07:11,130
Tambin funciona borrando tambin funciona.

95
00:07:11,260 --> 00:07:12,520
As que se ve bien.

96
00:07:12,520 --> 00:07:18,730
El objeto de actualizacin tiene una buena funcin de utilidad que podemos agregar para hacer que nuestros reductores sean un poco ms magros?

