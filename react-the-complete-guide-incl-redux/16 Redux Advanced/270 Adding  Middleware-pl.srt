1
00:00:02,150 --> 00:00:08,930
Zanim zanurkujemy w uruchamianie asynchronicznego kodu, pozwlcie mi zanurzy si w super wan zaawansowan koncepcj, ktr mamy

2
00:00:08,930 --> 00:00:10,740
przy pracy z reduxem.

3
00:00:10,850 --> 00:00:18,200
I zawsze mam na myli to, e X samemu si pakuje, czy to poczone z twoj reakcj, czy nie.

4
00:00:18,470 --> 00:00:21,370
Moesz doda do niego oprogramowanie porednie.

5
00:00:21,380 --> 00:00:28,270
Pomidzy wysaniem akcji a jej dotarciem do producenta jest to miejsce, w ktrym mona doda oprogramowanie porednie.

6
00:00:28,350 --> 00:00:35,480
Teraz moesz nie wiedzie, jakie jest oprogramowanie porednie, jeli twj programista po stronie serwera pracowa z

7
00:00:35,480 --> 00:00:43,490
Express chicest. Na przykad moesz mie pomys, chocia oprogramowanie poredniczce zasadniczo jest terminem uywanym dla funkcji lub oglnego

8
00:00:43,570 --> 00:00:51,180
kodu, ktry czy si z procesem, ktry nastpnie jest wykonywany jako cz ten proces bez zatrzymywania go.

9
00:00:51,230 --> 00:00:57,320
Tak wic moemy doda oprogramowanie porednie, a dziaanie bdzie nadal docierao do producenta, ale moe

10
00:00:57,560 --> 00:01:03,860
zrobi co z t akcj, zanim dotrze do producenta, ktry moe po prostu zarejestrowa co.

11
00:01:04,040 --> 00:01:10,040
Ale to wszystko stanie si wane pniej, kiedy chcemy wykona synchroniczny kod.

12
00:01:10,280 --> 00:01:17,260
Na razie zobaczmy oprogramowanie porednie w dziaaniu, dodajc je do naszego projektu, aby pokaza, jak dziaa oprogramowanie porednie.

13
00:01:17,270 --> 00:01:18,650
Pozwl mi przej do indeksu.

14
00:01:18,720 --> 00:01:22,440
Tak, postpuj zgodnie ze wskazwkami tam, gdzie faktycznie tworzymy sklep.

15
00:01:22,910 --> 00:01:30,050
W tym momencie moemy rwnie doda oprogramowanie porednie do projektu i oczywicie

16
00:01:30,050 --> 00:01:33,270
musimy si nauczy, jak to zrobi.

17
00:01:33,320 --> 00:01:35,750
Przede wszystkim potrzebujemy oprogramowania poredniego.

18
00:01:35,990 --> 00:01:42,470
Jak ju powiedziaem, zoliwe oprogramowanie w tym przypadku jest tylko fragmentem kodu, konkretnie funkcj.

19
00:01:42,530 --> 00:01:44,670
Teraz utworz tutaj wasne oprogramowanie poredniczce.

20
00:01:44,720 --> 00:01:48,770
Pniej dodamy oprogramowanie porednie dostarczone przez naszych dostawcw.

21
00:01:48,770 --> 00:01:54,310
Chc, aby utworzy proste oprogramowanie porednie, ktre po prostu blokuje kad akcj lub wydamy.

22
00:01:54,320 --> 00:01:57,590
Wic chc zmieni now sta i nazwa j.

23
00:01:57,630 --> 00:02:02,570
Logger to bdzie nazwa mojego middleware, wic oczywicie nazwa zawartoci

24
00:02:02,570 --> 00:02:06,700
zaley wycznie od Ciebie, poniewa zawsze distend przyjmuje funkcj.

25
00:02:06,830 --> 00:02:10,060
I bd uywa skadni szeciu Eros.

26
00:02:10,480 --> 00:02:18,230
Bdzie si zapisywa jako dane wejciowe dla przypadku, poniewa wkrtce uyjemy okrelonej metody dostarczonej przez redux, aby

27
00:02:18,230 --> 00:02:21,330
podczy nasze wasne oprogramowanie porednie do sklepu.

28
00:02:21,500 --> 00:02:29,010
A ta metoda dostarczona przez redux w kocu wykona nasz funkcj middleware i opowie nam histori.

29
00:02:29,180 --> 00:02:38,170
Teraz funkcja body off jest uwiadomiona, funkcja, ktra wyglda tak, e zwracamy inn funkcj.

30
00:02:38,360 --> 00:02:42,540
Moe to by mylce, ale ta funkcja po prostu zwraca inn funkcj.

31
00:02:42,540 --> 00:02:47,930
W porzdku to nasza funkcja w skadni funkcji strzaki E-6.

32
00:02:47,960 --> 00:02:52,690
Nasza funkcja otrzyma nastpny argument.

33
00:02:52,820 --> 00:02:58,580
Moesz nazwa ten argument, jak chcesz, ale ma to sens, poniewa bdzie

34
00:02:58,580 --> 00:03:04,360
to funkcja, ktr moesz wykona, aby akcja kontynuowaa swoj podr do reduktora.

35
00:03:04,370 --> 00:03:10,210
Moesz zna jego nastpn funkcj, jeli jeste dowiadczonym deweloperem ekspresowym.

36
00:03:10,310 --> 00:03:19,100
Ta funkcja, ktra zostanie tu zwrcona, bdzie rwnie wykonywana przez redux, a koniec dziaa wtedy i teraz naprawd

37
00:03:19,210 --> 00:03:24,190
staje si nieco mylcy, ale funkcja ta zwraca rwnie funkcj.

38
00:03:24,200 --> 00:03:30,170
Ten ostatni, ktry otrzyma akcj, ktr wysae jako dane wejciowe.

39
00:03:30,170 --> 00:03:33,640
Ponownie ta funkcja zostanie rwnie wykonana dla ciebie.

40
00:03:33,740 --> 00:03:38,230
Wic ta strona z zagniedonymi funkcjami tutaj jest po prostu oprogramowaniem poredniczcym.

41
00:03:38,230 --> 00:03:45,140
Teraz wewntrz tej wewntrznej funkcji, ktra otrzymuje akcj, moemy uzyska dostp do sklepu i tej nastpnej funkcji.

42
00:03:45,140 --> 00:03:46,870
I oczywicie sama akcja.

43
00:03:47,000 --> 00:03:52,600
I tutaj moemy teraz wykona kod, ktry chcemy uruchomi pomidzy akcj i reduktorem.

44
00:03:52,610 --> 00:03:57,270
Wic tutaj dodaj komunikat o bdzie rynkowym zapyta middleware.

45
00:03:57,290 --> 00:04:01,520
To tylko dla nas, abymy mogli szybko sprawdzi, skd to pochodzi.

46
00:04:01,520 --> 00:04:10,670
I mwi, e wysyam, a wydrukuj akcj po tym, jak wykonam nastpn.

47
00:04:10,790 --> 00:04:12,380
I tutaj jest wane.

48
00:04:12,440 --> 00:04:19,610
Pozwoli to teraz ograniczy dziaanie, ale eby to si udao, musimy przekaza akcj

49
00:04:19,610 --> 00:04:20,860
jako argument.

50
00:04:20,870 --> 00:04:26,030
To wane, poniewa teoretycznie moesz zmieni t akcj tutaj, w rodku, gdzie mamy

51
00:04:26,420 --> 00:04:27,410
do niej dostp.

52
00:04:27,440 --> 00:04:28,750
Rozumiemy to jako argument.

53
00:04:28,790 --> 00:04:33,650
Moemy zmieni rodzaj kursu, ktry powinnimy robi, zachowujc ostrono, poniewa moesz zama

54
00:04:33,950 --> 00:04:35,390
nasz aplikacj lub gorzej.

55
00:04:35,390 --> 00:04:38,990
Moemy zaimplementowa nieoczekiwane zachowania.

56
00:04:38,990 --> 00:04:42,530
Tak wic wezw nastpn amplitud zmodyfikowan akcj.

57
00:04:42,530 --> 00:04:51,740
Fajn rzecz jest to, e mog teraz zapisa wynik tego poczenia, ktre bd potrzebowa, aby zwrci t wewntrzn funkcj,

58
00:04:51,740 --> 00:04:53,920
aby wyniki byy tutaj.

59
00:04:54,080 --> 00:04:57,730
Teraz pomidzy tymi dwoma krokami mog zalogowa co innego.

60
00:04:57,740 --> 00:05:04,140
Dlatego loguj si w dzienniku logarytmicznym krokiem zwizanym z oprogramowaniem poredniczcym tutaj i tam.

61
00:05:04,170 --> 00:05:10,820
Bd mia nastpny stan, wic mog po prostu nazwa stan "pobierz sklep", poniewa mam dostp do mojego sklepu.

62
00:05:10,820 --> 00:05:12,540
Dostajemy to w zewntrznej funkcji.

63
00:05:12,540 --> 00:05:16,130
Jest to normalny sklep X, ktrego uczysz si, aby uzyska stan Methot.

64
00:05:16,320 --> 00:05:19,450
Mog wic oczywicie to nazwa rwnie w oprogramowaniu poredniczcym.

65
00:05:19,860 --> 00:05:24,140
Tak wic to drzewo funkcyjne jest na kocu, co zostaje wykonane.

66
00:05:24,180 --> 00:05:28,220
Wszystko to robi Reducto, nie musimy wywoywa adnej z tych funkcji.

67
00:05:28,230 --> 00:05:32,230
Wszystko, co musimy zrobi, to zastosowa ten model do naszego sklepu.

68
00:05:32,460 --> 00:05:34,510
Wic jak to robimy.

69
00:05:34,560 --> 00:05:38,730
Przede wszystkim musimy zaimportowa co z Rydex.

70
00:05:38,730 --> 00:05:45,960
W zwizku z tym strony czce wszystkie uywane reduktory stosuj dysfunkcje oprogramowania poredniego, poniewa nazwy skrzynek pozwalaj

71
00:05:46,230 --> 00:05:49,540
nam na dodanie wasnego oprogramowania poredniczcego do znieksztacania.

72
00:05:50,010 --> 00:05:53,240
A wic tutaj i utwrz sklep, w ktrym zainicjalizujemy sklep.

73
00:05:53,340 --> 00:05:55,110
Moemy doda wicej argumentw.

74
00:05:55,200 --> 00:06:01,270
A drugim argumentem moe by tak zwany wzmacniacz.

75
00:06:01,290 --> 00:06:05,720
Teraz ta i jej odpowied jest niczym innym jak oprogramowaniem poredniczcym na przykad.

76
00:06:05,760 --> 00:06:13,550
Tak wic moemy nazwa zastosowanie oprogramowania poredniego, a teraz moemy przekaza sta loggera, ktra przechowuje to drzewo funkcji,

77
00:06:13,560 --> 00:06:20,350
ktre jest prawidowym oprogramowaniem poredniczcym wykonywanym przez redox, aby zastosowa oprogramowanie porednie, a zatem poczy je

78
00:06:20,340 --> 00:06:21,510
ze sklepem.

79
00:06:21,810 --> 00:06:24,050
I to ju wszystko jest tutaj.

80
00:06:24,150 --> 00:06:28,750
Waciwie moesz poda list oprogramowania poredniego, aby zastosowa oprogramowanie porednie.

81
00:06:28,830 --> 00:06:33,820
Zostan wykonane w kolejnoci, a tutaj mamy tylko jeden.

82
00:06:33,870 --> 00:06:38,910
Zapiszmy to, a nastpnie uruchom NPM, aby rozpocz ten projekt.

83
00:06:38,910 --> 00:06:44,400
Powinno to umoliwi nam dalsze korzystanie z projektu zapytaj wczeniej, ale powinnimy uzyska dodatkowe dane wyjciowe

84
00:06:44,400 --> 00:06:46,350
tutaj po prawej stronie w konsoli.

85
00:06:46,740 --> 00:06:51,680
Tutaj klikamy inkrementacj, widzimy tutaj dwa Lawki.

86
00:06:51,720 --> 00:06:55,700
Pierwszym z nich jest dziennik wysykowy, w ktrym widzimy akcj, ktr wysalimy.

87
00:06:55,890 --> 00:06:58,170
To jest obiekt javascript, ktry wysalimy.

88
00:06:58,170 --> 00:07:04,080
Drugi to kolejny stan, w ktrym widzimy zaktualizowany stan i to oczywicie dzieje si

89
00:07:04,530 --> 00:07:06,010
przy kadej wysyanej akcji.

90
00:07:06,030 --> 00:07:08,390
To jest nasze oprogramowanie porednie w dziaaniu.

91
00:07:08,460 --> 00:07:14,140
Teraz oczywicie w rodku, gdzie ju moe by mio zrobi dokadnie taki zapis swojego stanu i

92
00:07:14,140 --> 00:07:16,820
zobaczy, gdzie jest teraz to, co si dzieje.

93
00:07:16,830 --> 00:07:23,960
Bardziej przydatny przypadek uycia oprogramowania poredniego mona zobaczy pniej, gdy bdziemy obsugiwa kod asynchroniczny.

94
00:07:24,270 --> 00:07:29,660
Ale najpierw chc trzyma si tej idei, aby uzyska pewien wgld w ten stan.

95
00:07:29,790 --> 00:07:34,440
Byoby mio debugowa, gdybymy zawsze mogli zajrze do sklepu.

96
00:07:34,590 --> 00:07:40,050
Gdybymy mieli troch logowania, ale wicej, nawet jeli nie wysalibymy niczego, moglibymy

97
00:07:40,050 --> 00:07:42,020
zajrze do aktualnej historii.

98
00:07:42,090 --> 00:07:45,370
Rzumy okiem na to, co moe nam w tym pomc w nastpnym wykadzie.

