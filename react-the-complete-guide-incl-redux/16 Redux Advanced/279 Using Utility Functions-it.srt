1
00:00:02,230 --> 00:00:10,120
Quindi su questo modulo imparerai molto sulle cose avanzate che puoi fare con Rydex, in particolare i creatori di azioni e

2
00:00:10,120 --> 00:00:17,000
il middleware Arkie, dal momento che ci permettono di eseguire il codice asincrono durante l'invio delle nostre azioni.

3
00:00:17,030 --> 00:00:22,070
Ora voglio tuffarmi nel set di riduttori avanzati.

4
00:00:22,150 --> 00:00:23,640
In questo momento abbiamo due refper.

5
00:00:23,680 --> 00:00:30,340
 un po 'avanzato perch lo abbiamo gi diviso e usato i riduttori combinati, ma l'introduttore

6
00:00:30,340 --> 00:00:37,150
ha ancora un'istruzione switch relativamente lunga e anche quando si suddividono i riduttori in pi file probabilmente

7
00:00:37,150 --> 00:00:43,060
si hanno ancora istruzioni switch case relativamente lunghe per introduttore almeno se gestisce pi

8
00:00:43,060 --> 00:00:44,160
di due azioni.

9
00:00:44,620 --> 00:00:48,730
Quindi ripulire un po 'di pi Rafal pu essere un'idea.

10
00:00:48,850 --> 00:00:51,630
E dico che pu essere che non  un dovere.

11
00:00:51,700 --> 00:00:52,990
 facoltativo

12
00:00:52,990 --> 00:00:55,500
 una buona pratica direi.

13
00:00:55,660 --> 00:00:57,820
Ma tu non devi farlo.

14
00:00:57,880 --> 00:01:03,970
Voglio mostrarvi alcuni modi per ripulire questi riduttori passo dopo passo, per finire con

15
00:01:03,970 --> 00:01:05,800
un riduttore molto pulito.

16
00:01:05,800 --> 00:01:08,270
Ancora una volta quello che ti mostro  facoltativo.

17
00:01:08,680 --> 00:01:12,950
Quindi la prima cosa che possiamo fare  legata all'immutabilit.

18
00:01:13,330 --> 00:01:18,740
Aggiorniamo costantemente un oggetto qui alla fine ogni volta che restituiamo un nuovo stato.

19
00:01:18,940 --> 00:01:26,470
Quello che facciamo  semplicemente restituire un oggetto aggiornato, restituiamo un oggetto che copia le propriet

20
00:01:26,470 --> 00:01:30,570
del vecchio stato e quindi sostituisce una delle propriet.

21
00:01:30,910 --> 00:01:37,570
Ora ovviamente possiamo assolutamente farlo in questo modo, ma potremmo creare funzioni di utilit per il debito e

22
00:01:37,570 --> 00:01:38,960
lo stesso per l'aggiornamento.

23
00:01:38,970 --> 00:01:46,800
Cancellare ci consentirebbe quindi di chiamare questa funzione di utilit e di salvare un po 'di codice qui.

24
00:01:46,840 --> 00:01:47,960
Come potrebbe essere questo.

25
00:01:48,070 --> 00:01:49,290
Bene, lascia che te lo mostri

26
00:01:49,420 --> 00:01:57,700
Per questo creer un nuovo file che chiamer utility e lo memorizzer nella cartella del negozio.

27
00:01:57,700 --> 00:02:02,760
Potresti salvarlo nella cartella dei riduttori, ma non voglio averlo per Looked come se fosse un produttore.

28
00:02:03,040 --> 00:02:07,010
E potresti salvarlo in qualche altra cartella ma lo user solo in redux.

29
00:02:07,060 --> 00:02:09,440
Quindi per me la cartella del negozio sembra ottima.

30
00:02:10,300 --> 00:02:14,600
Stanno tutti creando una funzione con lo stile di funzione E-6.

31
00:02:14,680 --> 00:02:21,940
Quindi creer una costante tenendo una funzione alla fine che chiamer nuovamente l'oggetto aggiornamento di questa

32
00:02:22,180 --> 00:02:27,440
funzione usando la sintassi della freccia E6 che prevede due argomenti.

33
00:02:27,550 --> 00:02:36,700
Il vecchio oggetto che voglio copiare e aggiornare e i valori aggiornati in questa funzione.

34
00:02:36,900 --> 00:02:40,220
Voglio semplicemente fare ci che ho fatto in precedenza nel mio riduttore.

35
00:02:40,440 --> 00:02:43,310
Voglio restituire l'oggetto aggiornato.

36
00:02:43,350 --> 00:02:48,520
Quindi copia 1 e restituiscilo nella mia funzione di utilit qui.

37
00:02:48,610 --> 00:02:56,640
Prima di tutto devo distribuire le propriet del mio vecchio oggetto, quindi creer un nuovo oggetto con tutte le propriet e

38
00:02:56,640 --> 00:02:59,700
i valori dei vecchi oggetti al suo interno.

39
00:03:00,000 --> 00:03:03,080
E poi ci sono alcune parti che probabilmente aggiorneranno.

40
00:03:03,270 --> 00:03:07,880
Ora qui sapevo che sarebbe stato il contatore per il riduttore dato da cui l'ho estratto.

41
00:03:08,010 --> 00:03:15,810
Ecco i valori aggiornati e i valori aggiornati alla fine potrebbero essere solo un oggetto javascript con tutti i

42
00:03:15,810 --> 00:03:17,450
valori che voglio sovrascrivere.

43
00:03:17,640 --> 00:03:20,780
Quindi tutta la distribuzione ottiene valori aggiornati.

44
00:03:20,940 --> 00:03:24,840
Quindi mi aspetto che i valori aggiornati siano un oggetto Java qui.

45
00:03:24,840 --> 00:03:28,800
Questa  la mia funzione di utilit per aggiornare un oggetto.

46
00:03:28,800 --> 00:03:33,740
Ora lascia che ti mostri come puoi usarlo nel file counter js.

47
00:03:33,750 --> 00:03:35,240
Tutto importato

48
00:03:35,450 --> 00:03:42,710
Importer qualcosa da e ora salgo sull'utilit appena cado e qualcosa che importare.

49
00:03:42,750 --> 00:03:47,010
Ovviamente il mio aggiornamento e io dovremmo esportarlo.

50
00:03:47,020 --> 00:03:55,440
Quindi lasciatemi aggiungere una dichiarazione di esportazione, quindi qualcosa che voglio importare  la funzione oggetto di aggiornamento

51
00:03:56,040 --> 00:04:02,000
che posso usare per sostituirla sostanzialmente ogni volta che voglio aggiornare qualcosa.

52
00:04:02,250 --> 00:04:09,300
Quindi nel mio riduttore restituisco semplicemente una chiamata per aggiornare l'oggetto dove ho passato uno stato come il vecchio oggetto

53
00:04:10,140 --> 00:04:12,760
e quindi oggetto con tutte le nuove propriet.

54
00:04:12,810 --> 00:04:19,150
MIKE HAYES oggetto con la propriet counter in cui il nuovo valore  contatore di stato meno valore di azione.

55
00:04:19,560 --> 00:04:27,240
cura tutti i take dello stato e poi un oggetto javascript dove aggiorniamo il contatore e ho bisogno di passare

56
00:04:27,240 --> 00:04:34,580
un oggetto javascript perch distribuire i valori di questo oggetto attraverso il vecchio oggetto copiato nella mia funzione di utilit.

57
00:04:34,580 --> 00:04:40,320
E ora  un po 'pi snello che tu possa svolgere questa funzione di utilit

58
00:04:41,190 --> 00:04:44,690
per tutti i nostri casi cos su che Optik

59
00:04:44,710 --> 00:04:48,770
Fammi fare rapidamente questo per tutti gli altri usi anche qui.

60
00:04:48,780 --> 00:04:58,080
Per tutti i casi medi aggiorna sempre lo stato e passa un oggetto javascript con le propriet aggiornate.

61
00:04:58,320 --> 00:05:06,960
Quindi, finalmente l'ultima volta che ho bisogno di fare questo  qui nel mio incremento Mefford l uso l'approccio pi lungo

62
00:05:07,020 --> 00:05:09,680
di aggiornare il mio stato in precedenza.

63
00:05:09,750 --> 00:05:16,940
Ora tutto  solo un approccio molto breve e condensato di tornare all'oggetto di aggiornamento di ritorno.

64
00:05:17,010 --> 00:05:19,640
Voglio incrementare il contatore cos l'ultimo.

65
00:05:20,010 --> 00:05:26,070
Salviamo rapidamente tutti i file incluso il nuovo file jap di utilit e vediamo se funziona,

66
00:05:26,070 --> 00:05:27,810
fare clic su 10 detrimento.

67
00:05:28,050 --> 00:05:30,660
Tutto sembra funzionare cos la nostra app funziona.

68
00:05:30,690 --> 00:05:34,450
Chiedi prima pu anche memorizzare ancora fa come vedi.

69
00:05:34,590 --> 00:05:36,740
Ma ora stiamo usando la funzione di utilit.

70
00:05:36,870 --> 00:05:40,470
Quindi, a cosa stiamo usando l'oggetto di aggiornamento per convenientemente.

71
00:05:40,590 --> 00:05:42,600
Bene, sono tutti oggetti.

72
00:05:42,600 --> 00:05:44,530
Facciamo anche l'aggiornamento.

73
00:05:44,550 --> 00:05:49,940
L'utilizzo dell'oggetto  implementato nel risultato J come riduttore aberante Falzone.

74
00:05:50,170 --> 00:06:01,420
Quindi importa oggetto di aggiornamento per AUM e ora vai anche all'utilit James fall e poi usiamo anche gli oggetti

75
00:06:01,420 --> 00:06:02,610
di aggiornamento.

76
00:06:02,810 --> 00:06:10,520
Per restituire un oggetto di aggiornamento in cui abbiamo passato lo stato per essere oggetto aggiornato e quindi solo

77
00:06:10,520 --> 00:06:14,780
un oggetto javascript con le propriet che dovrebbero essere aggiornate.

78
00:06:15,200 --> 00:06:22,940
E ci permette quindi di sbarazzarci del vecchio codice che avevamo in quel momento e di usare quello pi corto e

79
00:06:22,940 --> 00:06:26,110
lo stesso ovviamente anche per il risultato di cancellazione.

80
00:06:26,120 --> 00:06:28,390
Ora ci sto aggiornando sempre un array.

81
00:06:28,430 --> 00:06:33,950
Non scriver una funzione di utilit per il debito poich l'aggiornamento di un array dipende molto da ci che facciamo

82
00:06:33,950 --> 00:06:34,650
con un array.

83
00:06:34,880 --> 00:06:39,590
Ad esempio, l'aggiunta di un nuovo elemento funziona con la rimozione di concat con cartella.

84
00:06:39,620 --> 00:06:44,770
Quindi, non  cos facile come con l'oggetto e la funzione di utilit non ha molto senso

85
00:06:44,780 --> 00:06:45,710
per questo motivo.

86
00:06:45,980 --> 00:06:48,450
Ma alla fine aggiorniamo ancora un oggetto.

87
00:06:48,560 --> 00:06:50,580
Facciamo sempre con la restituzione di un nuovo stato.

88
00:06:50,810 --> 00:06:56,950
Quindi otteniamo il vecchio stato e quindi vogliamo sovrascrivere i risultati con il nostro array aggiornato.

89
00:06:57,080 --> 00:07:02,230
Quindi passiamo questo nell'oggetto javascript del secondo argomento con quello.

90
00:07:02,330 --> 00:07:03,350
Salviamo tutto questo.

91
00:07:03,360 --> 00:07:05,320
Vediamo anche morti in azione ora.

92
00:07:05,660 --> 00:07:07,130
Quindi tutto sembra funzionare.

93
00:07:07,140 --> 00:07:08,490
Conserviamo il risultato.

94
00:07:09,280 --> 00:07:11,130
Funziona anche la cancellazione funziona anche.

95
00:07:11,260 --> 00:07:12,520
Quindi sembra buono.

96
00:07:12,520 --> 00:07:18,730
Aggiorna oggetto fa una bella funzione di utilit che possiamo aggiungere per rendere i nostri riduttori un po 'pi snelli.

