1
00:00:02,340 --> 00:00:05,630
Teraz dokonalimy restrukturyzacji naszych dziaa na ostatnim wykadzie.

2
00:00:05,640 --> 00:00:10,410
Teraz chc zagbi si w to, co faktycznie woylimy w twrcw akcji.

3
00:00:10,440 --> 00:00:12,990
Jest to oczywicie atwe dla asynchronicznego kodu.

4
00:00:13,020 --> 00:00:18,720
Jedynym miejscem, w ktrym moemy wykona kod asynchroniczny, jest nasz twrca ect.

5
00:00:18,810 --> 00:00:23,700
Do tego stworzono redux funk i jest to powszechny wzorzec najlepszych praktyk.

6
00:00:23,790 --> 00:00:29,820
Musisz dotrze do serwera, aby pobra z niego dane, a nastpnie przechowywa je w swoim sklepie.

7
00:00:29,940 --> 00:00:35,580
Zdecydowanie zrb to za pomoc kreatora akcji wysyajcego zapytanie HTP tutaj zamiast wspomnianego limitu czasu, a gdy odpowied

8
00:00:35,580 --> 00:00:37,860
ju si pojawi, odpowiadasz na stare spojrzenie.

9
00:00:37,890 --> 00:00:42,780
Przechowuj go w swoim sklepie, zobaczysz oczywicie jako dziaanie w projekcie kursu.

10
00:00:42,890 --> 00:00:51,010
Moesz oczywicie umieci znacznie wicej logiki w swoich twrcach akcji, mylc o tym samym wyniku.

11
00:00:51,120 --> 00:00:57,300
Zapisujemy nasz wynik, otrzymujemy go jako argument, a my po prostu zwracamy akcj, ktr

12
00:00:57,300 --> 00:00:58,390
przekazujemy jako adunek.

13
00:00:58,410 --> 00:01:00,930
Teraz jest to bardzo suchy kreator ect.

14
00:01:00,930 --> 00:01:05,940
Nie robi nic innego poza zwrceniem obiektu z niezmienion odpowiedzi.

15
00:01:05,940 --> 00:01:07,260
Wynik przepraszam.

16
00:01:07,260 --> 00:01:15,700
Teraz oczywicie moglibymy stworzy sta, by moe nada jej zaktualizowany wynik, a nastpnie

17
00:01:15,720 --> 00:01:17,960
rwny wynikowi dwa razy.

18
00:01:17,970 --> 00:01:24,720
Teraz oczywicie nie ma to wikszego sensu, ale moemy teoretycznie zmieni wszystko, co tu chcesz

19
00:01:24,720 --> 00:01:28,310
i moesz mie transformacje, ktre maj wicej sensu.

20
00:01:28,470 --> 00:01:36,690
Moe chcemy zaktualizowa niektre pomysy, ktre chcemy doda nazw uytkownika, a nastpnie przekazujemy nasz zaktualizowany wynik.

21
00:01:36,690 --> 00:01:39,770
Chodzi o to, e dzieje si to po latach oszczdnoci.

22
00:01:39,780 --> 00:01:40,960
Zapamitam to.

23
00:01:41,280 --> 00:01:49,620
Nasza aplikacja nadal dziaa w sklepie, w ktrym przechowywalimy 20, poniewa zaktualizowalimy ich atak, mnoc

24
00:01:49,620 --> 00:01:51,470
go przez dwa.

25
00:01:51,480 --> 00:01:54,110
Teraz mamy logik w twrcy akcji.

26
00:01:54,180 --> 00:01:58,970
I moe to by poprawna logika zamiast jakiej bzdurnej operacji takiej jak ta.

27
00:01:58,980 --> 00:02:03,160
Rzecz w tym, e mona oczywicie wykona t sam logik.

28
00:02:03,180 --> 00:02:07,700
Pozwlcie, e przeredaguj to do poprzedniego stanu, w ktrym po prostu przekazuj odpowied.

29
00:02:07,860 --> 00:02:13,440
Mona wykona t sam logik, jeli trzeba przeksztaci dane przed przechowywaniem w stanie, ktry jest doskonale

30
00:02:13,440 --> 00:02:15,680
w porzdku, co moe si zdarzy.

31
00:02:15,840 --> 00:02:20,210
Moesz tutaj wykona t sam logik w swoim reduktorze.

32
00:02:20,340 --> 00:02:21,670
Zapisz wynik.

33
00:02:21,900 --> 00:02:25,750
Tutaj czymy wynik i przechowujemy warto.

34
00:02:25,780 --> 00:02:30,650
Teraz oczywicie nic nie powstrzymuje nas od pomnoenia tego przez dwa tutaj.

35
00:02:30,720 --> 00:02:33,990
Jeli zrobi to z ich reduktorem ataku.

36
00:02:34,020 --> 00:02:38,870
Teraz, jeli zapisz 10, nadal przechowujemy 20 w sklepie, jak wida.

37
00:02:38,940 --> 00:02:41,620
Ale teraz zmienimy to w zupenie innym miejscu.

38
00:02:41,640 --> 00:02:43,310
Zmieniamy go w reduktorze.

39
00:02:43,350 --> 00:02:49,470
Teraz, jak powiedziaem, ta operacja moe nie mie wikszego sensu, ale czsto bdziesz mie przypadki, w

40
00:02:49,470 --> 00:02:53,190
ktrych naprawd chcesz co zmieni, zanim zostaniesz zapisany w stanie.

41
00:02:53,310 --> 00:02:56,950
Nie zawsze otrzymujesz warto, ktr chcesz przekaza.

42
00:02:57,030 --> 00:03:00,190
Gdzie Denne powinien to zmieni w reduktorze?

43
00:03:00,300 --> 00:03:09,180
Jak wam tutaj poka, moecie oczywicie uruchomi kod przed zwrceniem danych o zmianie lub jakimkolwiek twrc

44
00:03:09,180 --> 00:03:10,000
akcji.

45
00:03:10,140 --> 00:03:13,550
Tak jak pokazaem ci przedtem to, co skomentowaem.

46
00:03:13,980 --> 00:03:15,570
Obie prace.

47
00:03:15,600 --> 00:03:18,020
Lepiej przyjrzyj si bliej.

48
00:03:18,720 --> 00:03:23,030
W kocu pytanie sprowadza si do tego, gdzie umieci logik.

49
00:03:23,070 --> 00:03:27,670
Obecnie mamy prawdziwych twrcw i producentw.

50
00:03:27,690 --> 00:03:35,270
Twrcy akcji, ktrych si nauczyli, wietnie nadaj si do uruchamiania kodu asynchronicznego podczas wysyania

51
00:03:35,280 --> 00:03:44,240
reduktorw akcji na Yaverland, ale s w stanie uruchamia kod synchroniczny i s czystymi danymi wejciowymi w

52
00:03:44,240 --> 00:03:50,740
zaktualizowanych reduktorach stanu, ale pamitajcie, e jest to miejsce, w ktrym aktualizujecie stan.

53
00:03:50,740 --> 00:03:59,030
Jest to jedna z gwnych koncepcji twrcw reduxw, ktrych gwnym celem s nasze dziaania.

54
00:03:59,180 --> 00:04:05,930
DS zazdrosny o obiekty z typem i adunkiem, wic reduktorami podstawow koncepcj i ca ide stojc

55
00:04:05,930 --> 00:04:12,980
za reduxem jest to, e reduktor jest jedyn rzecz, ktra aktualizuje twrcw akcji pastwowych, nie powinna przygotowywa

56
00:04:12,980 --> 00:04:14,460
si do zbytniego rozwoju.

57
00:04:14,460 --> 00:04:19,940
Z tego powodu, poniewa powinien to by reduktor, ktry aktualizuje, ale oczywicie

58
00:04:19,940 --> 00:04:27,090
jest rnica midzy aktualizowaniem stanu, co w istocie oznacza powrt do nowego obiektu, ktry tworzy nasz

59
00:04:27,080 --> 00:04:30,910
stan i zmienia dane, ktre trafiaj do stanu.

60
00:04:31,220 --> 00:04:35,370
Nadal moesz znale argumenty dla obu kierunkw.

61
00:04:35,390 --> 00:04:42,770
Opieram si na wprowadzeniu logiki do reduktora i niezbyt logicznej logice twrcy akcji.

62
00:04:42,770 --> 00:04:49,010
Kod asynchroniczny musi tam dotrze, ale kiedy odzyskasz dane z serwera, by moe bdziesz

63
00:04:49,010 --> 00:04:55,860
musia si z nimi skontaktowa, moesz oczywicie go przeksztaci w Kreator akcji i powiniene to

64
00:04:56,540 --> 00:05:03,970
zrobi w pewnym stopniu, ale gdy ju uzyskasz dane, ktre s wzgldnie czysty, naley odda go producentowi.

65
00:05:04,130 --> 00:05:09,980
A jeli nadal musisz nim manipulowa, na przykad robic 8 razy, lub co podobnego,

66
00:05:09,980 --> 00:05:12,910
moim zdaniem, powinien on wej do reduktora.

67
00:05:13,100 --> 00:05:18,620
Teraz znajdziesz take argumenty dla drugiej strony i ostatecznie to twoja decyzja, jeli

68
00:05:18,620 --> 00:05:21,660
wybierzesz jedno podejcie, ale nie zmieniaj tego.

69
00:05:21,800 --> 00:05:27,860
Nie kad logiki w jednym twrcy akcji, nie posiadasz duej logiki i reduktora liczby.

70
00:05:27,920 --> 00:05:35,120
Bd konsekwentny i decyduj, gdzie chcesz przeksztaci i przygotuj swojego twrc danych lub edukuj,

71
00:05:35,120 --> 00:05:36,960
lub polecam to drugie.

72
00:05:36,980 --> 00:05:38,640
Ale ostatecznie to zaley od ciebie.

73
00:05:38,750 --> 00:05:40,460
Po prostu wybierz spjn tras.

