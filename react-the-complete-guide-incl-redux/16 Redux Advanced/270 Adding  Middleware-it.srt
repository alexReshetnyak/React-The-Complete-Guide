1
00:00:02,150 --> 00:00:08,930
Prima di immergerci nell'esecuzione di codice asincrono, mi immergo in un concetto avanzato estremamente importante che abbiamo

2
00:00:08,930 --> 00:00:10,740
quando si lavora con Redux.

3
00:00:10,850 --> 00:00:18,200
E con ci intendo sempre che X da impacchettare da solo sia quello connesso al tuo o meno.

4
00:00:18,470 --> 00:00:21,370
 possibile aggiungere il middleware in modo corretto.

5
00:00:21,380 --> 00:00:28,270
Tra l'invio della tua azione e il raggiungimento del produttore,  qui che puoi aggiungere il middleware.

6
00:00:28,350 --> 00:00:35,480
Ora potresti non sapere quale middleware  se il tuo sviluppatore lato server abbia lavorato con Express

7
00:00:35,480 --> 00:00:43,490
chicest Ad esempio potresti avere un'idea anche se il middleware  fondamentalmente un termine usato per funzioni o un

8
00:00:43,570 --> 00:00:51,180
codice generale che si aggancia a un processo che poi viene eseguito come parte di quel processo senza fermarlo.

9
00:00:51,230 --> 00:00:57,320
Quindi possiamo aggiungere il middleware e l'azione raggiunger comunque il produttore da quel momento in poi,

10
00:00:57,560 --> 00:01:03,860
ma pu fare qualcosa con quell'azione prima che raggiunga il produttore che pu semplicemente registrare qualcosa.

11
00:01:04,040 --> 00:01:10,040
Ma questo diventer importante in seguito quando vogliamo eseguire un codice sincrono.

12
00:01:10,280 --> 00:01:17,260
Quindi per ora vediamo il middleware in azione aggiungendolo al nostro progetto per mostrarti come funziona il middleware.

13
00:01:17,270 --> 00:01:18,650
Lasciami andare all'indice

14
00:01:18,720 --> 00:01:22,440
S, segui le indicazioni seguenti in cui creiamo effettivamente il negozio.

15
00:01:22,910 --> 00:01:30,050
E 'in questo momento che possiamo aggiungere anche il middleware al progetto e per questo ovviamente

16
00:01:30,050 --> 00:01:33,270
abbiamo bisogno di imparare come farlo esattamente.

17
00:01:33,320 --> 00:01:35,750
Prima di tutto abbiamo bisogno di un middleware.

18
00:01:35,990 --> 00:01:42,470
Come ho detto il malware in questo caso qui  solo un pezzo di codice specificamente una funzione.

19
00:01:42,530 --> 00:01:44,670
Ora creer il mio middleware qui.

20
00:01:44,720 --> 00:01:48,770
Successivamente aggiungeremo il middleware fornito dai nostri provider.

21
00:01:48,770 --> 00:01:54,310
Voglio che crei un semplice middleware che blocca semplicemente ogni azione o emettiamo.

22
00:01:54,320 --> 00:01:57,590
Quindi quello che voglio fare  modificare una nuova costante e la chiamer.

23
00:01:57,630 --> 00:02:02,570
Logger questo sar il nome del mio middleware, per cui ovviamente il nome

24
00:02:02,570 --> 00:02:06,700
del contenuto  totalmente a te, come sempre, prende una funzione.

25
00:02:06,830 --> 00:02:10,060
E user la sintassi di sei Eros.

26
00:02:10,480 --> 00:02:18,230
Verr memorizzato come input dessous per il caso, poich utilizzeremo presto un metodo specifico fornito da Redux

27
00:02:18,230 --> 00:02:21,330
per connettere il nostro middleware al negozio.

28
00:02:21,500 --> 00:02:29,010
E questo metodo fornito da redux alla fine eseguir la nostra funzione middleware e ci fornir la storia.

29
00:02:29,180 --> 00:02:38,170
Ora la funzione body off  resa consapevole della funzione che sembra che restituiamo un'altra funzione.

30
00:02:38,360 --> 00:02:42,540
Ci pu creare confusione, ma questa funzione restituisce semplicemente un'altra funzione.

31
00:02:42,540 --> 00:02:47,930
Va bene, la nostra funzione nella funzione freccia E-6 la sintassi.

32
00:02:47,960 --> 00:02:52,690
La nostra funzione ricever l'argomento successivo.

33
00:02:52,820 --> 00:02:58,580
Puoi dare un nome a questo argomento come preferisci, ma dopo ha senso perch questa sar

34
00:02:58,580 --> 00:03:04,360
una funzione che puoi eseguire per permettere all'azione di continuare il suo viaggio fino al riduttore.

35
00:03:04,370 --> 00:03:10,210
Potresti conoscere la sua prossima funzione se sei uno sviluppatore esperto con esperienza.

36
00:03:10,310 --> 00:03:19,100
Quindi questa funzione che viene restituita qui sar anche eseguita da redux e la funzione end fa quindi e ora

37
00:03:19,210 --> 00:03:24,190
diventa davvero un po 'confusa ma questa funzione restituisce anche una funzione.

38
00:03:24,200 --> 00:03:30,170
L'ultimo per che ricever l'azione che hai inviato come input.

39
00:03:30,170 --> 00:03:33,640
Anche questa funzione verr eseguita per te.

40
00:03:33,740 --> 00:03:38,230
Quindi questa festa di funzioni annidate qui  semplicemente un middleware.

41
00:03:38,230 --> 00:03:45,140
Ora all'interno di quella funzione interiore che riceve l'azione possiamo anche accedere a un negozio e questa prossima funzione.

42
00:03:45,140 --> 00:03:46,870
E ovviamente l'azione stessa.

43
00:03:47,000 --> 00:03:52,600
E qui possiamo ora eseguire il codice che vogliamo eseguire tra l'azione e il riduttore.

44
00:03:52,610 --> 00:03:57,270
Quindi qui tutti aggiungono un middleware per il mercato del lock statement.

45
00:03:57,290 --> 00:04:01,520
Questo  solo per noi, in modo che possiamo vedere rapidamente da dove viene questo.

46
00:04:01,520 --> 00:04:10,670
E loro dir che si spediranno e stamper l'azione l dopo che eseguir il prossimo.

47
00:04:10,790 --> 00:04:12,380
E qui  importante.

48
00:04:12,440 --> 00:04:19,610
che l'azione continui a ridursi anche se per riuscirci dobbiamo passare l'azione come argomento.

49
00:04:19,610 --> 00:04:20,860
Ora lasceremo

50
00:04:20,870 --> 00:04:26,030
Questo  importante perch potresti teoricamente anche cambiare quell'azione qui nel mezzo in cui abbiamo

51
00:04:26,420 --> 00:04:27,410
accesso ad essa.

52
00:04:27,440 --> 00:04:28,750
Lo prendiamo come argomento.

53
00:04:28,790 --> 00:04:33,650
Potremmo cambiare il tipo di corso che dovremmo fare con cautela perch puoi rompere la nostra

54
00:04:33,950 --> 00:04:35,390
applicazione o peggio di cos.

55
00:04:35,390 --> 00:04:38,990
Possiamo implementare comportamenti imprevisti.

56
00:04:38,990 --> 00:04:42,530
Quindi qui chiamer la prossima amplificazione un'azione modificata.

57
00:04:42,530 --> 00:04:51,740
La cosa interessante  che ora posso memorizzare il risultato di questa chiamata, di cui avr bisogno per restituire questa funzione interiore, in

58
00:04:51,740 --> 00:04:53,920
modo da trasformare i risultati qui.

59
00:04:54,080 --> 00:04:57,730
Ora tra questi due passaggi posso registrare qualcos'altro.

60
00:04:57,740 --> 00:05:04,140
Quindi, il log di console registra un passaggio di blocco relativo al middleware qui e l.

61
00:05:04,170 --> 00:05:10,820
Avr il mio prossimo stato quindi posso semplicemente chiamare store get state perch ho accesso al mio negozio.

62
00:05:10,820 --> 00:05:12,540
Lo otteniamo nella funzione esterna.

63
00:05:12,540 --> 00:05:16,130
 il normale negozio X che impari a ottenere Methot di stato.

64
00:05:16,320 --> 00:05:19,450
Quindi posso ovviamente chiamarlo anche nel middleware.

65
00:05:19,860 --> 00:05:24,140
Quindi questo albero delle funzioni  alla fine ci che viene eseguito.

66
00:05:24,180 --> 00:05:28,220
Tutto ci  fatto da Reducto, non dobbiamo chiamare nessuna di queste funzioni.

67
00:05:28,230 --> 00:05:32,230
Tutto ci che dobbiamo fare  applicare questo modello al nostro negozio.

68
00:05:32,460 --> 00:05:34,510
Quindi, come lo facciamo?

69
00:05:34,560 --> 00:05:38,730
Prima di tutto dobbiamo importare qualcosa da Rydex.

70
00:05:38,730 --> 00:05:45,960
Quindi qui i lati combinano i riduttori tutti impiegati applicano la disfunzione del middleware poich i nomi delle casse

71
00:05:46,230 --> 00:05:49,540
ci permettono di aggiungere il nostro middleware per distorcere.

72
00:05:50,010 --> 00:05:53,240
Quindi qui e crea il negozio dove inizializziamo il negozio.

73
00:05:53,340 --> 00:05:55,110
Possiamo aggiungere pi argomenti.

74
00:05:55,200 --> 00:06:01,270
E il secondo argomento qui pu essere un cosiddetto potenziatore.

75
00:06:01,290 --> 00:06:05,720
Ora questa e la sua risposta non  altro che un middleware per esempio.

76
00:06:05,760 --> 00:06:13,550
Quindi qui possiamo chiamare middleware applicativo e ora possiamo passare la costante del nostro logger che contiene questo albero

77
00:06:13,560 --> 00:06:20,350
delle funzioni che  un eseguibile middleware valido da redox per applicare il middleware e quindi

78
00:06:20,340 --> 00:06:21,510
collegarlo allo store.

79
00:06:21,810 --> 00:06:24,050
E questo  gi tutto qui.

80
00:06:24,150 --> 00:06:28,750
E in realt puoi passare qui un elenco di middleware per applicare il middleware.

81
00:06:28,830 --> 00:06:33,820
Saranno giustiziati per poi qui ne abbiamo solo uno per.

82
00:06:33,870 --> 00:06:38,910
Quindi salviamo questo e poi lanciamo NPM start per avviare questo progetto.

83
00:06:38,910 --> 00:06:44,400
Questo dovrebbe permetterci di usare ancora il progetto ask prima, ma dovremmo ottenere un output

84
00:06:44,400 --> 00:06:46,350
aggiuntivo qui a destra nella console.

85
00:06:46,740 --> 00:06:51,680
Quindi qui facciamo clic su Incrementa vediamo due Lawk qui.

86
00:06:51,720 --> 00:06:55,700
Il primo  il log di dispacciamento in cui vediamo l'azione che abbiamo inviato.

87
00:06:55,890 --> 00:06:58,170
Questo  l'oggetto javascript che abbiamo inviato.

88
00:06:58,170 --> 00:07:04,080
il prossimo stato in cui vediamo lo stato aggiornato e ci naturalmente accade per ogni azione che inviamo.

89
00:07:04,530 --> 00:07:06,010
E il secondo 

90
00:07:06,030 --> 00:07:08,390
Quindi questo  il nostro middleware in azione.

91
00:07:08,460 --> 00:07:14,140
Ora, naturalmente, il punto in cui pu gi essere bello fare esattamente quello che registra il tuo

92
00:07:14,140 --> 00:07:16,820
stato e vedere dove sta andando bene ora.

93
00:07:16,830 --> 00:07:23,960
Un caso d'uso pi utile per un middleware  da vedere pi tardi quando gestiamo effettivamente un codice asincrono.

94
00:07:24,270 --> 00:07:29,660
Ma prima voglio attenermi a questa idea di ottenere alcune intuizioni su questo stato.

95
00:07:29,790 --> 00:07:34,440
Sarebbe bello per il debug se potessimo sempre guardare nel negozio.

96
00:07:34,590 --> 00:07:40,050
ma pi di quello che anche se non avessimo appena inviato nulla, potremmo ancora esaminare la storia attuale.

97
00:07:40,050 --> 00:07:42,020
Quindi, se avessimo un po 'di registrazione

98
00:07:42,090 --> 00:07:45,370
Diamo un'occhiata a ci che pu aiutarci con quello nella prossima lezione.

