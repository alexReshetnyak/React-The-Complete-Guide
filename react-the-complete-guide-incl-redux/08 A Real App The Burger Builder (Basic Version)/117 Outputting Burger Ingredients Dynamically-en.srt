1
00:00:02,150 --> 00:00:07,550
In the last lectures, we started implementing the burger but it's not really that dynamic.

2
00:00:07,550 --> 00:00:15,910
Let's take a first important step by handling the burger ingredients in the state of our burger builder

3
00:00:16,160 --> 00:00:20,290
because this is where we will ultimately added them to.

4
00:00:20,300 --> 00:00:23,910
That also is the reason why this is a stateful component,

5
00:00:23,930 --> 00:00:25,880
now we're adding state.

6
00:00:26,090 --> 00:00:30,750
I'm going to add state like this, simply initialize it as a property,

7
00:00:30,980 --> 00:00:39,650
but as I showed you in the last course module, you could also add the constructor where you receive the

8
00:00:39,650 --> 00:00:42,800
props, call super with the props,

9
00:00:42,800 --> 00:00:52,110
never forget this and then initialize this state, this because you're inside a method like this,

10
00:00:52,130 --> 00:00:53,750
this would also work,

11
00:00:53,750 --> 00:01:01,670
this is an alternative, I'll comment it out because I'll use this a bit more modern because it's shorter syntax

12
00:01:02,090 --> 00:01:08,930
but this constructor syntax will work absolutely fine to. Now what should be inside the state?

13
00:01:09,380 --> 00:01:15,830
I want to have the ingredients object in there where I have key value pairs where the keys are the names

14
00:01:15,830 --> 00:01:19,900
of the ingredients and the values is the amount.

15
00:01:19,940 --> 00:01:27,230
So there I will have a salad ingredient maybe one, I will have a bacon ingredient maybe also one,

16
00:01:27,590 --> 00:01:33,520
I will have a cheese ingredient maybe two and a meat ingredient, maybe also two

17
00:01:33,540 --> 00:01:36,080
so I'll really build a big burger.

18
00:01:36,110 --> 00:01:40,090
We will later also add more state like the price

19
00:01:40,160 --> 00:01:44,330
but for now, let's go with the burger fundamentals.

20
00:01:44,360 --> 00:01:47,090
Now we get our ingredients, of course

21
00:01:47,090 --> 00:01:52,030
the goal now is to pass this array now to our burger.

22
00:01:52,340 --> 00:01:58,310
So somehow, we want to give our burger component the ingredients,

23
00:01:58,400 --> 00:02:04,270
So on our ingredients property, we want to pass this.state.ingredients,

24
00:02:04,280 --> 00:02:05,660
that's the idea.

25
00:02:05,690 --> 00:02:10,200
The thing is the burger doesn't receive any ingredients yet

26
00:02:10,380 --> 00:02:16,010
so let's copy that over to the burger component and let's start accepting it

27
00:02:16,010 --> 00:02:21,890
and let's start outputting the ingredients dynamically. Now in the burger component,

28
00:02:22,040 --> 00:02:28,700
keep in mind we're receiving ingredients as a props but if we inspect the ingredients in the state of

29
00:02:28,700 --> 00:02:32,640
the burger builder, you have to keep in mind it's an object,

30
00:02:32,870 --> 00:02:35,170
it's not an array

31
00:02:35,270 --> 00:02:38,450
so we can't use map on that, we can't just loop through that,

32
00:02:38,450 --> 00:02:40,250
it's an object.

33
00:02:40,640 --> 00:02:44,270
Instead we have to transform this object into an array

34
00:02:44,480 --> 00:02:52,100
and to be precise, we have to convert this object into an array of the values of the ingredients.

35
00:02:52,130 --> 00:02:59,620
Now thankfully, this is not that difficult. In the burger function here, in the burger component,

36
00:02:59,920 --> 00:03:04,920
I would create a new concept which I'll name ingredients or maybe to make it clear that it's not the

37
00:03:04,920 --> 00:03:13,430
incoming form, I'll name it transformedIngredients. And there I'll use the object object, that's a

38
00:03:13,430 --> 00:03:19,370
default javascript object not provided by react or anything like that.

39
00:03:19,370 --> 00:03:26,680
It has a keys method which extracts the keys of a given object and turns that into an array,

40
00:03:26,690 --> 00:03:28,780
so it gives you an array of the keys.

41
00:03:29,060 --> 00:03:36,530
So for our object, it would give us an array which contains a string salad, a string bacon, a string cheese

42
00:03:36,620 --> 00:03:42,310
and a string meat the values 1, 1, 2, 2 are not part of the array.

43
00:03:42,740 --> 00:03:45,260
So there I'll pass props ingredients,

44
00:03:45,290 --> 00:03:49,990
now we got that array of strings, of keys in the end.

45
00:03:50,390 --> 00:03:52,180
Now I'll chain a method to this

46
00:03:52,280 --> 00:03:55,000
and I will do it in a new line to make it easier to read,

47
00:03:55,040 --> 00:04:01,850
this still belongs to the object keys call here, the map method which we can of course execute since

48
00:04:01,850 --> 00:04:05,320
again keys returns as an array.

49
00:04:05,330 --> 00:04:10,810
Now I mention that the elements in the array are simply our properties, salad and so on

50
00:04:10,820 --> 00:04:17,660
so you know that map executes a function on each element in the input array.

51
00:04:17,930 --> 00:04:25,910
So I'll give this argument we receive in the function the name igKey for ingredient key because that's

52
00:04:25,910 --> 00:04:27,540
just what's part of the array, salad

53
00:04:27,980 --> 00:04:29,590
and so on.

54
00:04:29,630 --> 00:04:41,300
Now in that function here, I want to transform this string value into an array with as many elements

55
00:04:41,750 --> 00:04:45,180
as we have ingredients for a given ingredient.

56
00:04:45,380 --> 00:04:54,050
So if we have two cheese ingredients then I want to transform that cheese string into an array which

57
00:04:54,260 --> 00:04:56,570
simply contains two elements,

58
00:04:56,570 --> 00:05:03,100
I don't care about which elements if these are two a's, two ones, two whatever

59
00:05:03,290 --> 00:05:06,010
but it should have a length of two.

60
00:05:06,140 --> 00:05:15,140
So I will return an array here and I will actually use the spread operator to spread a new array I have

61
00:05:15,140 --> 00:05:21,230
to construct and i will construct it with the array method here provided by javascript

62
00:05:21,220 --> 00:05:28,300
again, that's not a react method or not a react object, it's default javascript object.

63
00:05:28,400 --> 00:05:33,770
You might not know it because you don't use it that often but you can create an array with it,

64
00:05:33,860 --> 00:05:41,480
for example array three will give you an array with three empty spaces basically, with three undefined

65
00:05:41,540 --> 00:05:42,670
spaces.

66
00:05:43,100 --> 00:05:45,400
Now the length is of course not three,

67
00:05:45,500 --> 00:05:49,880
the length should be the amount of the given ingredient.

68
00:05:49,880 --> 00:05:52,020
So here props ingredients

69
00:05:52,310 --> 00:05:59,600
and then I will access the given key I have here because keep in mind, we're still in that function of

70
00:05:59,600 --> 00:06:05,190
our map method which runs on an array which contains all our keys.

71
00:06:05,240 --> 00:06:11,360
So what we have at this point of time is simply an array with two elements,

72
00:06:11,360 --> 00:06:13,610
the values don't matter to us right now.

73
00:06:14,490 --> 00:06:17,370
I will now execute map on that array,

74
00:06:17,370 --> 00:06:23,040
keep in mind we're still inside the outer map mathod but there I also return an array where I

75
00:06:23,040 --> 00:06:26,220
now want to map the elements.

76
00:06:26,360 --> 00:06:30,790
I don't care about the element itself

77
00:06:31,160 --> 00:06:37,010
so that is why I will use the underscore as an argument name to indicate that it's a blank but the index

78
00:06:37,010 --> 00:06:39,390
of that element is important to me.

79
00:06:39,830 --> 00:06:48,440
So now here, inside that map method, I will return my burger ingredient because I need to return an array

80
00:06:48,440 --> 00:06:52,880
of jsx in the end where I will set the key.

81
00:06:52,880 --> 00:06:55,550
Keep in mind we need to assign a key because it's an array

82
00:06:55,550 --> 00:07:00,420
we return, an array of jsx elements to igKey

83
00:07:00,500 --> 00:07:06,680
+ i. Now igKey is something like salad and i simply is 1, 2, 3 and so on.

84
00:07:06,680 --> 00:07:16,240
So this creates a unique key for each ingredient and the type simply is igKey.

85
00:07:16,240 --> 00:07:20,470
This is why I don't care about the first argument here

86
00:07:20,470 --> 00:07:24,230
I don't care what this array object populates this array with,

87
00:07:24,340 --> 00:07:30,540
it's just the length of that array that matters for me because I need an array of length 2 for cheese

88
00:07:30,550 --> 00:07:31,180
in this case,

89
00:07:31,180 --> 00:07:37,210
for bacon it would be of length 1 so that I can create an appropriate amount of burger ingredient components

90
00:07:37,750 --> 00:07:42,470
and I then only am interested in the type which I got right from the start

91
00:07:42,490 --> 00:07:50,700
since I extract all the types, all the property names of my ingredients state here. That of course also

92
00:07:50,710 --> 00:07:59,140
implies that the keys you use here in the burger builder state have to equal the keys

93
00:07:59,140 --> 00:08:02,270
you check for in burger ingredients, meat,

94
00:08:02,290 --> 00:08:03,650
cheese and bacon,

95
00:08:03,730 --> 00:08:07,190
they have to have the same casing and the same name,

96
00:08:07,240 --> 00:08:13,680
that is super important because I'm using that to create the right ingredients here in the end.

97
00:08:14,070 --> 00:08:22,540
So this is what I return in the end in this internal map method and therefore I map my object into an

98
00:08:22,600 --> 00:08:28,570
array of ingredients in the end. Might look super complex,

99
00:08:28,570 --> 00:08:34,810
feel free to throw in some console logs in between to see what you currently got or to walk through that

100
00:08:34,960 --> 00:08:36,530
with the burger

101
00:08:36,700 --> 00:08:43,750
but in the end, it's just a way to transform an object of key value pairs into an array of burger ingredients

102
00:08:44,110 --> 00:08:52,060
where the value of that object is important for me to decide how many ingredients I need and the keys

103
00:08:52,060 --> 00:08:55,540
important for which type of ingredient I need.

104
00:08:55,540 --> 00:09:00,390
So now I get my transformedIngredients and now it's time to return them.

105
00:09:00,400 --> 00:09:07,990
I will always have bread-top and bread-bottom but in between, I'll now output curly braces transformed

106
00:09:08,080 --> 00:09:10,990
ingredients and with that, let's see if that works.

107
00:09:10,990 --> 00:09:17,630
Make sure all files are saved and you should now have a burger with two meat pieces, two cheese,

108
00:09:17,710 --> 00:09:19,360
one bacon and one salad.

109
00:09:19,900 --> 00:09:25,280
If you get any error here, make sure this transformation code is working as it should

110
00:09:25,660 --> 00:09:31,120
and with that we made our first important step towards a truly dynamic burger.

111
00:09:31,120 --> 00:09:37,930
It's not dynamic yet but at least we have a generic method of outputting ingredients.

112
00:09:37,930 --> 00:09:42,100
Next we can work on allowing the user to add and remove ingredients.

