1
00:00:02,190 --> 00:00:04,350
Thus far we already build a lot,

2
00:00:04,360 --> 00:00:07,240
we added a lot of logic,

3
00:00:07,240 --> 00:00:09,510
we added a lot of things to our UI.

4
00:00:09,670 --> 00:00:16,090
Now it's time to tie up the build controls with our real ingredients so that we can really manage that

5
00:00:16,090 --> 00:00:19,650
burger on our own or the user can.

6
00:00:20,220 --> 00:00:27,670
For that, we need a couple of methods in the build controller, in the burger builder excuse me, to update

7
00:00:27,850 --> 00:00:32,680
our ingredients, to add ingredients or remove them.

8
00:00:32,680 --> 00:00:42,010
So I'll add two methods here, the addIngredientHandler which will receive the type of ingredient for

9
00:00:42,010 --> 00:00:43,470
which I want to add one

10
00:00:43,720 --> 00:00:50,350
and of course the removeIngredientHandler which also needs to know for which type it should remove

11
00:00:50,350 --> 00:00:50,850
one.

12
00:00:50,980 --> 00:00:54,550
Well let's start with adding, to add the ingredient, I

13
00:00:54,550 --> 00:00:58,660
first of all need to know what the old ingredient count is.

14
00:00:58,660 --> 00:01:06,790
So add an oldCount variable or constant to be precise and access this.state.ingredients for the given

15
00:01:06,820 --> 00:01:08,100
type, like that.

16
00:01:08,440 --> 00:01:14,530
Then I will calculate the updated count which simply is the old count plus one

17
00:01:14,680 --> 00:01:19,240
and yes, you could of course do this in less lines, I just want to be explicit about what's happening

18
00:01:19,240 --> 00:01:20,380
here.

19
00:01:20,800 --> 00:01:23,280
Now I need to update my ingredients,

20
00:01:23,500 --> 00:01:29,880
I will create a new constant, updatedIngredients because as you learned, state should be updated in

21
00:01:29,880 --> 00:01:38,650
an immutable way. So i will create a new javascript object and use that ES6 spread operator, these three

22
00:01:38,650 --> 00:01:47,860
dots to distribute the properties of the old ingredients state into the new object I'm creating here.

23
00:01:48,760 --> 00:01:55,030
And then I'm taking my updatedIngredients object, access the type for which I have to update the ingredients

24
00:01:55,360 --> 00:02:03,790
and set the count, the value which is just the amount of ingredients equal to updated, updatedCount

25
00:02:03,790 --> 00:02:07,990
not counted, to updatedCount, like this.

26
00:02:07,990 --> 00:02:17,740
Now with that, I can call this.setState to update my ingredients in my state. I also already want to

27
00:02:17,740 --> 00:02:27,280
start keeping track of the price though so I will add a total price property to my ingredients and let's

28
00:02:27,280 --> 00:02:32,290
say the base price for the burger no matter what's on it is $4,

29
00:02:32,350 --> 00:02:35,050
now choose any price you want, of course.

30
00:02:35,080 --> 00:02:37,210
Now that's my base price,

31
00:02:37,330 --> 00:02:41,660
now here, I want to update this price.

32
00:02:41,980 --> 00:02:48,250
So I need to have a mapping of which ingredient costs what,

33
00:02:48,520 --> 00:02:51,940
for that I will create a new constant, outside of the class

34
00:02:51,940 --> 00:02:59,860
but in the same file which I'll name Ingredient and I'll give it a capital name, INGREDIENT_PRICES, you

35
00:02:59,860 --> 00:03:07,200
typically name constants you want to use as global constants in all capital characters.

36
00:03:07,780 --> 00:03:11,700
So INGREDIENT_PRICES is a javascript object where I say okay sell it,

37
00:03:11,710 --> 00:03:13,520
Maybe it's .5,

38
00:03:13,860 --> 00:03:17,210
cheese might be .4, I don't know,

39
00:03:17,290 --> 00:03:22,540
meat might be 1.3 and let's say bacon is .7,

40
00:03:22,540 --> 00:03:24,330
like this.

41
00:03:24,340 --> 00:03:27,920
So these could be the dollar prices for each ingredient,

42
00:03:28,330 --> 00:03:34,850
Now I want to update the total price with the price for the type we added.

43
00:03:35,170 --> 00:03:45,740
So I know that the price addition basically is INGREDIENT_PRICES for a given type

44
00:03:45,910 --> 00:03:51,070
because keep in mind I'm also using the same types I'm using everywhere else in the app, salad, cheese with

45
00:03:51,070 --> 00:03:52,890
the same casing and so on.

46
00:03:53,320 --> 00:03:56,470
So for that type, I can fetch the price

47
00:03:56,590 --> 00:04:01,510
and since I always add one unit at a time, I don't need to multiply these with anything.

48
00:04:01,510 --> 00:04:14,910
So I can now take my old price from this.state.totalPrice and set the new price equal to old price

49
00:04:15,500 --> 00:04:20,380
plus price addition and yes again, you could do this in less lines.

50
00:04:20,700 --> 00:04:31,050
But with that I can now call setState and there I can now set total price to the new price and I can

51
00:04:31,050 --> 00:04:33,160
set price,

52
00:04:33,300 --> 00:04:33,930
excuse me

53
00:04:33,930 --> 00:04:38,530
ingredients equal to updatedIngredients

54
00:04:38,550 --> 00:04:39,900
So this is now the state update

55
00:04:39,900 --> 00:04:46,760
I want to do when a new ingredient is added, update the ingredients and update the price.

56
00:04:46,830 --> 00:04:53,810
With that let's hook this addIngredientHandler up to the more button in our build controls.

57
00:04:54,640 --> 00:05:07,820
To do that, I need to pass a property to the build controls and there I will simply add ingredientAdded property

58
00:05:08,360 --> 00:05:15,380
which holds a reference to this addIngredientHandler. Now inside build controls,

59
00:05:15,380 --> 00:05:18,610
I now need to distribute this correctly.

60
00:05:18,830 --> 00:05:25,160
So let's copy that property name we chose here in the burger builder and let's head over to build controls.

61
00:05:25,830 --> 00:05:26,450
There,

62
00:05:26,480 --> 00:05:30,860
I need to pass it to the individual build control we have.

63
00:05:30,950 --> 00:05:33,720
So there we not only have to key and the label,

64
00:05:33,740 --> 00:05:36,080
we also have the more button in there.

65
00:05:36,320 --> 00:05:44,470
So when added or when more was clicked and you can name these props of course anything you want,

66
00:05:44,470 --> 00:05:53,660
then I want to pass on props.ingredientAdded, so the property we do receive in build controls, the property

67
00:05:53,750 --> 00:05:58,760
we just set up here and which we're passing to build controls.

68
00:05:58,830 --> 00:06:07,200
Now with that, in build controls I pass it on to the individual build control so that this build control

69
00:06:07,320 --> 00:06:08,530
can call that.

70
00:06:08,730 --> 00:06:16,770
However I also need to of course keep track of which type this build control is of,

71
00:06:16,800 --> 00:06:25,590
so which type this control has. And we do have this type property in the controls array which we use

72
00:06:25,590 --> 00:06:28,130
to create all these controls.

73
00:06:28,200 --> 00:06:38,490
So I should also probably pass on the type to my ingredient, now I could do that but essentially that's

74
00:06:38,490 --> 00:06:40,680
an unnecessary extra loop,

75
00:06:40,920 --> 00:06:46,490
I will now implement a click listener in the build control to just return everything back up.

76
00:06:46,590 --> 00:06:51,110
So I can just omit this and instead set up an ES6 function here,

77
00:06:51,570 --> 00:06:54,340
execute props.ingredientAdded,

78
00:06:54,420 --> 00:07:02,560
so the function reference we're receiving in build controls and there, simply pass back control type.

79
00:07:02,760 --> 00:07:05,280
Remember I have access to control type here

80
00:07:05,330 --> 00:07:12,940
because we are inside that loop where we're looping through all the controls and each control has a type. Now I'm

81
00:07:12,940 --> 00:07:18,730
executing ingredientAdded which in the end will lead to nothing else than addIngredientHandler being

82
00:07:18,730 --> 00:07:19,800
executed

83
00:07:20,080 --> 00:07:26,710
and there, I expect to get the type as an argument which is why I am passing it as an argument here, in

84
00:07:26,740 --> 00:07:28,010
build controls.

85
00:07:28,090 --> 00:07:35,140
Now of course for this to work, this added property which we're passing to a single build control needs to

86
00:07:35,140 --> 00:07:37,990
be connected to the more button.

87
00:07:37,990 --> 00:07:44,920
So on that button I'll add the onClick handler, on click listener I should say, that is provided by react,

88
00:07:44,920 --> 00:07:48,540
keep in mind so that's not a property because that's not a custom component.

89
00:07:48,640 --> 00:07:53,840
That's a built-in element and there, I access props.added.

90
00:07:54,070 --> 00:08:00,820
So this added property which is passed down from build controls which should in the end trigger this

91
00:08:00,820 --> 00:08:02,730
method then.

92
00:08:02,780 --> 00:08:10,470
Now if that if we save all the files and we go to our burger, let's click more and you should be able

93
00:08:10,740 --> 00:08:12,200
to add ingredients,

94
00:08:12,350 --> 00:08:14,780
pretty cool already in my opinion.

95
00:08:14,790 --> 00:08:17,030
Now of course we can't remove them yet though.

96
00:08:17,070 --> 00:08:20,710
So let's work on removing ingredients in the next step.

