1
00:00:02,180 --> 00:00:09,370
So we now need buttons in our order summary so that we have the choice of continuing or canceling.

2
00:00:09,860 --> 00:00:18,680
So in order summary, what I'll do obviously is I'll add buttons, one button here and another one.

3
00:00:18,730 --> 00:00:23,000
And on the first button, I simply want to say CANCEL,

4
00:00:23,050 --> 00:00:25,990
I'll write this in all uppercase for styling reasons,

5
00:00:26,020 --> 00:00:31,670
you can of course write this differently, style this differently and continue here.

6
00:00:31,990 --> 00:00:38,920
So we get the choice, cancel will essentially do the same as clicking on the backdrop does and continue

7
00:00:38,920 --> 00:00:46,510
for now also will or at least it can't do much else because we're missing the other logic where we would

8
00:00:46,510 --> 00:00:48,700
submit this to a server and so on

9
00:00:48,790 --> 00:00:52,340
but this is something we will add throughout the course.

10
00:00:52,340 --> 00:00:56,670
Now these buttons will not look the way I want to look though

11
00:00:56,890 --> 00:00:59,690
so let's make sure to style them.

12
00:01:00,070 --> 00:01:08,410
And actually I might reuse certain button styles throughout the application, having a cancel and a continue

13
00:01:08,410 --> 00:01:10,360
button makes a lot of sense

14
00:01:10,570 --> 00:01:15,800
so maybe we should outsource the button into its own component,

15
00:01:15,970 --> 00:01:21,340
even though there already is a button element in the html, we might still put it into its own component

16
00:01:21,640 --> 00:01:27,850
so that we can wrap it with some default styling and don't have to style that button in any component

17
00:01:27,850 --> 00:01:30,300
where we use it from scratch again.

18
00:01:30,790 --> 00:01:36,430
So for that, I'll go to my UI folder and add a button subfolder with the button.js

19
00:01:36,460 --> 00:01:38,720
file.

20
00:01:38,710 --> 00:01:43,750
Now the code of this button component is super simple as you might guess

21
00:01:43,960 --> 00:01:53,050
it's a functional component which receive some props where I return some jsx surprisingly and I know

22
00:01:53,050 --> 00:01:57,230
it's also very surprisingly that we need to import react here.

23
00:01:58,340 --> 00:02:07,790
Now I need to export the button as to default here of course and with that I now want to simply wrap a

24
00:02:07,790 --> 00:02:13,340
normal button element here but I will need some props to configure it.

25
00:02:13,340 --> 00:02:20,240
I of course want to output props.children here so that I can use my own button like a normal button

26
00:02:20,360 --> 00:02:28,040
and simply wrap the content which should go inside with my custom button element then and I will need

27
00:02:28,640 --> 00:02:35,040
onClick listener for sure where I need to execute props.clicked, for example

28
00:02:35,630 --> 00:02:38,350
and of course this is now the important part,

29
00:02:38,450 --> 00:02:42,490
I need different style links for different types of buttons,

30
00:02:42,590 --> 00:02:46,900
a cancel button, a continue button or something like that.

31
00:02:47,120 --> 00:02:55,700
Let's first of all add the button css file so that we can set up some styings and as before, you

32
00:02:55,700 --> 00:03:03,690
will find a css file attached to this video so that you can get started with the buttons styles quickly.

33
00:03:04,280 --> 00:03:05,570
So here I

34
00:03:05,600 --> 00:03:11,750
imported the content of this attached file and it simply defines a success and a danger button style. The

35
00:03:11,750 --> 00:03:18,460
success button essentially is green and the dangerous button is red or brownish red.

36
00:03:18,620 --> 00:03:23,630
Now we can use that with class name on the button

37
00:03:23,630 --> 00:03:28,180
and of course for that, we need to import classes from the buttons css

38
00:03:28,180 --> 00:03:33,500
file we just populated. Now in the class name here,

39
00:03:33,560 --> 00:03:35,330
we have to pass the string in the end,

40
00:03:35,330 --> 00:03:36,830
keep that in mind.

41
00:03:36,830 --> 00:03:45,890
So I'll add an array because I always want to assign the button class but then conditionally, I'll add the

42
00:03:45,890 --> 00:03:48,830
success or danger class,

43
00:03:49,020 --> 00:03:57,620
so I will set classes button as one element of this array, of classes I want to add and then classes

44
00:03:57,750 --> 00:04:05,910
and now I will dynamically pull out a certain type with props button type for example, button type is

45
00:04:05,910 --> 00:04:12,600
a prop I have to set through outside and button type will have to be either Danger with a capital D or

46
00:04:12,600 --> 00:04:14,920
a Success with a capital S.

47
00:04:15,180 --> 00:04:18,880
And of course you can also use a different approach of assigning the classes,

48
00:04:18,890 --> 00:04:25,310
I like this one because it's really flexible and easy to implement and keep in mind, what we passed to

49
00:04:25,320 --> 00:04:27,190
class has to be a string,

50
00:04:27,210 --> 00:04:29,520
right now it's an array of strings though.

51
00:04:29,700 --> 00:04:36,150
So let's change this by joining this with a whitespace to have a list of classes which is a string in

52
00:04:36,150 --> 00:04:36,710
the end.

53
00:04:37,910 --> 00:04:44,340
Now we got our own button component, in the next video I want to use that button in our ordered summary.

