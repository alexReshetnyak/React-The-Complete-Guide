1
00:00:02,170 --> 00:00:08,830
In the last lecture, we worked on our burger component and made sure that we can output a list of burger

2
00:00:08,830 --> 00:00:16,240
ingredients, actually a list which started as an object and which we then transform into an array.

3
00:00:16,240 --> 00:00:24,580
Now with that, a first important step was taken, what happens now if we actually have a burger which starts

4
00:00:24,580 --> 00:00:26,860
with all ingredients set to 0

5
00:00:26,870 --> 00:00:30,770
though. Now we see that but that's perfectly fine,

6
00:00:30,770 --> 00:00:32,480
we have no ingredients to render,

7
00:00:32,510 --> 00:00:38,270
we don't get an error because we just have an empty array which we try to render but it would be even

8
00:00:38,270 --> 00:00:44,820
better if we could show some message like please start adding ingredients or something like that.

9
00:00:44,840 --> 00:00:51,560
Now to show something in case we have no ingredients, I need to find out if we got no ingredients. Now

10
00:00:51,590 --> 00:00:57,830
transformedIngredients is always going to be an array though,

11
00:00:57,950 --> 00:01:00,800
just an array of empty arrays

12
00:01:00,800 --> 00:01:01,650
in the end.

13
00:01:02,090 --> 00:01:06,040
But that is something which is kind of hard to check for us,

14
00:01:06,080 --> 00:01:14,290
so how can we find out if we got ingredients or not? We can reduce the transformedIngredients array,

15
00:01:14,330 --> 00:01:21,050
for now let's simply console log it so that we get an idea about how it looks like. For now save this,

16
00:01:21,570 --> 00:01:28,010
this is our ingredients array which we output and of course it's a couple of empty arrays and hence

17
00:01:28,010 --> 00:01:30,560
doesn't work or it does work

18
00:01:30,590 --> 00:01:32,600
but it doesn't display anything.

19
00:01:32,600 --> 00:01:36,900
So checking the length won't do the trick because the length is four,

20
00:01:37,030 --> 00:01:43,910
it's these inner arrays which are interesting to us. What we can do is we can simply flatten this array

21
00:01:44,240 --> 00:01:52,070
to make sure we pull out the values of these inner arrays and trade one array only which contains all

22
00:01:52,070 --> 00:01:53,400
these values,

23
00:01:53,630 --> 00:02:04,850
we can do that by adding reduce to our transformedIngredients logic here, reduce is a built-in array function

24
00:02:04,970 --> 00:02:09,240
which allows us to transform an array into something else.

25
00:02:09,410 --> 00:02:14,660
It takes a function as an input and this function receives two arguments passed in automatically by

26
00:02:14,660 --> 00:02:15,770
javascript,

27
00:02:16,040 --> 00:02:26,780
the previous value and the current value. The reduce method does not only accept these callback here

28
00:02:26,780 --> 00:02:31,410
which is executed on every element in this array we return here,

29
00:02:31,430 --> 00:02:34,030
it also accepts an initial value,

30
00:02:34,100 --> 00:02:35,920
let's say an empty array.

31
00:02:35,980 --> 00:02:39,080
So the initial value of the reduced value

32
00:02:39,080 --> 00:02:44,360
now of course you want to adjust this reduced value by returning something

33
00:02:45,160 --> 00:02:52,430
and it will then loop through all the elements and simply add them to the initial values step by step.

34
00:02:52,770 --> 00:03:00,480
So here I want to return the updated values starting with the initial one is then stored in the first argument

35
00:03:00,480 --> 00:03:03,130
which we receive in each loop here.

36
00:03:03,420 --> 00:03:04,920
So array this

37
00:03:04,950 --> 00:03:10,810
argument is the always updated root array which I want to return in the end.

38
00:03:11,190 --> 00:03:18,750
So I will simply concat something to that, concat(el), this will simply take the given element through

39
00:03:18,750 --> 00:03:22,350
which we're looping and add it to this array.

40
00:03:22,350 --> 00:03:25,790
Now if we save this, we get an empty array

41
00:03:26,070 --> 00:03:35,010
and if I reintroduce an ingredient like two cheese pieces, we get an array with two objects and the fact

42
00:03:35,010 --> 00:03:41,070
that these objects look strange simply is related to the fact that these are jsx elements handled

43
00:03:41,070 --> 00:03:42,000
by react,

44
00:03:42,030 --> 00:03:44,330
it is of type cheese though, as you can see.

45
00:03:44,820 --> 00:03:47,420
So this is how we now flattened the array

46
00:03:47,460 --> 00:03:53,790
and if this is unclear, I strongly recommend checking out the documentation of this default javascript

47
00:03:53,850 --> 00:03:57,250
array functions like map and reduce.

48
00:03:57,720 --> 00:04:02,430
So with that, we got an array which is either empty or contains the jsx elements

49
00:04:02,670 --> 00:04:09,820
and since it might be empty, we can simply check if transformedIngredients length is equal to zero,

50
00:04:10,020 --> 00:04:16,950
if that's the case then I want to output a paragraph where I say we start adding elements.

51
00:04:17,060 --> 00:04:18,400
I will therefore convert

52
00:04:18,420 --> 00:04:23,980
this constant transformedIngredients to a variable, in ES6

53
00:04:24,000 --> 00:04:26,270
we use let for this.

54
00:04:26,880 --> 00:04:35,700
And then here, I will set transformedIngredients equal to a paragraph where I will simply say please

55
00:04:35,790 --> 00:04:40,020
start adding ingredients, like this

56
00:04:40,020 --> 00:04:44,010
and we still output transformedIngredients down there.

57
00:04:44,010 --> 00:04:50,100
Save the file and update the burger builder to have no cheese anymore

58
00:04:50,410 --> 00:04:56,490
and now if you save that too, you should simply start adding ingredients and of course this should

59
00:04:56,490 --> 00:04:57,400
also stick

60
00:04:57,420 --> 00:04:59,890
no matter what your viewport is.

61
00:05:00,240 --> 00:05:02,500
That is another important step.

62
00:05:02,530 --> 00:05:08,840
Now the next step is to start adding these controls to let the user add and remove ingredients.

