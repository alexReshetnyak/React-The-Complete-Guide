1
00:00:02,150 --> 00:00:04,690
We did add a toolbar in the last lecture,

2
00:00:04,730 --> 00:00:09,270
let's now add a logo and I'm not going to add the logo to navigation,

3
00:00:09,290 --> 00:00:14,470
I'm going to add it to components because theoretically, we could use that logo anywhere in the application.

4
00:00:14,720 --> 00:00:20,970
So I'm going to create a new folder there, logo, and in that folder a new file, logo.js.

5
00:00:20,990 --> 00:00:27,200
Now I actually want to use an image file as a logo so I'm going to store that image file in the assets

6
00:00:27,200 --> 00:00:28,950
folder, to be precise there

7
00:00:28,960 --> 00:00:33,660
I'll also create the images subfolder into which this image should go.

8
00:00:33,740 --> 00:00:38,480
Now you can find that image I'm talking about attached to this video,

9
00:00:38,510 --> 00:00:45,770
simply add it to the images folder then and you should get this burger logo here, a burger with a transparent

10
00:00:45,830 --> 00:00:47,300
background.

11
00:00:47,300 --> 00:00:54,050
Now I want to use that logo in the logo.js file and the logo component is just going to be a functional

12
00:00:54,050 --> 00:00:54,940
component,

13
00:00:54,950 --> 00:00:56,830
so as always,

14
00:00:57,350 --> 00:01:05,750
component which looks like this which imports react and which then of course exports this function as the

15
00:01:05,750 --> 00:01:07,380
default.

16
00:01:07,460 --> 00:01:11,670
And now, I simply want to display that image here,

17
00:01:11,690 --> 00:01:16,970
I also want to wrap it in a div which sets the background for the image though because the image itself

18
00:01:16,970 --> 00:01:20,290
has a transparent background and I want to set a white one here.

19
00:01:20,660 --> 00:01:26,930
And of course we could even go so far to accept the background color via props and change it dynamically

20
00:01:26,930 --> 00:01:29,450
but that's not what I'm going to do here.

21
00:01:29,510 --> 00:01:31,880
So we have just wrapping div in there,

22
00:01:31,910 --> 00:01:33,780
we're going to have the image tag.

23
00:01:34,250 --> 00:01:41,870
Now the image tag will have a source property and this should actually be set dynamically. Now you could

24
00:01:41,870 --> 00:01:50,270
think that you simply say go up to the assets folder and then to the images folder and to burger logo

25
00:01:50,350 --> 00:01:51,190
png.

26
00:01:51,350 --> 00:01:56,540
Now this will not work as you would expect it to work due to the way our build workflow here is set

27
00:01:56,540 --> 00:01:57,170
up,

28
00:01:57,200 --> 00:02:03,890
keep in mind, the source folder is only the folder we're working in. In the end, webpack will take all these

29
00:02:03,890 --> 00:02:08,010
files, bundle them together and create a new output folder.

30
00:02:08,090 --> 00:02:13,020
We can see that here because we're in development mode where all of that will happen in memory

31
00:02:13,130 --> 00:02:19,640
but once we do publish our app, we will get a real different folder where all the optimized, compiled

32
00:02:19,640 --> 00:02:25,760
and bundled assets are contained in. Now therefore these assets folder here to the source folder will

33
00:02:25,760 --> 00:02:27,980
not be shipped to any real server,

34
00:02:28,100 --> 00:02:30,600
the whole source folder won't be shipped there.

35
00:02:30,770 --> 00:02:36,380
Hence we should also make webpack aware of the fact that we're using this image and we're actually doing

36
00:02:36,380 --> 00:02:40,610
that by importing the image into our javascript file.

37
00:02:40,610 --> 00:02:43,790
Now of course just like for the css files,

38
00:02:43,790 --> 00:02:48,770
this does not mean that webpack mixes the image with our javascript code,

39
00:02:48,770 --> 00:02:49,950
how would that look like

40
00:02:49,950 --> 00:02:57,560
anyways? It just means we make webpack aware of the fact that we're using this image and webpack will then

41
00:02:57,560 --> 00:03:03,860
handle this image with a special plug-in or a special module that was added to webpack, to its config,

42
00:03:04,290 --> 00:03:10,130
will handle the image, will basically copy it over to the destination directory it creates,

43
00:03:10,130 --> 00:03:15,650
again only in memory during development and we'll even optimize the image.

44
00:03:15,650 --> 00:03:20,400
So here we can simply import burger logo from

45
00:03:20,420 --> 00:03:22,670
and now the path to the image,

46
00:03:22,700 --> 00:03:32,750
so in assets images, add the file. And burger logo here will in the end just receive the path off the image

47
00:03:32,870 --> 00:03:35,360
where webpack will copy it to.

48
00:03:35,390 --> 00:03:37,490
So this will be dynamically resolved,

49
00:03:37,520 --> 00:03:43,790
so here we can simply set source to burger logo and this will again refer to a string in the end to

50
00:03:43,790 --> 00:03:48,550
the path where webpack stored the optimized and copied image.

51
00:03:48,560 --> 00:03:50,670
This is important to understand,

52
00:03:51,100 --> 00:03:58,940
now also set an alt text where I'll simply will write my burger or whatever your brand name should be.

53
00:03:58,940 --> 00:04:00,610
So this is the image,

54
00:04:00,620 --> 00:04:09,760
let's now make sure that we also have a background-color and for that, I'll add a logo css file. There

55
00:04:09,800 --> 00:04:16,730
I'll create a logo css class where I want to set a background-color of white, maybe set up padding

56
00:04:16,790 --> 00:04:24,160
of let's say 8px around the image so that it doesn't stretch to the edges of that surrounding div

57
00:04:24,890 --> 00:04:26,380
and that should be it

58
00:04:26,390 --> 00:04:31,970
I guess. Make the div of height 100% and now important,

59
00:04:32,190 --> 00:04:38,090
let's also style the image inside that div which will receive that logo class here in the end

60
00:04:38,390 --> 00:04:46,880
and let's set the image height to 100% too, so that the image does take this height at a maximum

61
00:04:47,330 --> 00:04:51,690
and it does not take its default inherent height which would be higher.

62
00:04:52,100 --> 00:05:01,910
Now save that file and of course import it, import to classes from the logo file in your logo.js file

63
00:05:02,180 --> 00:05:09,500
and then assign your class name classes.Logo to the surrounding div.

64
00:05:09,500 --> 00:05:12,830
Let's now use this and see if the styling fits our needs,

65
00:05:13,160 --> 00:05:18,530
I'll go to the toolbar component because that is where I want to use it here

66
00:05:19,130 --> 00:05:22,610
and of course I'll now add it. So I'll import logo

67
00:05:22,610 --> 00:05:29,060
from and now we have to navigate up all the way to the top components folder and then import that logo

68
00:05:29,060 --> 00:05:30,870
from the logo.js file

69
00:05:31,250 --> 00:05:37,110
and here, I can then simply import my logo component and add it to jsx.

70
00:05:37,160 --> 00:05:40,170
Save everything and this looks ok,

71
00:05:40,250 --> 00:05:45,940
I guess I don't want my image to span the full height of this,

72
00:05:45,950 --> 00:05:54,370
maybe there should be some brown space around it. So what we can simply do is in the toolbar, in the logo

73
00:05:54,370 --> 00:06:02,040
excuse me, adjust the css code to make sure that the logo only uses 80% of the width.

74
00:06:02,060 --> 00:06:07,840
I can already say we will have to touch this later on again when we start implementing this in the side

75
00:06:07,850 --> 00:06:08,490
drawer

76
00:06:08,700 --> 00:06:11,970
but for the toolbar, this should actually do it.

77
00:06:12,330 --> 00:06:20,370
Let's also set the box-sizing to border box so that the 80% height also includes the padding,

78
00:06:20,730 --> 00:06:25,850
and finally maybe let's also give does a border radius of 5px to have rounded edges.

79
00:06:25,860 --> 00:06:30,560
Now with that if we save this, we get this logo which looks really nice in my opinion,

80
00:06:30,780 --> 00:06:33,520
of course you can always tweak this to your needs.

81
00:06:33,990 --> 00:06:37,860
Let's next start working on the navigation items then.

