1
00:00:02,110 --> 00:00:03,700
With the burger ingredient prepared,

2
00:00:03,750 --> 00:00:06,800
let's move on to the burger component

3
00:00:06,990 --> 00:00:09,490
and I will try this in a functional form again,

4
00:00:09,570 --> 00:00:17,220
name the function burger, receive some props and there again, I will use curly braces so that I can also

5
00:00:17,220 --> 00:00:21,260
add some javascript logic before returning jsx.

6
00:00:21,330 --> 00:00:25,280
For now, all I'll do there is return some jsx though

7
00:00:25,380 --> 00:00:32,280
but we will revisit this component to enhance it and conditionally render something else later.

8
00:00:32,280 --> 00:00:41,670
For now, let's import react from react because we well use jsx and let's export a default, the

9
00:00:41,670 --> 00:00:43,860
burger function of course.

10
00:00:43,860 --> 00:00:45,150
Now what is the

11
00:00:45,230 --> 00:00:52,980
jsx I want to export. The jsx should simply use this burger ingredient component

12
00:00:53,040 --> 00:00:58,940
we created, actually multiple of them but I also want to wrap everything in a div.

13
00:00:59,010 --> 00:01:06,780
So here I deliberately use a div because I want to give this wrapper which this burger component essentially

14
00:01:06,780 --> 00:01:09,950
is, it's a wrapper around all the ingredients,

15
00:01:10,150 --> 00:01:15,770
I want to give it some styling to define the width and height of our burger. So for that,

16
00:01:15,780 --> 00:01:17,140
I'll add a new file

17
00:01:17,160 --> 00:01:22,570
the burger.css file and there I'll add up burger css class.

18
00:01:22,650 --> 00:01:24,380
Not I want to give this class a width of

19
00:01:24,420 --> 00:01:28,840
let's say 100% and the margin of auto

20
00:01:29,100 --> 00:01:34,580
but I want to limit the height to 250px and feel free to choose a different height

21
00:01:34,580 --> 00:01:38,840
of course, it's just something I think will look OK.

22
00:01:39,730 --> 00:01:48,880
I will set the overflow to scroll so that even if we build a bigger burger then the 250px, we can

23
00:01:48,880 --> 00:01:55,150
simply scroll it and we don't have it overlap or cut off because we do limit the height here.

24
00:01:55,150 --> 00:02:00,850
If we would limit the height and we build a very big burger, it would somehow take up our entire page

25
00:02:00,850 --> 00:02:03,520
or more than that and that wouldn't look great.

26
00:02:03,520 --> 00:02:10,220
I will also add text-align center to center everything and font-weight should be bold,

27
00:02:10,300 --> 00:02:14,480
we don't print any text yet but we'll do so in the future.

28
00:02:14,530 --> 00:02:21,400
I'll also set the font-size to 1.2rem, this simply is a unit in case you don't know which scales

29
00:02:21,400 --> 00:02:25,050
it based on the default font-size the user selected.

30
00:02:25,330 --> 00:02:28,560
So this is the layout I want to use,

31
00:02:28,600 --> 00:02:31,140
it's the mobile layout though.

32
00:02:31,300 --> 00:02:38,530
I now want to create a media query here where I check if we have a screen width of let's set minimum

33
00:02:38,620 --> 00:02:44,600
1000px and that's important because the burger of course is built logically.

34
00:02:45,040 --> 00:02:48,990
If we have a minimum height of 700px,

35
00:02:49,150 --> 00:02:56,590
if that's the case, then my burger class will be tweaked and I won't set the width to 100% but

36
00:02:56,590 --> 00:03:00,860
to 700px and the height to 600.

37
00:03:01,270 --> 00:03:09,500
I will also add another media query where I will check if the min-width is 500px so a bit smaller,

38
00:03:09,790 --> 00:03:18,850
and if the min height is 401px and if that's the case, I want to take 450px as width

39
00:03:19,170 --> 00:03:30,030
and 400px as height. And finally to also handle devices which are not that wide but pretty tall,

40
00:03:30,070 --> 00:03:33,160
put in other word, in portrait mode,

41
00:03:33,160 --> 00:03:40,100
I want to have a media rule for a minimum width of 500px but a maximum height of 400

42
00:03:40,480 --> 00:03:47,570
and there, I want to make sure that the width is 350 and the height is 300px.

43
00:03:48,040 --> 00:03:56,220
So these are just some media queries to ensure that the burger looks good on as many viewports as possible,

44
00:03:56,470 --> 00:04:00,270
as always feel free to tweak this to your needs

45
00:04:00,340 --> 00:04:03,790
if you feel like it doesn't look that good on your device.

46
00:04:03,790 --> 00:04:05,260
Now enough of css

47
00:04:05,270 --> 00:04:08,770
let's go back to the burger and let's import the css

48
00:04:08,770 --> 00:04:13,510
classes we just added, store it in that classes object thereafter.

49
00:04:13,600 --> 00:04:19,900
Let's import them from the burger css file and let's attach them to that wrapping div with class

50
00:04:19,900 --> 00:04:22,490
name and the class always is burger,

51
00:04:22,510 --> 00:04:25,210
the media query doesn't matter for that.

52
00:04:25,270 --> 00:04:28,730
Now we can start adding ingredients inside of that burger,

53
00:04:28,960 --> 00:04:37,070
so I will import burger ingredient from the BurgerIngredient folder and there, the burger ingredients

54
00:04:37,170 --> 00:04:44,770
css file and now we can simply use it as a self-closing component like that, burger ingredient but

55
00:04:44,770 --> 00:04:47,200
keep in mind, we have to define a type.

56
00:04:47,440 --> 00:04:49,060
The type can be a string

57
00:04:49,090 --> 00:04:50,440
actually it can't be a string,

58
00:04:50,470 --> 00:04:51,660
it has to be a string,

59
00:04:51,660 --> 00:04:57,780
we implement that prop type checking, and I will start with a bread-top here

60
00:04:57,940 --> 00:05:00,690
so I guess it makes sense to have this at

61
00:05:00,720 --> 00:05:03,400
well the top. At the bottom

62
00:05:03,400 --> 00:05:12,080
you're never going to guess it, I'll add bread-bottom. And now in between let's add two more ingredients, maybe

63
00:05:12,320 --> 00:05:17,640
some cheese and below that, meat.

64
00:05:17,890 --> 00:05:18,920
Now with that,

65
00:05:18,940 --> 00:05:25,620
I got my burger component which should render a burger with bread, meat and cheese.

66
00:05:25,630 --> 00:05:29,950
Now let's implement this and let's simply render this burger.

67
00:05:30,100 --> 00:05:31,790
We're exporting it already

68
00:05:32,050 --> 00:05:39,700
so now we can go to our burger builder container and there, replace this dummy div with our burger.

69
00:05:40,030 --> 00:05:43,230
So I'll import burger from

70
00:05:43,510 --> 00:05:51,500
and now, we have to go up to the source level, then into components, into burger and import burger.js

71
00:05:51,570 --> 00:05:58,870
and now replace that div with our self-closing burger component.

72
00:05:59,020 --> 00:06:07,740
Let's save this, save everything and let's reload the page and you should see this burger, in case your

73
00:06:07,740 --> 00:06:09,310
styling is off,

74
00:06:09,310 --> 00:06:13,570
make sure to compare your css code of that component with mine.

75
00:06:13,810 --> 00:06:18,450
You should see that it also looks OK if you shrink and resize the page, again

76
00:06:18,460 --> 00:06:24,340
feel free to adjust this css to fit all possible sizes you might need.

77
00:06:24,400 --> 00:06:25,280
That's the burger,

78
00:06:25,300 --> 00:06:26,530
that's great.

79
00:06:26,530 --> 00:06:28,040
Not so great is that

80
00:06:28,040 --> 00:06:31,780
everything about this burger is in the end hard coded.

81
00:06:31,780 --> 00:06:38,800
We're using components but we're not able to change this burger dynamically and we're not even rendering

82
00:06:38,800 --> 00:06:40,050
this dynamically.

83
00:06:40,100 --> 00:06:47,020
So let's start by managing the ingredients via state and rendering the burger dynamically in the next

84
00:06:47,020 --> 00:06:47,790
lectures.

