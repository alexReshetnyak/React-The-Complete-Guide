1
00:00:02,260 --> 00:00:06,790
In the last lecture we added this order now button down there and it's working nice.

2
00:00:06,790 --> 00:00:12,640
Now I want to make sure that once we click the button, we open this modal with the order summary.

3
00:00:12,730 --> 00:00:19,730
Now for that we obviously need a modal, we need a backdrop and we need to show some order summary,

4
00:00:19,810 --> 00:00:26,590
the idea behind the modal is to have a wrapping element which provides the styling which then simply

5
00:00:26,590 --> 00:00:29,190
wraps itself about any content we want to show

6
00:00:29,200 --> 00:00:33,010
in that modal, that makes sense to me at least.

7
00:00:33,010 --> 00:00:40,660
So I will create such a modal component and I want to create it in a new folder, in a components

8
00:00:40,660 --> 00:00:45,510
folder, I'll create a UI subfolder for some general UI

9
00:00:45,580 --> 00:00:52,170
elements like the modal. So there I will add modal and in there, the modal.js file.

10
00:00:52,690 --> 00:00:59,950
As I said, we'll also need a backdrop so I will add a backdrop folder in the UI folder too, I didn't

11
00:00:59,980 --> 00:01:05,000
add the backdrop to the modal because we might reuse the backdrop in other places too,

12
00:01:05,020 --> 00:01:09,600
for example for the side drawer, for the navigation we're about to add later.

13
00:01:10,120 --> 00:01:13,960
And in the backdrop folder, I therefore also to add a backdrop.js file.

14
00:01:14,080 --> 00:01:16,310
Now we have these two components

15
00:01:16,540 --> 00:01:25,450
and let's start with the modal now. How should this modal component look like? It's going to be a functional

16
00:01:25,450 --> 00:01:26,160
component

17
00:01:26,170 --> 00:01:28,750
it doesn't have any state attached to it,

18
00:01:28,750 --> 00:01:34,800
It just received some props and returned some jsx and it might surprise you

19
00:01:34,810 --> 00:01:42,460
but of course we import react from react here too and we export the modal function as the default

20
00:01:42,700 --> 00:01:44,400
of this file.

21
00:01:45,340 --> 00:01:52,990
Now how does the jsx code look like then? The modal should simply be a div in the end which wraps itself

22
00:01:52,990 --> 00:01:54,800
about around any content,

23
00:01:55,000 --> 00:02:02,260
so a div which is wrapped around props.children and props.children really can be anything, can be our

24
00:02:02,260 --> 00:02:10,240
own components, can be some text, a paragraph, that is totally up to us how we use the modal and we can

25
00:02:10,240 --> 00:02:12,340
pass anything in there.

26
00:02:12,460 --> 00:02:19,660
Of course the wrapping div should receive some styling to well, to look good in the end, to have a modal

27
00:02:19,750 --> 00:02:20,590
look.

28
00:02:20,860 --> 00:02:27,310
So for that I'm going to add a modal modal css file here and there,

29
00:02:27,310 --> 00:02:33,280
I also share some css code which you can find attached to this video which you may just paste in

30
00:02:33,280 --> 00:02:33,820
there.

31
00:02:33,940 --> 00:02:42,970
There we have our modal class and we can now see that this simply creates a fixed position modal, centers this

32
00:02:43,090 --> 00:02:50,550
in the middle of the page and gives us a little box shadow and also changes some of the stylings for

33
00:02:50,560 --> 00:02:56,840
broader screen, that really is all. With that, we can import the classes from that css file.

34
00:02:56,840 --> 00:03:04,630
So import classes from the modal css file and assign it to the wrapping div with the class name

35
00:03:04,900 --> 00:03:05,910
attribute.

36
00:03:05,920 --> 00:03:13,110
So here we have classes.Modal with a capital M because that's the name of the css class.

37
00:03:13,180 --> 00:03:16,560
By the way make sure to save that css file after

38
00:03:16,600 --> 00:03:18,980
you paste my content in there.

39
00:03:19,120 --> 00:03:22,310
So that's the modal.js file,

40
00:03:22,360 --> 00:03:25,000
this will create such a modal.

41
00:03:25,000 --> 00:03:27,540
Now let's add this modal right away

42
00:03:27,610 --> 00:03:34,280
and the question of course is where in our application shall we add the modal?

43
00:03:34,870 --> 00:03:41,530
Well I would say we add in a place where we want to show it because that is the logical place

44
00:03:41,530 --> 00:03:47,560
where it belongs and where we probably have the state and the methods to control that display.

45
00:03:47,890 --> 00:03:50,410
So in our case, that's the burger builder,

46
00:03:50,920 --> 00:03:55,320
let's simply add an import at the top modal from

47
00:03:55,540 --> 00:04:02,200
and now we need to navigate to that modal file which we can find in components,

48
00:04:02,200 --> 00:04:09,310
UI modal and there, the modal.js file, as always without the file extension.

49
00:04:09,310 --> 00:04:13,970
And then take the modal and add it to the jsx of the burger builder.

50
00:04:14,050 --> 00:04:16,280
Now here, we got our auxiliary component,

51
00:04:16,300 --> 00:04:18,380
we got the burger and the build controls,

52
00:04:18,580 --> 00:04:24,280
Now here I'll simply add modal and of course this will soon be adjusted to not be visible all the time.

53
00:04:24,980 --> 00:04:25,240
Right

54
00:04:25,240 --> 00:04:29,920
now if we save this, we see the modal box here in the middle,

55
00:04:29,920 --> 00:04:35,640
of course without any content because as I said we should wrap this modal around the content we want to display

56
00:04:35,950 --> 00:04:41,490
and right now, it's a self-closing element and therefore not wrapping itself around anything.

57
00:04:41,500 --> 00:04:49,320
The goal was to show the order summary and this burger builder file is already getting quite crowded

58
00:04:49,540 --> 00:04:57,910
so I don't want to add the logic to transform this array into a nicely structured summary into this file,

59
00:04:57,910 --> 00:05:06,370
I will outsource it into its own component as this is generally a good practice in react, have granular

60
00:05:06,400 --> 00:05:08,460
focused components.

61
00:05:08,820 --> 00:05:15,130
The component I want to create is an orderSummary component and I will add this

62
00:05:15,180 --> 00:05:23,800
under components burger and there, it makes sense to be added on the same level as build controls and

63
00:05:23,800 --> 00:05:25,750
burger ingredients, I guess.

64
00:05:25,750 --> 00:05:33,350
So let's add the order summary there and in there of course, the orderSummary.js file.

65
00:05:33,520 --> 00:05:40,950
Now in here, I'll create a function orderSummary which receives some props and which then should have

66
00:05:40,950 --> 00:05:47,890
a normal function body because I'll have to execute some code to get the orderSummary, the ingredients

67
00:05:47,920 --> 00:05:51,850
I get into the right format and so on.

68
00:05:51,940 --> 00:06:02,810
Of course as always, we need to import react from react and we also want to export orderSummary as

69
00:06:02,810 --> 00:06:05,270
the file default,

70
00:06:05,300 --> 00:06:12,030
now how should we output the orderSummary, how should this look like? In the end,

71
00:06:12,040 --> 00:06:18,590
I want to have like a title which says your order, maybe a short text then a list of all the items

72
00:06:18,590 --> 00:06:22,830
in the order and the price and then maybe a question,

73
00:06:22,880 --> 00:06:24,330
continue to checkout

74
00:06:24,530 --> 00:06:25,590
and some buttons,

75
00:06:25,660 --> 00:06:27,290
so quite some stuff.

76
00:06:27,290 --> 00:06:29,980
Now I don't really need a wrapping element here

77
00:06:30,080 --> 00:06:41,480
therefore I will import my auxiliary element from aux, whoops hoc aux.

78
00:06:41,490 --> 00:06:48,490
So now we can return some jsx code here with a wrapping auxiliary element and no worries,

79
00:06:48,490 --> 00:06:53,850
we're going to add some logic in front of the return statement so that it makes sense to have a real

80
00:06:53,850 --> 00:06:57,270
function body and not just the return statement.

81
00:06:57,750 --> 00:07:06,080
So there, I will add a h3 tag where I say your order, below that, I want to add a paragraph where I simply

82
00:07:06,080 --> 00:07:06,710
say

83
00:07:08,760 --> 00:07:15,460
delicious burger with the following ingredients

84
00:07:15,510 --> 00:07:22,520
colon and now I want to add an unordered list which should contain well as many list items as needed

85
00:07:22,790 --> 00:07:26,030
to output all the information about my burger.

86
00:07:26,030 --> 00:07:29,090
So for each ingredient, one list item.

87
00:07:29,150 --> 00:07:34,850
Of course I could hardcode that there but I want to create this dynamically because we're always dynamic

88
00:07:34,880 --> 00:07:41,240
in react, so they're able to add a new variable, actually a constant because I don't plan on changing

89
00:07:41,240 --> 00:07:41,990
it,

90
00:07:41,990 --> 00:07:46,700
ingredientSummary which should take some ingredients

91
00:07:46,700 --> 00:07:53,730
I expect to get as props and basically map them into list items.

92
00:07:53,810 --> 00:08:01,010
Now for the ingredients, we're going to have the old problem that these are in an object format and not

93
00:08:01,160 --> 00:08:02,540
an array.

94
00:08:02,540 --> 00:08:08,360
Now of course we could also create this component in a way to expect an array and transform

95
00:08:08,360 --> 00:08:12,790
the array in the burger builder where we will then pass it on to orderSummary,

96
00:08:13,100 --> 00:08:17,990
but you can also do it the other way around and simply pass the object on and do the transformation

97
00:08:17,990 --> 00:08:19,330
in orderSummary.

98
00:08:19,340 --> 00:08:26,390
It's the approach I'll follow because I believe that this allows us to keep the burger builder a bit leaner

99
00:08:26,600 --> 00:08:30,370
though you could argue for both directions where this should happen.

100
00:08:30,680 --> 00:08:36,770
So here, I expect to get my ingredients in a object format and in the end what I want to output is something

101
00:08:36,770 --> 00:08:37,160
like this,

102
00:08:37,160 --> 00:08:45,350
I want to have a list item where I can basically say the name like salad it and then simply the number

103
00:08:45,440 --> 00:08:47,060
of ingredients of that type

104
00:08:47,090 --> 00:08:51,040
and I would have a list item for each ingredient of course.

105
00:08:51,080 --> 00:08:56,000
Now when hard coding this, it would of course be easier because I could just hard code four list items

106
00:08:56,270 --> 00:09:00,880
and access the respective property on the ingredients object

107
00:09:01,040 --> 00:09:04,000
but I want to create it in a bit more flexible way,

108
00:09:04,060 --> 00:09:06,560
this is the output I want to have in the end though.

109
00:09:06,650 --> 00:09:17,390
So what we can do is we can take the ingredients we get here and again use object keys to transform

110
00:09:17,390 --> 00:09:22,790
this into an array of the keys of salad and so on.

111
00:09:22,790 --> 00:09:25,620
Now as before, we want to map this,

112
00:09:25,910 --> 00:09:30,140
We want to map this into an array of jsx elements at the end.

113
00:09:30,140 --> 00:09:34,110
So we got the ingredients keys here as an input and we want to return

114
00:09:34,190 --> 00:09:39,910
well basically this list item I just defined here,

115
00:09:39,980 --> 00:09:43,240
so let's grab the list item and add it here.

116
00:09:43,270 --> 00:09:48,290
Now how do we get the salad there or the ingredient name?

117
00:09:48,290 --> 00:09:58,700
Now that's just our ingredient key and the value is just props.ingredients and then access the ingredient

118
00:09:58,700 --> 00:10:00,800
key and that's all.

119
00:10:00,860 --> 00:10:09,050
The only thing I'll add is I'll wrap the ingredient key here in a span because I want to capitalize it

120
00:10:09,230 --> 00:10:15,950
so turn the first letter into a capital one because in our ingredients array managed in the burger builder,

121
00:10:16,250 --> 00:10:18,200
in the ingredients object, excuse me

122
00:10:18,260 --> 00:10:20,600
we of course have salad, bacon and so on

123
00:10:20,630 --> 00:10:22,860
all starting with lowercase characters,

124
00:10:23,000 --> 00:10:27,260
now for outputting them, I want to have uppercase starting characters.

125
00:10:27,260 --> 00:10:35,180
So therefore I wrap the name into a span so that I can use some inline stylings here and simply set

126
00:10:35,180 --> 00:10:37,240
this to a javascript object,

127
00:10:37,340 --> 00:10:45,860
that is why I have double curly braces, the outer pair is for marking a dynamic entry and the inner

128
00:10:45,950 --> 00:10:48,580
curly braces are the javascript object,

129
00:10:48,980 --> 00:10:54,800
and there I will set the text-transform css property to capitalize,

130
00:10:54,800 --> 00:10:58,360
so simply using some inline styles here.

131
00:10:58,800 --> 00:11:04,570
Now let me wrap this over multiple lines to make it a bit easier to read

132
00:11:04,580 --> 00:11:13,030
so we have the list item here and in that list item, we have our span.

133
00:11:13,080 --> 00:11:17,650
Now this is what I want to create, a list of these list items

134
00:11:17,820 --> 00:11:24,870
and now we can simply output ingredients summary inside of that unordered list and I won't style this

135
00:11:24,870 --> 00:11:32,490
unordered list because here for this rare occasion, I'll actually use the default style of all these elements

136
00:11:32,790 --> 00:11:38,950
which is why the orderSummary component doesn't even have its own OrderSummary css file

137
00:11:39,030 --> 00:11:43,270
though of course you are free to add one and style this to your needs.

138
00:11:43,590 --> 00:11:50,920
And then I want to add a paragraph where I say continue to checkout, like that.

139
00:11:51,160 --> 00:11:57,360
Now let's go with this approach for now, with this orderSummary and let's use it in the burger builder.

140
00:11:57,760 --> 00:12:02,780
I want to pass it between my modal opening and closing tags

141
00:12:03,010 --> 00:12:10,720
SO let's first of all import this orderSummary component from our components folder and there from

142
00:12:10,720 --> 00:12:17,020
the burger folder, from the orders summary folder and the orders summary file, these import statements

143
00:12:17,020 --> 00:12:19,710
can get quite long.

144
00:12:19,720 --> 00:12:23,950
Now let's grab that orderSummary variable in which the save the import

145
00:12:24,380 --> 00:12:29,770
and let's go down to the modal and change this to have the opening and closing tag.

146
00:12:30,040 --> 00:12:38,800
And in between, I now want to output my orderSummary of course as a self-closing component here.

147
00:12:39,760 --> 00:12:40,980
To work correctly,

148
00:12:40,990 --> 00:12:47,680
orderSummary of course needs to get the ingredients property because we're accessing ingredients on

149
00:12:47,680 --> 00:12:49,960
the props object here

150
00:12:50,760 --> 00:12:52,140
in orderSummary.

151
00:12:52,560 --> 00:12:56,990
So we need to pass our ingredients and we do get them from our state,

152
00:12:57,000 --> 00:13:00,090
so this.state.ingredients.

153
00:13:00,390 --> 00:13:06,170
Now let's see how that looks like, if we save all the files and we go back to our application,

154
00:13:07,800 --> 00:13:11,610
you'll see that we get a warning, we forgot to add the key to our array

155
00:13:11,670 --> 00:13:13,890
but generally, this looks good.

156
00:13:14,130 --> 00:13:17,030
And if I click these buttons, it updates the modal too

157
00:13:17,160 --> 00:13:21,240
and of course, that would be a good idea to not constantly show this modal but we're going to work

158
00:13:21,240 --> 00:13:22,060
on this soon.

159
00:13:22,230 --> 00:13:25,110
Let's fix this key error first

160
00:13:25,170 --> 00:13:27,070
and of course it's easy to fix,

161
00:13:27,090 --> 00:13:33,000
try this on your own. It's in the orderSummary of course, here on the list item

162
00:13:33,010 --> 00:13:38,180
we have to add a key and that key should be a unique key

163
00:13:38,200 --> 00:13:45,280
as you know, now let's simply use the igKey, so salad and so on as a key here

164
00:13:45,400 --> 00:13:48,190
and with that, the warning should be gone.

165
00:13:48,380 --> 00:13:54,340
Now the next step is to make sure that we don't always see the modal but that we can add it or show

166
00:13:54,340 --> 00:13:54,850
it

167
00:13:54,850 --> 00:13:56,410
once you click order now.

