1
00:00:02,170 --> 00:00:07,660
Ora imparerai tutta la teoria su come i componenti funzionano come si passano i dati su come funzionano gli oggetti di scena

2
00:00:07,660 --> 00:00:08,350
e cos via.

3
00:00:08,350 --> 00:00:12,760
E questo  tutto molto bello, ma come si progetta in realt un'applicazione di re-act.

4
00:00:12,760 --> 00:00:14,260
Come funziona.

5
00:00:14,260 --> 00:00:18,470
Ovviamente puoi dividerlo in passaggi pi granulari, quindi senza errori.

6
00:00:18,490 --> 00:00:25,840
Ma qui ci sono tre passi molto importanti che vedo e che passo regolarmente durante la pianificazione di un'applicazione di re-act.

7
00:00:25,930 --> 00:00:30,810
Il primo passo consiste nella pianificazione della struttura del componente componentry.

8
00:00:30,880 --> 00:00:38,620
hai creato un design di app da solo e ora tocca a te dividerlo in componenti re-act.

9
00:00:38,620 --> 00:00:42,760
Probabilmente sarai progettato dal tuo designer o in pratica

10
00:00:42,760 --> 00:00:48,880
Ed  assolutamente normale che i risultati che potresti avere alla fine potrebbero sembrare diversi rispetto alla

11
00:00:48,880 --> 00:00:54,610
tua componente inizialmente pianificata, ma  molto importante avere un'idea di cosa dovrebbe andare nel suo

12
00:00:54,700 --> 00:00:55,950
componente e cosa no.

13
00:00:56,110 --> 00:01:00,640
La parte importante della tua domanda ovviamente  lo stato dell'applicazione.

14
00:01:00,640 --> 00:01:06,820
Ad esempio, tutti i traduttori con i dati che prevedi di utilizzare e manipolare nella tua applicazione,

15
00:01:06,830 --> 00:01:11,270
e naturalmente lo farai durante le prossime lezioni della nostra applicazione Bergere.

16
00:01:11,350 --> 00:01:16,600
determiner ci che dobbiamo rendere e anche ci che l'utente deve pagare alla fine.

17
00:01:16,600 --> 00:01:20,650
Dobbiamo tenere traccia degli ingredienti che un utente ha aggiunto perch

18
00:01:20,650 --> 00:01:27,280
Ora, una volta che conosci la struttura e la decomposizione della tua applicazione e per dichiarare che la

19
00:01:27,280 --> 00:01:30,100
userai, non puoi pianificare componenti o contenitori.

20
00:01:30,190 --> 00:01:35,650
Quindi quali componenti della tua applicazione dovrebbero essere apolidi o funzionali.

21
00:01:35,680 --> 00:01:42,690
Talvolta si parla anche di componenti stupidi e quali componenti devono essere componenti completi di stato

22
00:01:42,700 --> 00:01:49,030
creati con tale parola chiave di classe perch devono gestire alcuni stati e distribuirli

23
00:01:49,180 --> 00:01:52,910
ai loro componenti meno componenti allo stato meno componenti.

24
00:01:52,960 --> 00:01:59,360
Questi sono i tre passaggi che passo regolarmente e questi sono i passi che voglio passare attraverso il gabber.

25
00:01:59,590 --> 00:02:05,890
Pianificheremo la struttura dei nostri componenti componentry e quindi daremo un'occhiata a quale stato ci serve

26
00:02:05,890 --> 00:02:10,540
e cosa pu essere un componente e quale dovrebbe essere un contenitore.

27
00:02:10,540 --> 00:02:13,570
E poi inizieremo a costruire l'applicazione.

28
00:02:13,600 --> 00:02:19,570
E come vedrai, potremmo persino aggiungere pi componenti di quanto inizialmente previsto, perch vediamo che

29
00:02:19,570 --> 00:02:21,320
possiamo dividerci ancora di pi.

30
00:02:21,370 --> 00:02:22,660
O forse  una divisione.

31
00:02:22,660 --> 00:02:27,650
Abbiamo pianificato non ha senso una volta che iniziamo ad implementarlo e questo  perfettamente normale.

32
00:02:27,730 --> 00:02:29,950
Ma avere un piano  ovviamente molto importante.

