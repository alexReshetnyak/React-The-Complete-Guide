1
00:00:02,140 --> 00:00:05,600
In the last lecture we added the logic to add ingredients,

2
00:00:05,730 --> 00:00:11,520
now of course I also want to do the opposite and remove them. I already added the removeIngredientHandler

3
00:00:11,640 --> 00:00:14,030
to the burger builder container,

4
00:00:14,040 --> 00:00:16,800
now we need to fill that with some life.

5
00:00:16,800 --> 00:00:21,190
The logic is pretty similar to the logic we had in the addIngredientHandler,

6
00:00:21,210 --> 00:00:22,810
it's basically just the opposite,

7
00:00:22,830 --> 00:00:24,540
deducting an ingredient.

8
00:00:24,860 --> 00:00:28,310
So I will copy the code for now, add it here.

9
00:00:28,560 --> 00:00:35,290
I'm interested in the old count, the updatedCount is the oldCount minus one, updatedIngredients

10
00:00:35,310 --> 00:00:42,120
still follows the same logic here and the same for the price, though it's of course not a price addition,

11
00:00:42,280 --> 00:00:48,340
it's a price deduction which I then also want to deduct here and not add,

12
00:00:48,590 --> 00:00:49,590
and that actually is all.

13
00:00:49,590 --> 00:00:56,540
So I simply reduce my ingredient count by 1 and I deduct the price.

14
00:00:56,540 --> 00:01:01,380
Now with that, we're updating the ingredients and the price again

15
00:01:01,670 --> 00:01:04,760
let's now go back to or let's now

16
00:01:04,770 --> 00:01:09,320
pass this method handler, this method reference here,

17
00:01:09,330 --> 00:01:10,490
this event handler,

18
00:01:10,550 --> 00:01:13,100
let's pass it down to build controls.

19
00:01:13,310 --> 00:01:19,370
So there I want to have the ingredientRemove prop where I pass the reference to this method we

20
00:01:19,390 --> 00:01:26,330
just added some logic to and this ingredient remove property here can be used inside build controls

21
00:01:26,330 --> 00:01:34,430
now, where I not only want to have added on the individual build control but also removed and here, I'll then go and

22
00:01:34,470 --> 00:01:41,200
executed an arrow function where I simply execute ingreidientRemoved and passed the type of the ingredient

23
00:01:41,240 --> 00:01:44,030
which should be removed, following the same logic

24
00:01:44,150 --> 00:01:46,370
as for the addition.

25
00:01:46,570 --> 00:01:53,350
Now we need to hook up the remove property in the individual build control and there on the less button,

26
00:01:53,450 --> 00:02:00,430
I'll therefore add an onClick listener too and simply execute props removed or not executed, pass a

27
00:02:00,430 --> 00:02:02,380
reference to that

28
00:02:02,470 --> 00:02:05,930
remove props which holds a reference to that method

29
00:02:05,930 --> 00:02:10,510
we want to execute so that once the button is clicked and this event is fired,

30
00:02:10,510 --> 00:02:12,720
we execute that method.

31
00:02:13,330 --> 00:02:16,000
With that let's save this and let's see if that works,

32
00:02:16,000 --> 00:02:21,400
let's add salad and bacon and let's remove bacon and salad and cheese.

33
00:02:21,400 --> 00:02:27,190
Now we have a problem if we start deducting elements we don't have though, we get an error then and it

34
00:02:27,190 --> 00:02:31,800
makes sense because we tried to remove an ingredient which we don't have.

35
00:02:32,020 --> 00:02:35,950
So our burger builder here, the state becomes negative,

36
00:02:35,950 --> 00:02:39,110
we have -1 bacon and that throws an error

37
00:02:39,130 --> 00:02:43,160
because we can't create an array to render from a negative value.

38
00:02:43,570 --> 00:02:49,960
So we should fine tune our removeIngredientHandler by also checking if we do have ingredients to begin

39
00:02:49,960 --> 00:02:50,620
with.

40
00:02:50,950 --> 00:02:54,000
So the old count of a given ingredient

41
00:02:54,130 --> 00:02:56,460
should be greater than zero.

42
00:02:56,620 --> 00:03:06,070
So if old count is smaller or equal than 0, then I essentially want to return so that nothing happens

43
00:03:06,200 --> 00:03:12,470
if we try to reduce an ingredient which we don't have. So now if I click on salad or bacon or anything

44
00:03:12,470 --> 00:03:14,270
else, nothing happens.

45
00:03:14,740 --> 00:03:18,310
Of course it would be even better if the button would be disabled then

46
00:03:18,440 --> 00:03:22,180
so let's introduce that logic too. There,

47
00:03:22,190 --> 00:03:28,730
I want to pass some information about which button should be enabled and which button should be disabled

48
00:03:29,030 --> 00:03:30,840
to my build controls.

49
00:03:31,670 --> 00:03:34,120
For that let's scroll down to the render method

50
00:03:34,220 --> 00:03:42,470
and before we return jsx, I will create a new constant which I'll name disableInfo and there, I simply

51
00:03:42,470 --> 00:03:49,640
want to create a new object where I will distribute the properties of this.state.

52
00:03:49,640 --> 00:03:51,060
ingredients,

53
00:03:51,080 --> 00:03:56,120
keep in mind, this.state.ingredients simply is this object,

54
00:03:56,240 --> 00:04:00,430
so I basically copied it in an immutable way.

55
00:04:00,440 --> 00:04:05,080
Now this object alone is of course not all the information I want,

56
00:04:05,180 --> 00:04:15,050
now I'll create a for/in loop so loop through all the keys in disableInfo and it will simply check if this

57
00:04:15,110 --> 00:04:19,980
is zero or less and it will update the disableInfo key,

58
00:04:20,090 --> 00:04:26,980
so salad, meat and so on with that information of that check, so that the object will not have the shape

59
00:04:26,990 --> 00:04:31,330
of salad, 0 meat, 0

60
00:04:31,460 --> 00:04:35,510
but simply if it should be disabled or not. So salad,

61
00:04:35,540 --> 00:04:36,990
true,

62
00:04:37,040 --> 00:04:42,190
meat, true and true will be the value which is assigned if it should be disabled.

63
00:04:42,380 --> 00:04:47,370
So we will check if disableInfo for a given key is smaller or equal than zero

64
00:04:47,420 --> 00:04:52,220
because keep in mind, disableInfo key is the value of each key,

65
00:04:52,220 --> 00:04:58,830
so zero in all these cases at the start, and this check here will turn true or false.

66
00:04:58,940 --> 00:05:03,090
So we will update this in our copied object, not in the original one,

67
00:05:03,170 --> 00:05:06,790
the copied one with true or false.

68
00:05:06,800 --> 00:05:14,890
Now with that, we can pass the disableInfo, the disableInfo to the build controls component here.

69
00:05:14,960 --> 00:05:21,860
So there I will set a disable property and pass disabledInfo.

70
00:05:21,860 --> 00:05:28,180
Now of course you should take advantage of this disabled property in this build controls component

71
00:05:28,700 --> 00:05:34,760
and there we should pass this information to the individual build control, to let it know if it should

72
00:05:34,760 --> 00:05:37,190
disable that button or not.

73
00:05:37,190 --> 00:05:40,450
So I will set a disabled property there too

74
00:05:40,760 --> 00:05:48,530
and for that, I will use the disabledInfo I am getting on the disabled prop of build controls, not build

75
00:05:48,530 --> 00:05:49,960
control, build controls

76
00:05:49,970 --> 00:05:56,660
I'm using in the burger builder container, and there I now of course want to access the disabledInformation

77
00:05:56,750 --> 00:05:58,730
for a given control type

78
00:05:58,940 --> 00:06:06,530
because keep in mind that the structure of disabledInfo is basically of that form, salad,

79
00:06:06,620 --> 00:06:10,650
true, meat false and so on.

80
00:06:10,730 --> 00:06:14,750
So this is what we'll have in this restructured object

81
00:06:14,750 --> 00:06:16,730
and if it's true, it should be disabled,

82
00:06:16,730 --> 00:06:23,510
so what we need is we need to access the information for a given type of control and thankfully we of

83
00:06:23,510 --> 00:06:29,980
course know that type in build controls because we're looping through controls where we store that type

84
00:06:29,990 --> 00:06:33,680
which we also use for adding and removing elements

85
00:06:33,680 --> 00:06:40,910
but here also to access the right disabledInfo. And with that, we can use the disabled prop in the individual

86
00:06:40,910 --> 00:06:49,940
build control to disable the less button and disabled is a default property we can set on a html button

87
00:06:49,940 --> 00:06:50,710
element

88
00:06:50,870 --> 00:06:54,030
and of course I want to set it equal to props.disabled,

89
00:06:54,110 --> 00:06:56,870
so either to true or to false,

90
00:06:56,930 --> 00:07:01,850
and I will restructure this all over multiple lines to make it a bit easier to read.

91
00:07:01,940 --> 00:07:03,860
So I hope the logic is clear here,

92
00:07:03,860 --> 00:07:11,210
we're simply making sure that the less button gets disabled if the ingredient is at zero or less.

93
00:07:11,210 --> 00:07:14,020
So now you see all the buttons are blocked,

94
00:07:14,060 --> 00:07:18,900
the styling is set up because it was part of that css file I shared with you,

95
00:07:19,130 --> 00:07:23,660
and once we start adding an ingredient, we can click the button again.

96
00:07:23,810 --> 00:07:26,120
So that's our build controls working,

97
00:07:26,240 --> 00:07:28,790
let's also output the price now.

