1
00:00:02,170 --> 00:00:09,910
W ostatnim wykadzie zidentyfikowalimy tutaj ukad aplikacji i tego drzewa komponentw.

2
00:00:09,970 --> 00:00:12,590
To oczywicie bardzo wany krok.

3
00:00:12,610 --> 00:00:14,640
Teraz to tylko jedna cz.

4
00:00:14,650 --> 00:00:18,490
Wszyscy musimy wiedzie, jaki stan bdziemy uywa w naszej aplikacji.

5
00:00:18,500 --> 00:00:24,310
Ten stan staje si wany, poniewa pozwala nam rwnie okreli, co powinno by komponentem, a co

6
00:00:24,310 --> 00:00:25,300
powinno by kontenerem.

7
00:00:25,330 --> 00:00:30,230
Wic jaki powinien by stan mniej komponentu i co powinno by penym komponentem stanu.

8
00:00:30,280 --> 00:00:38,410
Teraz zastanwmy si nad stanem aplikacji lub podsumujmy stan aplikacji, tak jak to

9
00:00:38,410 --> 00:00:39,840
tutaj planujemy.

10
00:00:40,030 --> 00:00:48,050
Teraz w stanie zdecydowanie musimy zarzdza skadnikami hamburgerw, skadniki dodane przez uytkownika bd

11
00:00:48,070 --> 00:00:57,900
prawdopodobnie jakim obiektem javascript, w ktrym mamy co takiego jak miso 1 razy ona jest

12
00:00:58,530 --> 00:01:01,790
dwa razy i tak dalej.

13
00:01:01,860 --> 00:01:03,530
Wic to mog by skadniki.

14
00:01:03,720 --> 00:01:09,330
Chcemy rwnie wiedzie, czy uytkownik aktualnie sprawdza hamburgera.

15
00:01:09,340 --> 00:01:18,380
Wic jeli klikne na pre-Chase lub nie sprzedae lub co podobnego Per chaced, a to mogo by prawd

16
00:01:18,380 --> 00:01:20,030
lub oczywicie faszem.

17
00:01:20,660 --> 00:01:24,020
To waciwie powinno by prawie wszystko.

18
00:01:24,110 --> 00:01:33,380
Jedyna rzecz to prawdopodobnie cakowita cena, ktrej potrzebujemy, abymy zawsze mogli zobaczy, jaka jest cena i moemy

19
00:01:33,380 --> 00:01:35,180
to dynamicznie obliczy.

20
00:01:35,240 --> 00:01:40,460
I oczywicie wszystkie produkowane Teraz jest naszym stanem.

21
00:01:40,460 --> 00:01:42,490
Super proste, niezbyt trudne prawo.

22
00:01:42,560 --> 00:01:49,300
Ale pozwala nam to stworzy dynamicznego burgera i przekaza ju wszystkie istotne informacje dla uytkownika.

23
00:01:49,310 --> 00:01:52,020
Gdzie teraz zarzdzamy tym stanem.

24
00:01:52,100 --> 00:01:59,270
Mona powiedzie, e powinnimy poda tutaj skadnik aplikacji, ale nie zgadzam si z

25
00:01:59,270 --> 00:01:59,740
tym.

26
00:01:59,750 --> 00:02:01,250
Nie zrobimy tego tutaj.

27
00:02:01,310 --> 00:02:05,200
Zamiast tego powinnimy to zrobi w budowniczym burgerw tutaj.

28
00:02:05,360 --> 00:02:06,210
Czemu.

29
00:02:06,500 --> 00:02:14,210
Poniewa stan, ktry tu wymieniem po prawej, jest tak naprawd zwizany z budowaniem hamburgera, jeli pniej dodamy now

30
00:02:14,240 --> 00:02:17,300
stron wypaty lub co w tym stylu.

31
00:02:17,480 --> 00:02:24,630
Wtedy bdziemy mie stron, na ktrej chcemy zobaczy wszystkie zamwienia uytkownika, a nie jestemy

32
00:02:24,730 --> 00:02:28,470
zainteresowani skadnikami burgerowymi, stosujcymi powtarzajce si kompilacje.

33
00:02:28,670 --> 00:02:34,520
Tak wic zarzdzanie tym stanem na poziomie aplikacji nie jest moim zdaniem prawidowe, poniewa nie ma wpywu na

34
00:02:34,520 --> 00:02:37,420
ca aplikacj, wpywa tylko na t stron budowniczego hamburgera.

35
00:02:37,490 --> 00:02:41,060
Na razie bdzie to w zasadzie caa nasza aplikacja.

36
00:02:41,060 --> 00:02:45,700
Ale to nie jest sposb, w jaki nasza aplikacja zostanie, gdy dodamy t stron kasy i tak dalej.

37
00:02:46,070 --> 00:02:51,170
Tak wic budowniczy burger powinien by penym komponentem pastwa.

38
00:02:51,350 --> 00:02:53,970
Zasadniczo powinien to by kontener.

39
00:02:54,110 --> 00:02:56,760
Wic stan peen.

40
00:02:56,990 --> 00:03:04,600
Takich budowniczych burgerw powinny by wszystkie komponenty Avro mog by komponentami mog by

41
00:03:04,610 --> 00:03:06,980
skadnikami dumpowymi mniej skadnikw.

42
00:03:06,980 --> 00:03:12,530
Domylnie komponent, a nastpnie projekt to stan peny, ktry jest traktowany ze sowem kluczowym.

43
00:03:12,770 --> 00:03:18,650
Moemy oczywicie zostawi to jako jedno, ale jeli chcemy, moemy rwnie przeksztaci go

44
00:03:18,650 --> 00:03:19,850
w skadnik dump.

45
00:03:19,850 --> 00:03:24,880
Teraz mylimy o czystych komponentach lub o aktualizacji skadnikw.

46
00:03:24,920 --> 00:03:32,300
Czy oba bd to robi, czy te bd to implementowa, poniewa stworzylimy aplikacj i sprawdzimy, czy potrafimy

47
00:03:32,300 --> 00:03:35,990
zidentyfikowa miejsca, w ktrych potrzebujemy zoptymalizowa nasz cykl aktualizacji.

48
00:03:36,230 --> 00:03:42,050
Ale ze wzgldu na prostot naszego majtku i struktur naszej aplikacji, moe si zdarzy, e

49
00:03:42,050 --> 00:03:47,810
nigdy nie bdziemy musieli implementowa czystego komponentu, poniewa wiemy, e jeli stan lub niektre rekwizyty

50
00:03:47,810 --> 00:03:54,480
ulegn zmianie, tak jak to naprawd zmienio, mie przycisk, ktry moe po prostu ustawi scen na co,

51
00:03:54,480 --> 00:03:58,050
co byo ju ustawione, tak by mogo by dobrze.

52
00:03:58,100 --> 00:04:04,430
Rzumy okiem na to i zadbaj o poprawne wdroenie tego i ewentualnie zamie co w

53
00:04:04,460 --> 00:04:07,010
czysty komponent, jeli bdzie to konieczne.

54
00:04:07,010 --> 00:04:11,410
Tak wic powiedziabym, stwrzmy projekt i zacznijmy z tym.

