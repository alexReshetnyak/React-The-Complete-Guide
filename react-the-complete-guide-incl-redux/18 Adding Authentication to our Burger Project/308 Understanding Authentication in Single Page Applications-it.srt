1
00:00:02,210 --> 00:00:06,180
Quindi, come funziona l'autenticazione nelle applicazioni a pagina singola?

2
00:00:06,200 --> 00:00:10,390
Abbiamo un server e abbiamo la nostra applicazione a pagina singola in esecuzione nel browser.

3
00:00:10,670 --> 00:00:15,980
Ora l'applicazione a singola pagina invia i dati di autenticazione al server perch probabilmente abbiamo

4
00:00:15,980 --> 00:00:18,130
una registrazione o una pagina di

5
00:00:18,140 --> 00:00:22,940
accesso nella nostra SPA e quindi riceviamo dati come l'indirizzo e-mail e la password

6
00:00:23,120 --> 00:00:29,150
e li inviamo al server per convalidare l perch tale logica ovviamente deve sempre accadere sul server

7
00:00:29,150 --> 00:00:30,000
e questo

8
00:00:30,050 --> 00:00:35,750
 anche il luogo dove archiviamo i nostri dati persistenti, nel database sul server e il

9
00:00:35,750 --> 00:00:38,730
server non deve essere firebase come nel nostro progetto, naturalmente.

10
00:00:38,750 --> 00:00:43,190
Questo pu essere qualsiasi server, qualsiasi API restful per essere precisi, questo  ci

11
00:00:43,300 --> 00:00:49,520
che in genere comunichiamo quando utilizziamo applicazioni a singola pagina. Quel server quindi restituisce qualcosa e si potrebbe

12
00:00:49,520 --> 00:00:52,670
pensare che  una sessione ma dal momento

13
00:00:52,910 --> 00:01:00,630
che il server in un mondo SPA tipicamente  un'API riposante senza stato, non si torna a una sessione perch

14
00:01:00,630 --> 00:01:05,630
il server non si preoccupa dei diversi client che si connettono a lui .

15
00:01:05,630 --> 00:01:12,810
Invece torniamo a un token, puoi pensare a quel token come a un oggetto javascript e codificarlo come json, i token

16
00:01:12,920 --> 00:01:16,410
web json sono la forma tipica di token che ottieni.

17
00:01:16,430 --> 00:01:21,800
Quindi alla fine  un oggetto javascript che puoi dire e questo oggetto javascript

18
00:01:21,800 --> 00:01:22,540
deve ora

19
00:01:22,640 --> 00:01:29,270
essere memorizzato sul client, ad esempio nella memoria locale. Potremmo anche memorizzarlo nel nostro redux store ma l, andr

20
00:01:29,270 --> 00:01:31,360
perso quando l'utente aggiorna la pagina.

21
00:01:31,370 --> 00:01:37,820
Di solito usiamo lo storage locale dal momento che continua la pagina di aggiornamento e ci consente di recuperare quel token anche

22
00:01:38,030 --> 00:01:44,440
se l'utente ha lasciato e rivisitato la nostra pagina, in modo che possiamo lasciare che l'utente abbia effettuato l'accesso se vogliamo.

23
00:01:44,660 --> 00:01:47,330
E a cosa serve questo gettone per allora?

24
00:01:47,690 --> 00:01:52,070
Bene, immaginiamo di fare delle richieste ad alcune risorse protette sul server, come ad

25
00:01:52,250 --> 00:01:58,610
esempio abbiamo provato a cambiare la nostra password o vogliamo creare un nuovo post sul blog, tali richieste naturalmente sono

26
00:01:58,610 --> 00:02:01,380
permesse solo agli utenti autenticati e poich non lo

27
00:02:01,430 --> 00:02:06,340
facciamo t verificare costantemente lo stato di autenticazione sul server, non abbiamo nessuna sessione l.

28
00:02:06,650 --> 00:02:13,760
Passiamo il token insieme alle richieste a tali risorse protette, quel token e ci che  importante  creato dal

29
00:02:13,760 --> 00:02:15,340
server e in modo

30
00:02:15,530 --> 00:02:21,590
che il server possa verificare se si tratta di un token valido creato dal server o meno.

31
00:02:21,740 --> 00:02:24,680
In modo che non possiamo simulare un tale token

32
00:02:24,770 --> 00:02:27,310
sul client, non possiamo crearlo l e inviarlo

33
00:02:27,350 --> 00:02:28,850
al server, che non funzionerebbe.

34
00:02:28,910 --> 00:02:33,790
Solo i token inviati dal server sono accettati sul server.

35
00:02:33,800 --> 00:02:40,040
Quindi questo  il modo in cui ci autenticiamo sulle richieste successive dopo aver ricevuto quel token

36
00:02:40,040 --> 00:02:43,750
e questo  lo schema che implementeremo in questo modulo.

37
00:02:43,760 --> 00:02:49,020
Ora come ho detto, utilizzeremo firebase poich l'abbiamo usato come back-end perch  cos

38
00:02:49,220 --> 00:02:54,830
facile da configurare, ma quel pattern sar lo stesso indipendentemente dal backend utilizzato, purch sia

39
00:02:54,830 --> 00:02:55,900
un'API riposante.

40
00:02:56,300 --> 00:03:00,010
Quindi quali sono gli aggiustamenti richiesti nella nostra applicazione?

