1
00:00:02,210 --> 00:00:06,180
So how does authentication work in single page applications?

2
00:00:06,200 --> 00:00:10,390
We have a server and we have our single page application running in the browser.

3
00:00:10,670 --> 00:00:15,980
Now the single page application sends the authentication data to the server because we probably have a

4
00:00:15,980 --> 00:00:18,130
sign up or a sign in page

5
00:00:18,140 --> 00:00:22,940
in our SPA and therefore we get data like the e-mail address and the password

6
00:00:23,120 --> 00:00:29,150
and we send this to the server to validate it there because such logic obviously always has to happen

7
00:00:29,150 --> 00:00:30,000
on the server

8
00:00:30,050 --> 00:00:35,750
and this is also where we store our persistent data, in the database on the server and the server doesn't

9
00:00:35,750 --> 00:00:38,730
have to be firebase as in our project of course.

10
00:00:38,750 --> 00:00:43,190
This can be any server, any restful API to be precise,

11
00:00:43,300 --> 00:00:49,520
this is what we typically communicate with when using single page applications. That server then send

12
00:00:49,520 --> 00:00:52,670
something back and you could think that's a session

13
00:00:52,910 --> 00:01:00,630
but since the server in a SPA world typically is a stateless restful API, we're not getting back

14
00:01:00,630 --> 00:01:05,630
a session because the server doesn't care about the different clients connecting to him.

15
00:01:05,630 --> 00:01:12,810
Instead we get back a token, you can think of that token as a javascript object and code it as json,

16
00:01:12,920 --> 00:01:16,410
json web tokens are the typical form of tokens you get.

17
00:01:16,430 --> 00:01:21,800
So it's a javascript object in the end you can say and this javascript object now has to be stored on

18
00:01:21,800 --> 00:01:22,540
the client,

19
00:01:22,640 --> 00:01:29,270
for example in local storage. We could also store it in our redux store but there, it will be lost when

20
00:01:29,270 --> 00:01:31,360
ever the user refreshes the page.

21
00:01:31,370 --> 00:01:37,820
So we typically use local storage since that persists page refreshes and allows us to fetch that token

22
00:01:38,030 --> 00:01:44,440
even if the user did leave and revisit our page, so that we can leave the user are logged in if we want.

23
00:01:44,660 --> 00:01:47,330
And what do we need this token for then?

24
00:01:47,690 --> 00:01:52,070
Well, imagine we're making requests to some protected resource on the server,

25
00:01:52,250 --> 00:01:58,610
like for example we tried to change our password or we want to create a new blog post, such requests

26
00:01:58,610 --> 00:02:01,380
of course are only allowed to authenticated users

27
00:02:01,430 --> 00:02:06,340
and since we don't constantly check the authentication status on the server, we have no session there.

28
00:02:06,650 --> 00:02:13,760
We pass the token along with requests to such protected resources, that token and that's important is

29
00:02:13,760 --> 00:02:15,340
created by the server

30
00:02:15,530 --> 00:02:21,590
and in a way that the server can verify if it's a valid token created by the server or not.

31
00:02:21,740 --> 00:02:24,680
So that we can't fake such a token on the client,

32
00:02:24,770 --> 00:02:27,310
we can't create it there and send to the server,

33
00:02:27,350 --> 00:02:28,850
that would not work.

34
00:02:28,910 --> 00:02:33,790
Only the tokens sent by the server is accepted on the server.

35
00:02:33,800 --> 00:02:40,040
So this is how we then authenticate ourselves on subsequent requests after receiving that token

36
00:02:40,040 --> 00:02:43,750
and that's the pattern we're going to implement in this module.

37
00:02:43,760 --> 00:02:49,020
Now as I said, we'll use firebase here since we used it as a backend because it's so easy to set up

38
00:02:49,220 --> 00:02:54,830
but that pattern is going to be the same no matter which backend you use, as long as it's a restful

39
00:02:54,830 --> 00:02:55,900
API.

40
00:02:56,300 --> 00:03:00,010
So what are the required adjustments in our application then?

