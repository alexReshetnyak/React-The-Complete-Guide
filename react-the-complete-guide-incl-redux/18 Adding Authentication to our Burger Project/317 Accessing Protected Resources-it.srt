1
00:00:02,170 --> 00:00:09,790
Quindi, ora che abbiamo implementato il logout automatico quando il nostro token scade e non ci preoccupiamo, gireremo le nostre teste

2
00:00:09,820 --> 00:00:13,900
verso la regolazione del layout in base allo stato di autenticazione

3
00:00:14,040 --> 00:00:16,190
anche in seguito, ora che abbiamo

4
00:00:16,200 --> 00:00:22,690
implementato il logout automatico, giriamo le nostre teste verso l'uso di quel token per fare richieste alle risorse protette.

5
00:00:22,690 --> 00:00:28,810
Questo  ovviamente un tipico caso d'uso, hai un back-end con alcuni endpoint API che dovrebbero essere

6
00:00:28,810 --> 00:00:31,020
utilizzabili solo da utenti autenticati, ma

7
00:00:31,150 --> 00:00:35,520
ora, nel nostro back-end demo con Firebase, non  questo il caso.

8
00:00:35,750 --> 00:00:42,820
Se diamo un'occhiata al database che ci fornisce i nostri endpoint alla fine, tutti gli endpoint in modo che tutte

9
00:00:42,820 --> 00:00:48,940
le richieste vengano inviate a quell'URL e quindi tutti i nodi nidificati oltre questo sono disponibili per tutti.

10
00:00:49,120 --> 00:00:56,710
Questo  il caso perch all'inizio del corso, abbiamo cambiato le nostre regole qui per concedere l'accesso in lettura e

11
00:00:56,710 --> 00:00:59,500
scrittura a tutti qui impostando questo su

12
00:00:59,890 --> 00:01:04,890
true, l'abbiamo fatto per essere in grado di utilizzare quel database senza l'autenticazione,

13
00:01:04,960 --> 00:01:08,160
ora abbiamo ottenuto l'autenticazione in modo possiamo finalmente cambiarlo.

14
00:01:08,170 --> 00:01:13,670
Ora ovviamente questo  Firebase specifico che lo fai con le regole impostate, per il

15
00:01:13,670 --> 00:01:15,940
tuo backend in cui scrivi il

16
00:01:15,970 --> 00:01:21,700
tuo codice API, probabilmente ne hai qualcuno se controlli dove controlli se qualche token valido 

17
00:01:21,700 --> 00:01:23,920
allegato alla richiesta e semplicemente restituire

18
00:01:23,950 --> 00:01:29,980
una risposta 403 se non  questo il caso. Qui tuttavia abbiamo queste regole e nel caso pi semplice,

19
00:01:29,980 --> 00:01:37,120
possiamo impostare questo per l'autenticazione null non uguale che significa semplicemente se auth non  uguale a null, quindi l'accesso in lettura  concesso.

20
00:01:37,470 --> 00:01:41,860
Ma in altre parole ci significa che se non si  autenticati, auth  nullo,

21
00:01:41,920 --> 00:01:43,560
quindi restituisce false e non

22
00:01:43,660 --> 00:01:45,350
si ottiene l'accesso in lettura, lo

23
00:01:45,370 --> 00:01:47,910
stesso pu essere fatto per l'accesso in scrittura.

24
00:01:48,280 --> 00:01:54,290
Se lo impostiamo in questo modo, questo viene applicato all'intero database, a tutti i

25
00:01:54,460 --> 00:02:01,870
dati presenti, ora in realt voglio concedere l'accesso agli ingredienti per tutti e semplicemente accedere agli ordini

26
00:02:02,080 --> 00:02:04,150
disponibili solo agli utenti autenticati.

27
00:02:04,180 --> 00:02:10,510
Quindi, per Firebase, quello che possiamo fare , possiamo mettere a punto le nostre regole

28
00:02:10,600 --> 00:02:16,250
e possiamo dire s in generale hai accesso in lettura e scrittura, ma poi

29
00:02:16,270 --> 00:02:23,380
possiamo aggiungere una regola qui, nidificare e dire per il nodo ordini e devi nominare esattamente come

30
00:02:23,430 --> 00:02:26,690
il nodo  chiamato, l ho un insieme

31
00:02:26,770 --> 00:02:31,650
specifico di regole, l l'accesso in lettura  concesso solo se auth

32
00:02:31,650 --> 00:02:38,980
non  uguale a null quindi se sei autenticato e lo stesso per l'accesso in scrittura, questo dovrebbe

33
00:02:39,060 --> 00:02:48,310
anche essere concesso solo se non  uguale a null. Quindi, con questo, possiamo pubblicare queste regole e ora garantiremo effettivamente solo

34
00:02:48,400 --> 00:02:53,170
l'accesso in scrittura e lettura agli ingredienti a tutti, ma non agli ordini.

35
00:02:53,170 --> 00:02:58,880
Tuttavia, se lo facciamo in questo modo, le nostre regole di lettura e scrittura di livello superiore continueranno

36
00:02:58,900 --> 00:03:06,400
a sovrascriverlo per tutti i nodi annidati, quindi in realt dovr sbarazzarmene e invece aggiunger qui una regola separata per i miei ingredienti e

37
00:03:06,910 --> 00:03:09,830
l far ancora impostato per leggere e scrivere su

38
00:03:10,000 --> 00:03:16,270
true ma ci significa che solo gli ingredienti ora hanno accesso in lettura e scrittura o sono aperti a tutti,

39
00:03:16,270 --> 00:03:21,100
dovrei dire, gli ordini sono disponibili solo per gli utenti autenticati e dovrei aggiungere una

40
00:03:21,580 --> 00:03:26,670
virgola qui dopo la parentesi graffa degli ingredienti . Con ci possiamo testarlo, se torno

41
00:03:26,670 --> 00:03:31,500
alla mia applicazione, ricaricalo e vado agli ordini, riceviamo un errore, se

42
00:03:31,660 --> 00:03:34,600
vado al costruttore di hamburger, per, funziona ancora.

43
00:03:34,610 --> 00:03:36,370
Quindi gli ingredienti erano ancora

44
00:03:36,460 --> 00:03:40,690
caricati, ricevo solo un errore non autorizzato se visito gli ordini qui.

45
00:03:41,080 --> 00:03:42,820
Ora che  buono,  esattamente quello

46
00:03:42,820 --> 00:03:44,440
che voglio e con ci, ora

47
00:03:44,550 --> 00:03:52,460
possiamo assicurarci che possiamo ancora raggiungere gli ordini se siamo autenticati e abbiamo un token. Per fare ci, ho bisogno di andare nel luogo

48
00:03:52,480 --> 00:03:59,170
in cui effettivamente mandiamo questa richiesta di ordini e che naturalmente sono i creatori di azioni

49
00:03:59,460 --> 00:04:02,780
nel file degli ordini nella cartella delle azioni.

50
00:04:02,920 --> 00:04:09,790
L dobbiamo acquistare l'azione di Burger e abbiamo anche l'azione fetchOrders, lavoriamo su

51
00:04:09,790 --> 00:04:10,600
questo prima.

52
00:04:10,900 --> 00:04:18,850
Qui dobbiamo essenzialmente aggiungere il nostro token, il nostro token che abbiamo ricevuto da firebase durante l'autenticazione e

53
00:04:19,360 --> 00:04:22,920
quindi possiamo allegare questo token a questa richiesta.

54
00:04:23,050 --> 00:04:30,730
L'autenticazione  molto semplice quindi, dobbiamo solo aggiungere una query param questionmark auth uguale all'URL a cui stiamo facendo la richiesta a

55
00:04:30,790 --> 00:04:37,720
cui richiede un token e quindi dobbiamo passare il token. Ora il token ovviamente qui  la cosa

56
00:04:37,720 --> 00:04:42,540
speciale, il token  memorizzato nel nostro negozio di redux, come

57
00:04:42,670 --> 00:04:44,130
lo otteniamo qui

58
00:04:44,200 --> 00:04:47,700
all'interno del nostro creatore di azioni fetchOrders?

59
00:04:47,710 --> 00:04:51,890
Ovviamente potremmo ricevere getState, hai imparato a conoscere questo, non solo

60
00:04:51,940 --> 00:04:58,210
puoi ottenere la tua azione di invio, puoi anche ottenere qui la funzione getState che puoi

61
00:04:58,210 --> 00:05:00,730
eseguire per ottenere l'accesso allo stato.

62
00:05:00,730 --> 00:05:06,360
Ti ho anche insegnato che non sto raccomandando di usarlo molto e non voglio usarlo qui,

63
00:05:06,400 --> 00:05:11,350
anche se vedo che questo potrebbe essere un caso in cui ha senso ottenere

64
00:05:11,350 --> 00:05:12,390
queste informazioni che

65
00:05:12,400 --> 00:05:12,720
non

66
00:05:12,730 --> 00:05:17,980
contano davvero guarda bene nel creatore di azioni. Tuttavia, voglio portarlo nel posto in cui inviamo

67
00:05:17,980 --> 00:05:22,110
l'azione fetchOrders e poi semplicemente lo passiamo come argomento a questo action maker.

68
00:05:22,120 --> 00:05:27,990
Quindi mi aspetto di ottenere un argomento token in questa funzione e quindi allego il token qui alla

69
00:05:28,090 --> 00:05:33,850
mia richiesta, quindi il pezzo mancante  quello di assicurarsi che abbiamo ricevuto il token qui quando si

70
00:05:33,880 --> 00:05:37,720
invia fetchOrders, gli ordini di fetch sono ovviamente spediti nel mio contenitore

71
00:05:37,850 --> 00:05:43,750
degli ordini , in fondo, abbiamo onFetchOrders e di nuovo qui, ora ho bisogno di passare qualche token.

72
00:05:43,900 --> 00:05:49,960
Quindi questo token dovr essere passato a questa funzione anonima che eseguiamo qui e

73
00:05:49,960 --> 00:05:51,260
poi passato al

74
00:05:51,490 --> 00:05:58,410
creatore dell'azione, quindi finalmente dobbiamo ottenere il token nel posto in cui chiamiamo FetchOrders, onFetchOrders 

75
00:05:58,420 --> 00:06:04,870
chiamato qui nel metodo componentDidMount e ora dobbiamo assicurarci di avere il token quando lo

76
00:06:04,930 --> 00:06:07,060
chiamiamo. Ora il

77
00:06:07,060 --> 00:06:15,390
token, come ho detto, memorizzato nel nostro negozio redux, ovviamente, lo memorizziamo nella nostra slice state auth qui, il token.

78
00:06:15,430 --> 00:06:22,550
Quindi tutto ci che dobbiamo fare  nel nostro contenitore degli ordini in cui abbiamo gi mapStateToProps. Ora devo

79
00:06:22,600 --> 00:06:25,180
anche ottenere il token dal mio stato.

80
00:06:25,390 --> 00:06:33,190
Quindi chiamer il token prop e voglio accedere allo stato e ora no. perch non sono interessato alla sezione

81
00:06:33,190 --> 00:06:36,390
relativa allo stato del mio

82
00:06:36,400 --> 00:06:42,970
stato se invece guardiamo all'indice. js file dove uniamo i riduttori, l'auth reducer che imposta

83
00:06:42,970 --> 00:06:48,070
lo stato per il token, l'auth reducer pu essere trovato su una propriet auth, quindi questo

84
00:06:48,070 --> 00:06:49,870
 ci a cui dovremmo accedere.

85
00:06:50,110 --> 00:06:55,330
Quindi, negli ordini, dovrei accedere allo stato. auth. token, come questo.

86
00:06:55,330 --> 00:07:01,450
E ora con questo, stiamo rendendo disponibile il token sul puntello del token, ora posso semplicemente

87
00:07:01,450 --> 00:07:06,150
passarlo qui con questo. puntelli. token e sottolineer che

88
00:07:06,160 --> 00:07:12,550
questo  solo un modo per farlo, l'alternativa sarebbe stata usare getState nel creatore dell'azione ordine.

89
00:07:12,550 --> 00:07:16,210
Con quello per dovremmo prendere il token e passare qui.

90
00:07:16,540 --> 00:07:22,930
Quindi, se salviamo tutto il nostro codice e torniamo indietro,  stato comunque impossibile qui perch ovviamente quando l'app ricarica

91
00:07:22,960 --> 00:07:24,700
tutti i token vengono persi.

92
00:07:24,700 --> 00:07:31,400
Passiamo quindi all'accesso e accediamo rapidamente con l'utente ricreato qualche tempo fa, invio invio ora possiamo verificare

93
00:07:31,420 --> 00:07:37,660
su Redux che abbiamo un'autenticazione corretta e che nello stato di autenticazione, abbiamo un token, passiamo

94
00:07:37,660 --> 00:07:38,600
ora agli

95
00:07:38,920 --> 00:07:40,810
ordini e come puoi vedere

96
00:07:40,990 --> 00:07:45,900
ora riusciamo a caricare gli ordini qui di nuovo senza errori, questo

97
00:07:46,090 --> 00:07:51,160
errore qui a destra  vecchio perch ora inviamo la richiesta con il

98
00:07:51,160 --> 00:07:52,320
token allegato.

99
00:07:52,600 --> 00:07:58,510
E puoi vedere questo se apri la scheda di rete negli strumenti di sviluppo del tuo browser, l puoi

100
00:07:58,960 --> 00:08:05,650
vedere che se torno di nuovo agli ordini, ecco la richiesta che viene inviata dove  collegato il token, questo  l'URL

101
00:08:05,650 --> 00:08:08,710
molto lungo ma perch il token  parte dell'URL, 

102
00:08:08,830 --> 00:08:12,900
cos che dobbiamo autenticarci e come possiamo inviare il nostro token al back-end.

103
00:08:12,900 --> 00:08:19,120
Quindi questo  il modo in cui possiamo usare il token per accedere a risorse protette, ovviamente

104
00:08:19,300 --> 00:08:24,530
lo stesso  rilevante quando facciamo un ordine qui, purchaseBurger, l dobbiamo anche ottenere

105
00:08:24,710 --> 00:08:29,670
quel token come argomento nel creatore di azioni e quindi aggiungerlo come una

106
00:08:29,780 --> 00:08:34,040
query param per l'URL a cui stiamo inviando la richiesta, quindi

107
00:08:34,180 --> 00:08:41,080
auth dovrebbe anche usare il token qui o la query auth param dovrebbe essere l'argomento token che stiamo

108
00:08:41,080 --> 00:08:41,620
ricevendo

109
00:08:41,740 --> 00:08:46,190
qui e per questo, dobbiamo ovviamente assicurarci di anche qui ricevi un gettone.

110
00:08:46,480 --> 00:08:52,420
Quindi dobbiamo andare nel luogo in cui spediamo PurchaseBurger e che naturalmente

111
00:08:52,510 --> 00:08:53,320
accade nei

112
00:08:53,620 --> 00:09:01,890
dati di contatto, l abbiamo il nostro metodo per fare un ordine, l'orderHandler dove abbiamo onOrderBurger

113
00:09:01,890 --> 00:09:08,130
che alla fine invia questo action maker, quindi l, compraBurger viene inviato.

114
00:09:08,130 --> 00:09:11,540
Ora qui dobbiamo passare quel token, per questo abbiamo bisogno

115
00:09:11,550 --> 00:09:17,760
di riceverlo nella nostra lista di argomenti di questo metodo che stiamo mappando nel puntello e per questo abbiamo

116
00:09:17,760 --> 00:09:21,650
bisogno di rendere il token disponibile come puntello anche in quel contenitore.

117
00:09:21,900 --> 00:09:28,290
Quindi, proprio come nel contenitore degli ordini, mapper una propriet token per lo stato. auth. token e ora possiamo

118
00:09:28,560 --> 00:09:34,020
andare nel luogo in cui lo inviamo, dove chiamiamo il prop

119
00:09:34,320 --> 00:09:39,200
che invia l'azione aOrderBurger e anche qui passiamo questo gettone puntelli.

120
00:09:39,360 --> 00:09:44,430
E con questo, stiamo facendo in modo che stiamo avendo un token e inviandolo, ora

121
00:09:44,430 --> 00:09:48,590
qui otteniamo un errore perch l'applicazione ricaricata da qui il token  perso.

122
00:09:48,630 --> 00:09:55,570
Ma se accedo di nuovo e ci occuperemo di questo autospegnimento che stiamo avendo qui presto, se accedo

123
00:09:55,770 --> 00:09:58,310
di nuovo vado al costruttore di

124
00:09:58,470 --> 00:10:01,250
hamburger, se ora costruisco un hamburger qui,

125
00:10:01,290 --> 00:10:02,240
ordina ora,

126
00:10:02,430 --> 00:10:04,500
continua, lasciami cancella la scheda

127
00:10:04,530 --> 00:10:05,350
di rete,

128
00:10:05,350 --> 00:10:09,460
continua anche qui e ora inseriamo rapidamente alcuni dati, come questo.

129
00:10:09,710 --> 00:10:14,880
Se ora faccio clic sull'ordine qui, vedrai che ha avuto esito positivo perch invia la richiesta di ordini e

130
00:10:14,970 --> 00:10:17,250
non ti confondere con due richieste inviate qui,

131
00:10:17,250 --> 00:10:22,620
la prima  solo una richiesta di opzioni che Chrome invia sempre se stai inviando una richiesta di posta.

132
00:10:22,620 --> 00:10:27,810
Questo  quello pertinente, questa richiesta di posta con il token e in effetti possiamo verificare

133
00:10:27,960 --> 00:10:32,910
nel nostro database che abbiamo ottenuto un nuovo ordine qui con l'hamburger che abbiamo appena configurato.

134
00:10:32,910 --> 00:10:39,080
Quindi ora funziona, ora utilizziamo quel token per raggiungere risorse protette e, come puoi vedere

135
00:10:39,240 --> 00:10:44,520
quando ricarichi l'app e visiti gli ordini, ad esempio, non funziona se non

136
00:10:44,520 --> 00:10:45,530
hai un token.

137
00:10:45,660 --> 00:10:48,430
Ovviamente non  la migliore esperienza utente

138
00:10:48,430 --> 00:10:51,060
semplicemente visitare una pagina e poi fallire.

139
00:10:51,180 --> 00:10:56,280
Sarebbe meglio se non potessimo visitare le pagine in cui dovremmo essere autenticati in primo

140
00:10:56,280 --> 00:11:01,620
luogo, ovviamente sarebbe anche meglio se l'interfaccia utente ci mostrasse se siamo autenticati e sarebbe meglio

141
00:11:01,620 --> 00:11:08,150
se potessimo registrare anche il utente in se teoricamente  ancora un token valido in modo che non perdiamo

142
00:11:08,280 --> 00:11:11,910
il nostro stato di autenticazione ogni volta che ricarichiamo l'applicazione.

143
00:11:11,910 --> 00:11:15,060
Queste sono tutte cose che affronteremo durante le prossime lezioni.

