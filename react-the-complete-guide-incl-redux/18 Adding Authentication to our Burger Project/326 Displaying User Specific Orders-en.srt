1
00:00:02,280 --> 00:00:04,290
Now let's work on our orders,

2
00:00:04,320 --> 00:00:09,240
let's make sure we only see orders of our user and for that of course, we

3
00:00:09,420 --> 00:00:16,200
first of all need to make sure that when we place an order, we attach the user id. Thankfully the user ID

4
00:00:16,200 --> 00:00:21,130
is stored in our auth slice of the state here, user ID here.

5
00:00:21,510 --> 00:00:23,530
So we're storing that already

6
00:00:23,580 --> 00:00:29,590
so we only need to make sure that we also take advantage of this when we place an order.

7
00:00:29,610 --> 00:00:38,550
So in our orders action creators when we purchase a burger, we want to pass the user id onto the backend

8
00:00:38,820 --> 00:00:42,030
so it should be part of the order data, I'd say.

9
00:00:42,030 --> 00:00:49,740
That however is set in our contact data container, there in the order handler, we in the end dispatch

10
00:00:49,770 --> 00:00:50,610
onOrderBurger,

11
00:00:50,650 --> 00:00:55,690
we call this function which dispatches the action and there, we set up our order data.

12
00:00:55,750 --> 00:00:56,410
This is where I

13
00:00:56,430 --> 00:00:59,080
also want to add the user ID.

14
00:00:59,090 --> 00:01:01,920
Now since we store that in our redux store,

15
00:01:01,980 --> 00:01:03,900
that's super easy to do,

16
00:01:03,900 --> 00:01:06,270
we can just get it from there.

17
00:01:06,270 --> 00:01:14,400
So in mapStateToProps in the contact data container, I'll add a user id prop and reach out to

18
00:01:14,490 --> 00:01:17,470
state.auth.userID, like this.

19
00:01:17,490 --> 00:01:20,230
Now we can use that for prop anywhere in this component,

20
00:01:20,430 --> 00:01:27,540
for example when we do submit an order, so in the order handler, here where we set up the order, there we can

21
00:01:27,540 --> 00:01:36,870
simply add another property and that is our user ID property which is this.props.userID, this newly

22
00:01:36,870 --> 00:01:37,830
mapped prop

23
00:01:38,600 --> 00:01:40,840
and that should be all. With that,

24
00:01:40,850 --> 00:01:44,580
if I now place an order let's quickly try this out,

25
00:01:44,840 --> 00:01:48,880
let's order this delicious burger, continue and fill this out,

26
00:01:48,890 --> 00:01:53,360
so once this is filled out here and we click order,

27
00:01:53,440 --> 00:01:55,120
this all seems to work.

28
00:01:55,330 --> 00:01:57,040
Let's now have a look at our backend

29
00:01:57,130 --> 00:02:04,000
the order was added and there, we see that in the, not in the order data but here on the main element

30
00:02:04,000 --> 00:02:04,390
itself,

31
00:02:04,390 --> 00:02:07,600
we have user ID which is our user ID.

32
00:02:07,600 --> 00:02:11,950
So now that order is mapped to our user.

33
00:02:11,950 --> 00:02:19,250
Now of course, we also want to make sure that when we visit orders, we only see orders of that user.

34
00:02:19,330 --> 00:02:25,810
Now there are two ways of checking this, one is on the frontend because the data we get back from the

35
00:02:25,810 --> 00:02:32,020
backend will hold this information, we can see this if we expect our state here for fetch orders success,

36
00:02:32,490 --> 00:02:34,360
order, this orders array,

37
00:02:34,450 --> 00:02:39,360
the last order which is the most recent one has this user id property

38
00:02:39,460 --> 00:02:45,970
so we could check if that user ID matches the ID of the logged in user. But we would still fetch all orders

39
00:02:45,970 --> 00:02:51,820
and that's a potential security issue because if anyone inspects our javascript code, he could see orders

40
00:02:51,820 --> 00:02:53,590
which aren't meant for him.

41
00:02:53,590 --> 00:02:59,380
So a better way is to just fetch the orders we need from the backend in the first place and we can

42
00:02:59,380 --> 00:03:06,100
do that easily with firebase, of course for your own API you need some way of passing that user ID to

43
00:03:06,100 --> 00:03:14,050
the backend or use that token you pass along anyways to only fetch data for a given user. When using

44
00:03:14,050 --> 00:03:14,970
firebase,

45
00:03:15,010 --> 00:03:24,220
you can easily filter data by going back to your async order action creator file and there where we

46
00:03:24,220 --> 00:03:30,010
have fetch orders, we already passed the token, we can pass more query params here

47
00:03:30,280 --> 00:03:38,770
and since I will add more, I'll actually add my new constant here and I'll name this query params and

48
00:03:38,770 --> 00:03:45,750
this will just be a string where I have auth equal to token and then I'll change them,

49
00:03:45,740 --> 00:03:48,590
I use query parameter with an and sign,

50
00:03:48,680 --> 00:03:52,230
this will be orderBy with a capital B,

51
00:03:52,310 --> 00:03:59,090
that is a query parameter understood by firebase which allows us to well order our data.

52
00:03:59,090 --> 00:04:04,760
Now I don't actually want to reorder it but this also tells firebase hey you can filter by that.

53
00:04:05,060 --> 00:04:13,160
So I want to order by my user ID property and now we can chain another query parameter

54
00:04:13,580 --> 00:04:15,700
and that is equal to,

55
00:04:15,830 --> 00:04:19,570
this always refers to the key you're ordering by.

56
00:04:19,580 --> 00:04:26,030
So we can say we want to order by that user id property on our firebase data and we only want to fetch

57
00:04:26,030 --> 00:04:30,320
the data where this key, user ID is equal to

58
00:04:30,530 --> 00:04:32,950
and now we need to get the user ID here.

59
00:04:33,110 --> 00:04:34,730
So I expect to get it,

60
00:04:34,900 --> 00:04:36,470
we could of course also get it

61
00:04:36,470 --> 00:04:42,470
with that get state argument we can retrieve here but I don't want to use that, instead

62
00:04:42,500 --> 00:04:51,830
I expect to get the user id here as an argument and then here at my URL, I replace the current code

63
00:04:51,830 --> 00:04:58,330
at the end by simply attaching my query params constant now which holds all the query params.

64
00:04:58,640 --> 00:05:04,910
So let's make sure we get the user id then, to do that I need to go to the place where we execute fetch

65
00:05:04,910 --> 00:05:07,350
orders or where we dispatch this action

66
00:05:07,430 --> 00:05:11,180
and that of course happens in the orders container, there

67
00:05:11,270 --> 00:05:19,040
this.props.onFetchOrders is used, here I now simply need to get the user id so let's add it to our props

68
00:05:19,070 --> 00:05:21,980
and get it from the state, from the auth state,

69
00:05:22,000 --> 00:05:30,190
there it's in a user id property as you can always check your reducer and I need to be able to dispatch

70
00:05:30,490 --> 00:05:32,100
my action with that ID,

71
00:05:32,170 --> 00:05:38,960
so there, I pass an additional argument and pass it onto the action creator because we just added it,

72
00:05:39,160 --> 00:05:41,950
this action creator to expect this argument

73
00:05:42,340 --> 00:05:46,940
and then we have to pass it on in our container code too, here

74
00:05:47,080 --> 00:05:53,020
I also passed this.props.userId, like this and that should be all.

75
00:05:53,020 --> 00:06:01,630
Now if we go back to our application and we go back to orders, I actually get an error because I have

76
00:06:01,630 --> 00:06:10,900
a tiny syntax error in our orders action creator, orderBy, the value or the property name by which you

77
00:06:10,900 --> 00:06:11,900
want to order,

78
00:06:11,980 --> 00:06:16,570
it should be enclosed in quotation marks, in double quotation marks.

79
00:06:16,570 --> 00:06:18,470
Now that's not the only change though,

80
00:06:18,600 --> 00:06:24,370
the value we're passing here, if it's a string and user ID is a string also needs to be wrapped with double

81
00:06:24,380 --> 00:06:25,570
quotation marks,

82
00:06:25,570 --> 00:06:30,680
so let's add one in front of our variable and then one thereafter

83
00:06:30,700 --> 00:06:34,170
between the single quotation marks because it's still text.

84
00:06:34,390 --> 00:06:37,100
With that we're done, we've done almost everything

85
00:06:37,120 --> 00:06:44,650
but we also need to prepare it on the backend, here in firebase and that's just firebase specific because

86
00:06:44,680 --> 00:06:51,250
we well happen to use firebase here, if you want to be able to filter data,

87
00:06:51,400 --> 00:06:58,680
we have to adjust our rules to make a certain field indexable so that firebase can search through it.

88
00:06:58,690 --> 00:07:03,060
This is done in your rules tap on the database, there

89
00:07:03,160 --> 00:07:06,850
we can simply go to orders and we have read and write there and

90
00:07:06,850 --> 00:07:13,460
now we add another rule, .indexOn and it's of course very important that you write this correctly,

91
00:07:13,490 --> 00:07:15,710
with dot at the beginning and a capital O,

92
00:07:16,150 --> 00:07:20,660
and now you can add an array of all the fields you want to make searchable, here

93
00:07:20,710 --> 00:07:22,670
it's only user ID though.

94
00:07:22,820 --> 00:07:24,500
Now let's publish that

95
00:07:25,000 --> 00:07:31,360
and now with that in place and our code here updated too and everything saved, if go back to the burger

96
00:07:31,360 --> 00:07:33,700
and we are logged in and we go to orders,

97
00:07:33,700 --> 00:07:37,030
we see only one order now and that should be our order.

98
00:07:37,120 --> 00:07:42,790
Let's confirm by creating the bacon bomb burger here, salad always important,

99
00:07:42,830 --> 00:07:44,560
so let's order this now.

100
00:07:45,750 --> 00:07:48,540
If I click order and now go to orders,

101
00:07:48,720 --> 00:07:50,830
we see that here too.

102
00:07:51,270 --> 00:07:57,060
So now we only get the data and we have no chance of accessing data that doesn't belong to our user.

103
00:07:57,060 --> 00:08:02,310
Now this example is of course only showing us with firebase but on your own backend, you probably have

104
00:08:02,310 --> 00:08:06,770
your own filtering logic, either returning only user related data from the server

105
00:08:06,780 --> 00:08:13,150
anyways by checking the token you pass along or by also giving you some query functionality as we

106
00:08:13,150 --> 00:08:14,120
used it here.

