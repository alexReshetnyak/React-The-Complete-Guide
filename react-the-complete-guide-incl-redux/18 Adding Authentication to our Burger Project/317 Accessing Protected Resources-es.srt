1
00:00:02,170 --> 00:00:09,790
Ahora que hemos implementado el cierre de sesin automtico cuando caduca nuestro token y no hay preocupaciones, volveremos a dirigirnos a

2
00:00:09,820 --> 00:00:13,900
ajustar el diseo en funcin del estado de autenticacin ms adelante,

3
00:00:14,040 --> 00:00:16,190
ahora que hemos implementado el cierre

4
00:00:16,200 --> 00:00:22,690
de sesin automtico, volvamos la cabeza hacia el uso de ese token para hacer solicitudes a recursos protegidos.

5
00:00:22,690 --> 00:00:28,810
Eso es, por supuesto, un caso de uso tpico, tiene un backend con ciertos puntos finales API que solo deberan

6
00:00:28,810 --> 00:00:31,020
ser utilizados por usuarios autenticados, en este

7
00:00:31,150 --> 00:00:35,520
momento en nuestro backend de demostracin con firebase, sin embargo, ese no es el caso.

8
00:00:35,750 --> 00:00:42,820
Si echamos un vistazo a la base de datos que nos proporciona finalmente nuestros puntos finales, todos los puntos finales de modo que todas

9
00:00:42,820 --> 00:00:48,940
las solicitudes se enven a esa URL y luego cualquier nodo anidado ms all de eso estn bsicamente disponibles para todos.

10
00:00:49,120 --> 00:00:56,710
Ese es el caso porque anteriormente en el curso, cambiamos nuestras reglas aqu para otorgar acceso de lectura y escritura

11
00:00:56,710 --> 00:00:59,500
a todos aqu estableciendo esto en verdadero, lo

12
00:00:59,890 --> 00:01:04,890
hicimos para poder usar esa base de datos sin tener autenticacin, bueno, ahora

13
00:01:04,960 --> 00:01:08,160
tenemos autenticacin tan finalmente podemos cambiar esto de vuelta.

14
00:01:08,170 --> 00:01:13,670
Ahora, por supuesto, esto es especfico de Firebase y lo haces con las reglas establecidas, para

15
00:01:13,670 --> 00:01:15,940
tu propio backend donde escribes tu

16
00:01:15,970 --> 00:01:21,700
propio cdigo API, probablemente tengas algo de verificacin si compruebas si algn token vlido est adjunto

17
00:01:21,700 --> 00:01:23,920
a la solicitud y simplemente devuelve

18
00:01:23,950 --> 00:01:29,980
una respuesta 403 si ese no es el caso. Sin embargo, aqu tenemos estas reglas y, en el caso ms

19
00:01:29,980 --> 00:01:37,120
simple, podemos configurar esto para auth desigual null, lo que simplemente significa que si auth no es igual a null, entonces se concede el acceso de lectura.

20
00:01:37,470 --> 00:01:41,860
Pero en otras palabras, eso significa que si no est autenticado, entonces auth es nulo, por

21
00:01:41,920 --> 00:01:43,560
lo tanto, esto devuelve falso y

22
00:01:43,660 --> 00:01:45,350
no tiene acceso de lectura, lo

23
00:01:45,370 --> 00:01:47,910
mismo se puede hacer para el acceso de escritura.

24
00:01:48,280 --> 00:01:54,290
Si lo configuramos as, esto se aplica a toda la base de datos, a todos los datos que

25
00:01:54,460 --> 00:02:01,870
estn all, ahora realmente quiero dar acceso a los ingredientes para todos y simplemente hacer que el acceso a los pedidos solo

26
00:02:02,080 --> 00:02:04,150
est disponible para los usuarios autenticados.

27
00:02:04,180 --> 00:02:10,510
Entonces para Firebase lo que podemos hacer es, podemos afinar nuestras reglas y podemos decir

28
00:02:10,600 --> 00:02:16,250
que s, en general, tienes acceso de lectura y escritura, pero luego podemos agregar

29
00:02:16,270 --> 00:02:23,380
una regla aqu, anidar esto y decirlo para el nodo de rdenes y tienes que nombrar es

30
00:02:23,430 --> 00:02:26,690
exactamente como se nombra el nodo, all tengo

31
00:02:26,770 --> 00:02:31,650
un conjunto especfico de reglas, el acceso de lectura solo se concede

32
00:02:31,650 --> 00:02:38,980
si auth no es igual a nulo, por lo que si est autenticado y lo mismo para el

33
00:02:39,060 --> 00:02:48,310
acceso de escritura, eso solo se otorgar si es desigual anular Entonces, con eso, podemos publicar estas reglas y eso ahora garantizar que de hecho otorguemos

34
00:02:48,400 --> 00:02:53,170
acceso de escritura y lectura a los ingredientes para todos pero no para los pedidos.

35
00:02:53,170 --> 00:02:58,880
Sin embargo, si lo hacemos as, nuestras reglas de lectura y escritura de nivel superior an sobrescribirn esto para

36
00:02:58,900 --> 00:03:06,400
los nodos anidados, as que en realidad tengo que deshacerme de eso y en su lugar agregar una regla separada aqu para mis ingredientes y

37
00:03:06,910 --> 00:03:09,830
all lo har. todava configurado para leer y escribir como

38
00:03:10,000 --> 00:03:16,270
verdadero, pero eso significa que solo los ingredientes ahora tienen acceso de lectura y escritura o estn abiertos para todos los

39
00:03:16,270 --> 00:03:21,100
que debo decir, los pedidos solo estn disponibles para los usuarios autenticados y debera agregar una

40
00:03:21,580 --> 00:03:26,670
coma aqu despus del corchete de los ingredientes . Con eso podemos probarlo, si vuelvo a

41
00:03:26,670 --> 00:03:31,500
mi aplicacin, la vuelvo a cargar y voy a los pedidos, obtenemos un error,

42
00:03:31,660 --> 00:03:34,600
si voy al generador de hamburguesas, eso sigue funcionando.

43
00:03:34,610 --> 00:03:36,370
As que los ingredientes todava

44
00:03:36,460 --> 00:03:40,690
estaban cargados, solo recibo un error no autorizado si visito los pedidos aqu.

45
00:03:41,080 --> 00:03:42,820
Ahora que eso es bueno, eso es

46
00:03:42,820 --> 00:03:44,440
exactamente lo que quiero y con eso,

47
00:03:44,550 --> 00:03:52,460
ahora podemos asegurarnos de que podamos seguir recibiendo pedidos si somos autenticados y tenemos un token. Para hacer eso, tengo que ir al lugar donde

48
00:03:52,480 --> 00:03:59,170
realmente enviamos esta solicitud de pedidos y, por supuesto, son los creadores de acciones en el

49
00:03:59,460 --> 00:04:02,780
archivo de pedidos en la carpeta de acciones.

50
00:04:02,920 --> 00:04:09,790
All tenemos que comprar la accin Burger y tambin tenemos la accin fetchOrders, vamos a trabajar en

51
00:04:09,790 --> 00:04:10,600
esto primero.

52
00:04:10,900 --> 00:04:18,850
Aqu bsicamente tenemos que agregar nuestro token, nuestro token que obtuvimos de firebase al autenticar y luego

53
00:04:19,360 --> 00:04:22,920
podemos adjuntar este token a esta solicitud.

54
00:04:23,050 --> 00:04:30,730
La autenticacin es muy simple, solo tenemos que agregar una consulta param questionmark auth igual a la URL a la que realizamos la solicitud,

55
00:04:30,790 --> 00:04:37,720
que requiere un token y luego tenemos que pasar el token. Ahora el token, por supuesto, es lo

56
00:04:37,720 --> 00:04:42,540
especial, el token se almacena en nuestra tienda redux, cmo

57
00:04:42,670 --> 00:04:44,130
lo conseguimos aqu

58
00:04:44,200 --> 00:04:47,700
dentro de nuestro creador de acciones fetchOrders?

59
00:04:47,710 --> 00:04:51,890
Por supuesto que podramos recibir getState, usted aprendi sobre esto, no

60
00:04:51,940 --> 00:04:58,210
solo puede obtener su accin de despacho, tambin puede obtener la funcin getState aqu que puede

61
00:04:58,210 --> 00:05:00,730
ejecutar para obtener acceso al estado.

62
00:05:00,730 --> 00:05:06,360
Tambin te ense que no recomiendo usar mucho eso y no quiero usarlo aqu, aunque veo que

63
00:05:06,400 --> 00:05:11,350
este podra ser un caso en el que tenga sentido obtener esta informacin que realmente

64
00:05:11,350 --> 00:05:12,390
no importa para

65
00:05:12,400 --> 00:05:12,720
tu

66
00:05:12,730 --> 00:05:17,980
ver a la derecha en el creador de acciones. An as, quiero obtenerlo en el lugar donde despachamos

67
00:05:17,980 --> 00:05:22,110
la accin fetchOrders y luego simplemente pasarlo como argumento a este creador de acciones.

68
00:05:22,120 --> 00:05:27,990
As que espero obtener un argumento simblico en esta funcin y luego adjuntar el token aqu a mi

69
00:05:28,090 --> 00:05:33,850
solicitud, por lo que la pieza faltante es para asegurarse de que recibimos el token aqu cuando

70
00:05:33,880 --> 00:05:37,720
despachamos fetchOrders, por supuesto, se enva despacho en mi contenedor de pedidos

71
00:05:37,850 --> 00:05:43,750
, en la parte inferior, tenemos en FetchOrders y aqu de nuevo, ahora necesito pasar un token.

72
00:05:43,900 --> 00:05:49,960
As que este token tendr que pasarse a esta funcin annima que ejecutamos aqu y luego

73
00:05:49,960 --> 00:05:51,260
pasar al creador

74
00:05:51,490 --> 00:05:58,410
de acciones, as que finalmente tenemos que obtener el token en el lugar donde llamamos a los comandos

75
00:05:58,420 --> 00:06:04,870
GetOrders, onFetchOrders se llama aqu en el mtodo componentDidMount y ahora necesitamos asegurarnos de tener el token

76
00:06:04,930 --> 00:06:07,060
cuando lo llamemos. Ahora la ficha

77
00:06:07,060 --> 00:06:15,390
como dije almacenada en nuestra tienda redux, por supuesto, la almacenamos en nuestro segmento de estado de autenticacin aqu, el token.

78
00:06:15,430 --> 00:06:22,550
Entonces todo lo que tenemos que hacer es en nuestro contenedor de pedidos donde ya tenemos mapStateToProps. Ahora tambin

79
00:06:22,600 --> 00:06:25,180
necesito obtener el token de mi estado.

80
00:06:25,390 --> 00:06:33,190
As que nombrar el token de apoyo y quiero acceder al estado y ahora no. porque, en vez de eso, no estoy interesado en

81
00:06:33,190 --> 00:06:36,390
el sector relacionado con el pedido de

82
00:06:36,400 --> 00:06:42,970
mi estado si echamos un vistazo al ndice. js file donde combinamos los reductores, el auth reductor que configura el

83
00:06:42,970 --> 00:06:48,070
estado para el token, el auth reducer se puede encontrar en una propiedad de autenticacin, as que esto

84
00:06:48,070 --> 00:06:49,870
es a lo que debemos acceder.

85
00:06:50,110 --> 00:06:55,330
Entonces, en rdenes, debera acceder al estado. auth. token, como este.

86
00:06:55,330 --> 00:07:01,450
Y ahora con eso, estamos haciendo que el token est disponible en el token, ahora puedo pasar

87
00:07:01,450 --> 00:07:06,150
esto aqu con esto. accesorios. token y enfatizar que esta

88
00:07:06,160 --> 00:07:12,550
es solo una forma de hacerlo, la alternativa habra sido usar getState en el creador de la accin order.

89
00:07:12,550 --> 00:07:16,210
Con eso, aunque deberamos obtener la ficha y pasar aqu.

90
00:07:16,540 --> 00:07:22,930
As que ahora si guardamos todo nuestro cdigo y volvemos, todava fall aqu porque, obviamente, cuando la aplicacin se vuelve a

91
00:07:22,960 --> 00:07:24,700
cargar, todos los tokens se pierden.

92
00:07:24,700 --> 00:07:31,400
As que cambiemos para iniciar sesin y rpidamente inicie sesin con el usuario recreado hace un tiempo, pulse enviar ahora

93
00:07:31,420 --> 00:07:37,660
que podemos verificar en redux que tenemos una autenticacin exitosa y que en el estado de autenticacin, tenemos un

94
00:07:37,660 --> 00:07:38,600
token, vamos a

95
00:07:38,920 --> 00:07:40,810
dirigirnos a los pedidos y como

96
00:07:40,990 --> 00:07:45,900
puede ver, ahora cargamos con xito las rdenes aqu nuevamente sin un error, este error

97
00:07:46,090 --> 00:07:51,160
aqu a la derecha es antiguo porque ahora enviamos la solicitud con xito con el

98
00:07:51,160 --> 00:07:52,320
token adjunto.

99
00:07:52,600 --> 00:07:58,510
Y puedes ver esto si abres la pestaa de red en las herramientas de desarrollo de tu navegador, all puedes

100
00:07:58,960 --> 00:08:05,650
ver que si vuelvo a hacer pedidos, aqu est la solicitud que se enva donde se adjunta el token, esta es la URL

101
00:08:05,650 --> 00:08:08,710
muy larga pero porque el token es parte de la URL,

102
00:08:08,830 --> 00:08:12,900
as es como tenemos que autenticar y cmo podemos enviar nuestro token al back-end.

103
00:08:12,900 --> 00:08:19,120
As que ahora es cmo podemos usar el token para acceder a los recursos protegidos, por supuesto, lo mismo

104
00:08:19,300 --> 00:08:24,530
es relevante cuando hacemos un pedido aqu, purchaseBurger, all tambin tenemos que obtener ese token como

105
00:08:24,710 --> 00:08:29,670
argumento en el creador de acciones y luego agregarlo como un parmetro de consulta a

106
00:08:29,780 --> 00:08:34,040
la URL a la que estamos enviando la solicitud, por lo que auth

107
00:08:34,180 --> 00:08:41,080
tambin debe usar el token aqu o el parmetro de consulta de autenticacin debe ser el argumento token que estamos recibiendo

108
00:08:41,080 --> 00:08:41,620
aqu y

109
00:08:41,740 --> 00:08:46,190
para eso, por supuesto tenemos que asegurarnos de que recibo un token aqu tambin

110
00:08:46,480 --> 00:08:52,420
As que tenemos que ir al lugar donde despachamos purchaseBurger y eso por

111
00:08:52,510 --> 00:08:53,320
supuesto sucede

112
00:08:53,620 --> 00:09:01,890
en los datos de contacto, ah tenemos nuestro mtodo para hacer un pedido, orderHandler donde tenemos onOrderBurger que

113
00:09:01,890 --> 00:09:08,130
al final enva a este creador de acciones, as que ah, compreBurger es enviado.

114
00:09:08,130 --> 00:09:11,540
Ahora aqu tenemos que pasar ese token, para eso tenemos que

115
00:09:11,550 --> 00:09:17,760
recibirlo en nuestra lista de argumentos de este mtodo, estamos mapeando en el puntal y para eso tenemos que hacer

116
00:09:17,760 --> 00:09:21,650
que el token est disponible como un accesorio en ese contenedor tambin.

117
00:09:21,900 --> 00:09:28,290
As como en el contenedor de pedidos, asignar una propiedad de token a estado. auth. token y ahora podemos ir

118
00:09:28,560 --> 00:09:34,020
al lugar donde despachamos esto, donde llamamos al prop que despacha la

119
00:09:34,320 --> 00:09:39,200
accin en OrderBurger y tambin pasamos este token de utilera aqu.

120
00:09:39,360 --> 00:09:44,430
Y con eso, nos aseguramos de que tengamos un token y lo enviemos, ahora aqu recibimos un

121
00:09:44,430 --> 00:09:48,590
error porque la aplicacin se recarg y, por lo tanto, se pierde el token.

122
00:09:48,630 --> 00:09:55,570
Pero si vuelvo a iniciar sesin y nos ocuparemos de este cierre de sesin automtico que tendremos aqu pronto,

123
00:09:55,770 --> 00:09:58,310
si vuelvo a iniciar sesin voy al

124
00:09:58,470 --> 00:10:01,250
generador de hamburguesas, si ahora construyo una hamburguesa

125
00:10:01,290 --> 00:10:02,240
aqu, ordene ahora,

126
00:10:02,430 --> 00:10:04,500
contine, djeme borre la pestaa de

127
00:10:04,530 --> 00:10:05,350
red, contine

128
00:10:05,350 --> 00:10:09,460
aqu tambin y ahora ingresemos rpidamente algunos datos, como este.

129
00:10:09,710 --> 00:10:14,880
Si ahora hago clic en Solicitar aqu, vers que fue exitoso porque enva la solicitud de pedidos y no

130
00:10:14,970 --> 00:10:17,250
se confunde con dos solicitudes que se envan

131
00:10:17,250 --> 00:10:22,620
aqu, la primera es solo una solicitud de opciones que Chrome siempre enva si ests enviando una solicitud posterior.

132
00:10:22,620 --> 00:10:27,810
Esta es la relevante, esta solicitud de publicacin con el token y, de hecho, podemos verificar en

133
00:10:27,960 --> 00:10:32,910
nuestra base de datos que obtuvimos un nuevo pedido aqu con la hamburguesa que acabamos de configurar.

134
00:10:32,910 --> 00:10:39,080
As que ahora esto est funcionando, ahora estamos usando ese token para llegar a los recursos protegidos y, como puede

135
00:10:39,240 --> 00:10:44,520
ver al volver a cargar la aplicacin y visitar pedidos, por ejemplo, no est funcionando si no

136
00:10:44,520 --> 00:10:45,530
tiene un token.

137
00:10:45,660 --> 00:10:48,430
Por supuesto, no es la mejor experiencia de

138
00:10:48,430 --> 00:10:51,060
usuario simplemente visitar una pgina y luego fallar.

139
00:10:51,180 --> 00:10:56,280
Sera mejor si no podemos visitar pginas en las que necesitamos ser autenticados en primer

140
00:10:56,280 --> 00:11:01,620
lugar, por supuesto, tambin sera mejor si la interfaz de usuario nos mostrara si estamos autenticados

141
00:11:01,620 --> 00:11:08,150
y sera mejor si tambin pudiramos registrar el usuario en si tericamente todava hay un token vlido para que no

142
00:11:08,280 --> 00:11:11,910
perdamos nuestro estado de autenticacin cada vez que recargamos la aplicacin.

143
00:11:11,910 --> 00:11:15,060
Estas son todas las cosas que vamos a abordar en las prximas conferencias.

