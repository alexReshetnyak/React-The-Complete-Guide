1
00:00:02,170 --> 00:00:09,790
Portanto, agora que implementamos o logout automtico quando nosso token expirar e no se preocupe, voltaremos a nos

2
00:00:09,820 --> 00:00:13,900
concentrar no ajuste do layout, dependendo do estado de

3
00:00:14,040 --> 00:00:16,190
autenticao mais tarde, agora que

4
00:00:16,200 --> 00:00:22,690
implementamos o logout automtico, vamos voltar a usar esse token fazer solicitaes a recursos protegidos.

5
00:00:22,690 --> 00:00:28,810
Esse  um caso de uso tpico, voc tem um back-end com determinados pontos de extremidade da API que s

6
00:00:28,810 --> 00:00:31,020
devem ser usados por usurios autenticados, agora

7
00:00:31,150 --> 00:00:35,520
mesmo em nosso back-end de demonstrao com o firebase, mas esse no  o caso.

8
00:00:35,750 --> 00:00:42,820
Se dermos uma olhada no banco de dados que nos fornece nossos pontos de extremidade no final, todos os pontos de extremidade, de modo que

9
00:00:42,820 --> 00:00:48,940
todas as solicitaes enviadas para essa URL e, em seguida, todos os ns aninhados alm disso esto basicamente disponveis para todos.

10
00:00:49,120 --> 00:00:56,710
Esse  o caso, porque no incio do curso, ns alteramos nossas regras aqui para conceder acesso de leitura e

11
00:00:56,710 --> 00:00:59,500
gravao a todos aqui definindo isso como

12
00:00:59,890 --> 00:01:04,890
true, fizemos isso para poder usar esse banco de dados sem autenticao, agora

13
00:01:04,960 --> 00:01:08,160
recebemos autenticao ns podemos finalmente mudar isso de volta.

14
00:01:08,170 --> 00:01:13,670
Agora  claro que este  o firebase especfico que voc faz com as regras definidas, para

15
00:01:13,670 --> 00:01:15,940
o seu prprio backend onde voc escreve

16
00:01:15,970 --> 00:01:21,700
seu prprio cdigo API, voc provavelmente tem algum se verificar onde voc est se algum token vlido est

17
00:01:21,700 --> 00:01:23,920
anexado ao pedido e voc simplesmente retorne

18
00:01:23,950 --> 00:01:29,980
uma resposta 403 se no for esse o caso. Aqui, no entanto, temos essas regras e, no caso mais simples,

19
00:01:29,980 --> 00:01:37,120
podemos definir isso como auth unequal null, o que significa simplesmente que se auth no for igual a null, o acesso de leitura ser concedido.

20
00:01:37,470 --> 00:01:41,860
Mas, em outras palavras, isso significa que, se voc no est autenticado, a autenticao  nula,

21
00:01:41,920 --> 00:01:43,560
portanto, isso retorna false e voc

22
00:01:43,660 --> 00:01:45,350
no obtm acesso de leitura, o

23
00:01:45,370 --> 00:01:47,910
mesmo pode ser feito para o acesso de gravao.

24
00:01:48,280 --> 00:01:54,290
Se o configurarmos dessa forma, isso  aplicado a todo o banco de dados, a todos os

25
00:01:54,460 --> 00:02:01,870
dados que esto l, agora, na verdade, quero dar acesso a ingredientes para todos e apenas fazer o acesso a pedidos

26
00:02:02,080 --> 00:02:04,150
disponveis apenas para usurios autenticados.

27
00:02:04,180 --> 00:02:10,510
Ento, para firebase o que podemos fazer , podemos ajustar nossas regras e podemos dizer sim,

28
00:02:10,600 --> 00:02:16,250
em geral, voc tem acesso de leitura e gravao, mas podemos adicionar uma regra

29
00:02:16,270 --> 00:02:23,380
aqui, aninhar isso e dizer para o n de pedidos e voc deve nomear exatamente como o

30
00:02:23,430 --> 00:02:26,690
n  nomeado, l eu tenho um conjunto

31
00:02:26,770 --> 00:02:31,650
especfico de regras, l o acesso de leitura  concedido somente se

32
00:02:31,650 --> 00:02:38,980
a autenticao for diferente de null ento se voc for autenticado e o mesmo para acesso de gravao,

33
00:02:39,060 --> 00:02:48,310
isso tambm deve ser concedido apenas se for desigual para null. Ento, com isso, podemos publicar essas regras e isso garantir que, de fato, s

34
00:02:48,400 --> 00:02:53,170
concedemos acesso de escrita e leitura aos ingredientes para todos, mas no para as ordens.

35
00:02:53,170 --> 00:02:58,880
No entanto, se fizermos assim, nossas regras de leitura e gravao de nvel superior ainda substituiro isso por

36
00:02:58,900 --> 00:03:06,400
qualquer n aninhado, ento eu realmente tenho que me livrar disso e, em vez disso, adicionarei uma regra separada aqui para os meus

37
00:03:06,910 --> 00:03:09,830
ingredientes e l ainda definido para ler e escrever

38
00:03:10,000 --> 00:03:16,270
para true, mas isso significa que apenas os ingredientes agora tm acesso de leitura e gravao ou esto abertos a

39
00:03:16,270 --> 00:03:21,100
todos, devo dizer, os pedidos s esto disponveis para usurios autenticados e devo adicionar uma

40
00:03:21,580 --> 00:03:26,670
vrgula aqui aps o encaracolado dos ingredientes . Com isso podemos test-lo, se eu voltar

41
00:03:26,670 --> 00:03:31,500
ao meu aplicativo, recarreg-lo e ir para os pedidos, recebemos um erro, se eu

42
00:03:31,660 --> 00:03:34,600
for para o construtor de hambrguer, isso ainda funciona.

43
00:03:34,610 --> 00:03:36,370
Ento os ingredientes ainda estavam

44
00:03:36,460 --> 00:03:40,690
carregados, s recebo um erro no autorizado se eu fizer pedidos aqui.

45
00:03:41,080 --> 00:03:42,820
Agora isso  bom,  exatamente isso

46
00:03:42,820 --> 00:03:44,440
que eu quero e com isso, agora

47
00:03:44,550 --> 00:03:52,460
podemos ter certeza de que ainda podemos alcanar pedidos se formos autenticados e tivermos um token. Para fazer isso, eu preciso ir para o lugar

48
00:03:52,480 --> 00:03:59,170
onde ns realmente enviamos este pedido de pedidos e que, claro, so os criadores de aes

49
00:03:59,460 --> 00:04:02,780
no arquivo de pedidos na pasta de aes.

50
00:04:02,920 --> 00:04:09,790
L ns temos que comprar a ao Burger e ns tambm temos a ao fetchOrders, vamos trabalhar

51
00:04:09,790 --> 00:04:10,600
nisso primeiro.

52
00:04:10,900 --> 00:04:18,850
Aqui, basicamente, precisamos adicionar nosso token, nosso token  recuperado do Firebase ao autenticar e, em seguida,

53
00:04:19,360 --> 00:04:22,920
podemos anexar esse token a essa solicitao.

54
00:04:23,050 --> 00:04:30,730
A autenticao  muito simples, ento, basta adicionar um parmetro de consulta authmark igual  URL para a qual estamos fazendo o pedido, o que

55
00:04:30,790 --> 00:04:37,720
requer um token e, em seguida, temos que passar o token. Agora, o token, claro, aqui  a

56
00:04:37,720 --> 00:04:42,540
coisa especial, o token  armazenado em nossa loja redux,

57
00:04:42,670 --> 00:04:44,130
como podemos obt-lo

58
00:04:44,200 --> 00:04:47,700
aqui dentro do nosso criador de aes fetchOrders?

59
00:04:47,710 --> 00:04:51,890
 claro que poderamos receber getState, voc aprendeu sobre isso, voc no

60
00:04:51,940 --> 00:04:58,210
s pode obter sua ao de despacho, voc tambm pode obter a funo getState aqui que voc

61
00:04:58,210 --> 00:05:00,730
pode executar para obter acesso ao estado.

62
00:05:00,730 --> 00:05:06,360
Eu tambm te ensinei que eu no estou recomendando muito usar isso e eu no quero us-lo aqui,

63
00:05:06,400 --> 00:05:11,350
embora eu veja que este poderia ser um caso em que faz sentido obter essa informao

64
00:05:11,350 --> 00:05:12,390
que realmente no

65
00:05:12,400 --> 00:05:12,720
importa

66
00:05:12,730 --> 00:05:17,980
para o seu ver diretamente no criador de aes. Ainda assim, quero obt-lo no local onde enviamos a ao

67
00:05:17,980 --> 00:05:22,110
fetchOrders e, em seguida, simplesmente passamos isso como um argumento para esse criador de aes.

68
00:05:22,120 --> 00:05:27,990
Ento eu espero obter um argumento de token nesta funo e ento eu anexei o token aqui

69
00:05:28,090 --> 00:05:33,850
ao meu pedido, ento a pea que faltava  ter certeza de que recebemos o token aqui

70
00:05:33,880 --> 00:05:37,720
ao despachar fetchOrders, pedidos de busca so enviados no meu continer

71
00:05:37,850 --> 00:05:43,750
de pedidos , l na parte inferior, temos onFetchOrders e aqui novamente, agora preciso passar algum token.

72
00:05:43,900 --> 00:05:49,960
Ento esse token ter que ser passado para essa funo annima que executamos aqui e

73
00:05:49,960 --> 00:05:51,260
ento passada para

74
00:05:51,490 --> 00:05:58,410
o criador da ao, ento finalmente temos que pegar o token no lugar onde chamamos onFetchOrders, onFetchOrders

75
00:05:58,420 --> 00:06:04,870
 chamado aqui no mtodo componentDidMount e agora ns precisa ter certeza de que temos o

76
00:06:04,930 --> 00:06:07,060
token quando chamamos isso. Agora, o token

77
00:06:07,060 --> 00:06:15,390
como eu disse como armazenado em nossa loja de redux,  claro, ns o armazenamos em nossa fatia de estado de autenticao aqui, o token.

78
00:06:15,430 --> 00:06:22,550
Ento, tudo o que precisamos fazer  no nosso continer de pedidos, onde j temos mapStateToProps. Agora eu tambm

79
00:06:22,600 --> 00:06:25,180
preciso obter o token do meu estado.

80
00:06:25,390 --> 00:06:33,190
Ento eu vou nomear o token prop e quero acessar o estado e agora no. ordem porque no estou interessado na fatia relacionada

81
00:06:33,190 --> 00:06:36,390
ao pedido do meu estado, em

82
00:06:36,400 --> 00:06:42,970
vez disso, se olharmos para o ndice. No arquivo js onde combinamos os redutores, o redutor de autenticao

83
00:06:42,970 --> 00:06:48,070
que configura o estado do token, o redutor de autenticao pode ser encontrado em uma propriedade auth,

84
00:06:48,070 --> 00:06:49,870
ento  isso que devemos acessar.

85
00:06:50,110 --> 00:06:55,330
Ento, em ordens, eu deveria acessar o estado. auth. token, assim.

86
00:06:55,330 --> 00:07:01,450
E agora com isso, estamos disponibilizando o token no token prop, agora posso simplesmente passar

87
00:07:01,450 --> 00:07:06,150
isso aqui com isso. adereos. token e vai enfatizar que

88
00:07:06,160 --> 00:07:12,550
esta  apenas uma maneira de faz-lo, a alternativa teria sido usar getState no criador de ao de ordem.

89
00:07:12,550 --> 00:07:16,210
Com isso, porm, devemos pegar o token e passar adiante.

90
00:07:16,540 --> 00:07:22,930
Ento, agora, se salvarmos todo o nosso cdigo e voltarmos, ele ainda falha aqui porque, obviamente, quando o aplicativo recarrega,

91
00:07:22,960 --> 00:07:24,700
todos os tokens so perdidos.

92
00:07:24,700 --> 00:07:31,400
Ento, vamos mudar para entrar e entrar rapidamente com o usurio recriado h algum tempo, clique em enviar

93
00:07:31,420 --> 00:07:37,660
agora, podemos verificar no redux que temos uma autenticao bem-sucedida e que no estado de autenticao, temos

94
00:07:37,660 --> 00:07:38,600
um token, vamos

95
00:07:38,920 --> 00:07:40,810
agora para os pedidos e

96
00:07:40,990 --> 00:07:45,900
como voc pode ver, agora carregamos os pedidos aqui com sucesso novamente sem um

97
00:07:46,090 --> 00:07:51,160
erro, esse erro aqui  direita  antigo porque agora enviamos a solicitao com

98
00:07:51,160 --> 00:07:52,320
o token anexado.

99
00:07:52,600 --> 00:07:58,510
E voc pode realmente ver isso se voc abrir a guia de rede nas ferramentas de desenvolvimento do seu navegador, l voc

100
00:07:58,960 --> 00:08:05,650
pode ver que se eu voltar aos pedidos novamente, aqui est a solicitao que est sendo enviada onde o token est anexado, esse  o

101
00:08:05,650 --> 00:08:08,710
URL muito longo, mas o token faz parte do URL, 

102
00:08:08,830 --> 00:08:12,900
assim que temos que autenticar e como podemos enviar o nosso token para o backend.

103
00:08:12,900 --> 00:08:19,120
Ento, agora  assim que podemos usar o token para acessar recursos protegidos,  claro que o mesmo 

104
00:08:19,300 --> 00:08:24,530
relevante quando fazemos um pedido aqui, o purchaseBurger, tambm precisamos pegar esse token como um argumento

105
00:08:24,710 --> 00:08:29,670
no criador da ao e adicion-lo como um parmetro de consulta para o URL para

106
00:08:29,780 --> 00:08:34,040
o qual estamos enviando o pedido, portanto, auth tambm deve usar o token

107
00:08:34,180 --> 00:08:41,080
aqui ou o parmetro de consulta de autenticao deve ser o argumento do token que estamos recebendo aqui e, para isso,

108
00:08:41,080 --> 00:08:41,620
 claro

109
00:08:41,740 --> 00:08:46,190
que precisamos ter certeza de que receba um token aqui tambm.

110
00:08:46,480 --> 00:08:52,420
Ento temos que ir ao local onde despachamos o purchaseBurger e isso,

111
00:08:52,510 --> 00:08:53,320
claro, acontece

112
00:08:53,620 --> 00:09:01,890
nos dados de contato, a temos nosso mtodo para fazer um pedido, o orderHandler onde temos onOrderBurger

113
00:09:01,890 --> 00:09:08,130
que no final despacha esse criador de ao, ento l, purchaseBurger  despachado.

114
00:09:08,130 --> 00:09:11,540
Agora aqui precisamos passar esse token, para isso precisamos

115
00:09:11,550 --> 00:09:17,760
receb-lo em nossa lista de argumentos deste mtodo que estamos mapeando no suporte e para isso

116
00:09:17,760 --> 00:09:21,650
precisamos disponibilizar o token como um prop nesse continer tambm.

117
00:09:21,900 --> 00:09:28,290
Ento, assim como no continer de pedidos, mapeamos uma propriedade de token para o estado. auth. token e agora podemos ir

118
00:09:28,560 --> 00:09:34,020
para o lugar onde ns enviamos isso, onde chamamos o suporte despachando

119
00:09:34,320 --> 00:09:39,200
a ao onOrderBurger e tambm passamos este token de adereo aqui.

120
00:09:39,360 --> 00:09:44,430
E com isso, estamos nos certificando de que estamos tendo um token e enviando-o, agora, aqui,

121
00:09:44,430 --> 00:09:48,590
recebemos um erro porque o aplicativo  recarregado, portanto, o token  perdido.

122
00:09:48,630 --> 00:09:55,570
Mas se eu fizer login novamente e ns cuidarmos desse auto-logout que teremos aqui em breve, se eu fizer

123
00:09:55,770 --> 00:09:58,310
o login novamente, eu vou ao burger

124
00:09:58,470 --> 00:10:01,250
builder, se eu agora construir um hambrguer aqui,

125
00:10:01,290 --> 00:10:02,240
pea agora, continue,

126
00:10:02,430 --> 00:10:04,500
deixe-me limpe a guia de rede,

127
00:10:04,530 --> 00:10:05,350
continue aqui

128
00:10:05,350 --> 00:10:09,460
tambm e agora vamos inserir rapidamente alguns dados, como este.

129
00:10:09,710 --> 00:10:14,880
Se agora eu clicar em fim aqui, voc ver que foi bem-sucedido porque envia a solicitao de pedidos e

130
00:10:14,970 --> 00:10:17,250
no se confunde com duas solicitaes enviadas aqui. A

131
00:10:17,250 --> 00:10:22,620
primeira  apenas uma solicitao de opes que o Chrome sempre envia se voc estiver enviando um pedido de postagem.

132
00:10:22,620 --> 00:10:27,810
Este  o mais relevante, esta solicitao de postagem com o token e, de fato, podemos verificar em

133
00:10:27,960 --> 00:10:32,910
nosso banco de dados que recebemos um novo pedido aqui com o hambrguer que acabamos de configurar.

134
00:10:32,910 --> 00:10:39,080
Ento, isso agora est funcionando, agora estamos usando esse token para alcanar recursos protegidos e, como voc pode ver

135
00:10:39,240 --> 00:10:44,520
quando recarrega o aplicativo e visita pedidos, por exemplo, ele no est funcionando se voc no

136
00:10:44,520 --> 00:10:45,530
tiver um token.

137
00:10:45,660 --> 00:10:48,430
Claro que no  a melhor experincia do

138
00:10:48,430 --> 00:10:51,060
usurio, basta visitar uma pgina e falhar.

139
00:10:51,180 --> 00:10:56,280
Seria melhor se no pudssemos visitar pginas em que precisssemos ser autenticados,  claro

140
00:10:56,280 --> 00:11:01,620
que tambm seria melhor se a interface nos mostrasse se somos autenticados e seria

141
00:11:01,620 --> 00:11:08,150
melhor se pudssemos registrar tambm user in se teoricamente ainda houver um token vlido para que no

142
00:11:08,280 --> 00:11:11,910
percamos nosso estado de autenticao sempre que recarregarmos o aplicativo.

143
00:11:11,910 --> 00:11:15,060
Estas so todas as coisas que vamos abordar nas prximas palestras.

