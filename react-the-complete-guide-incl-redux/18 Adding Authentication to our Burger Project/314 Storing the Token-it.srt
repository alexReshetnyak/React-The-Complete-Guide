1
00:00:02,190 --> 00:00:07,650
Abbiamo ricevuto il token e tutte queste informazioni al momento della registrazione e dell'accesso, ovviamente vogliamo archiviarlo

2
00:00:07,650 --> 00:00:16,290
per poter accedere in futuro anche alle risorse sul nostro server che sono protette. Per memorizzare quel token, ora andr nella mia cartella di riduttori

3
00:00:16,350 --> 00:00:23,210
e creer un nuovo file di riduttore auth. js, l voglio gestire queste azioni di

4
00:00:23,230 --> 00:00:29,360
autenticazione e il mio stato di autenticazione. Per questo, prima di tutto importer tutti

5
00:00:29,400 --> 00:00:36,330
i miei tipi di azioni qui dalla cartella azioni e l, dai tipi di azioni

6
00:00:36,330 --> 00:00:43,890
perch ne ho bisogno nella mia dichiarazione caso di commutazione e quindi creer la mia funzione di

7
00:00:43,890 --> 00:00:51,430
riduttore, come sempre ricevendo lo stato e il azione, lo espor come predefinito di questo file.

8
00:00:51,710 --> 00:01:01,070
Creer anche uno stato iniziale, quindi lo stato iniziale dovrebbe essere un oggetto javascript e l in questo oggetto

9
00:01:01,130 --> 00:01:07,520
javascript, voglio avere il mio token che  inizialmente nullo, voglio anche forse

10
00:01:07,520 --> 00:01:12,660
memorizzare il mio ID utente che  inizialmente nullo, possiamo

11
00:01:12,860 --> 00:01:20,720
anche memorizzare un errore qui inizialmente nullo e forse anche il caricamento che  falso.

12
00:01:20,720 --> 00:01:26,490
Ora nel mio riduttore, aggiunger questa dichiarazione caso interruttore, cambier il tipo di

13
00:01:26,720 --> 00:01:29,570
azione e l, controller i miei

14
00:01:29,900 --> 00:01:36,600
casi ora, il primo caso  actionTypes. AUTH_START e l voglio solo restituire

15
00:01:36,620 --> 00:01:44,550
il mio stato e ora possiamo naturalmente utilizzare la nostra funzione di utilit per

16
00:01:44,780 --> 00:01:56,270
aggiornare un oggetto, quindi lo importer anche qui, importer updateObject dal file di utilit per restituire lo stato aggiornato con updateObject

17
00:01:56,690 --> 00:02:05,560
passa il vecchio stato e aggiorna solo l'errore, lo imposta nuovamente in caso di modifica e

18
00:02:05,600 --> 00:02:13,030
caricamento, impostalo su true qui perch abbiamo appena iniziato a caricare qui ovviamente.

19
00:02:13,370 --> 00:02:17,320
Abbiamo anche bisogno di impostare un caso predefinito gi per sbarazzarsi di questo

20
00:02:17,460 --> 00:02:20,460
errore IDE, ci torner solo il mio stato, come questo.

21
00:02:20,510 --> 00:02:25,060
Ora abbiamo ottimizzato tutti gli altri riduttori per avere dichiarazioni caso-interruttore magra,

22
00:02:25,050 --> 00:02:26,380
facciamolo anche qui.

23
00:02:26,480 --> 00:02:34,160
Creer qui una nuova funzione che chiamer authStart dove ottengo lo stato e l'azione e dove voglio

24
00:02:34,160 --> 00:02:44,030
semplicemente restituire questo codice qui, quindi restituire il mio oggetto stato aggiornato in modo che qui per questo caso possa solo chiamare

25
00:02:44,030 --> 00:02:51,900
authStart, return per essere precisi perch ho ancora bisogno di restituire uno stato qui nel mio riduttore,

26
00:02:51,910 --> 00:02:54,950
authStart e passare lo stato e l'azione.

27
00:02:55,510 --> 00:03:03,040
Ora aggiunger un'altra funzione al mio auth reducer, authSuccess, qui ci aspettiamo

28
00:03:03,040 --> 00:03:12,600
naturalmente anche lo stato e l'azione e l, restituir anche un oggetto aggiornato, quindi chiamer updateObject

29
00:03:12,660 --> 00:03:17,440
qui e lo restituir per il mio stato.

30
00:03:17,460 --> 00:03:22,790
Ora, cosa deve cambiare uno stato in caso di successo? In un caso di successo, voglio impostare

31
00:03:22,920 --> 00:03:28,020
il token e l'ID utente e l'errore e il caricamento, quindi tutto.

32
00:03:28,440 --> 00:03:35,370
Quindi, in un caso di successo, imposter token per dirci token ID azione, mi

33
00:03:35,370 --> 00:03:38,620
aspetto di ottenere questa propriet sul

34
00:03:38,640 --> 00:03:42,680
mio ID utente azione su ID utente azione,

35
00:03:42,680 --> 00:03:47,080
inoltre mi aspetto di ottenere questo, errore in null

36
00:03:47,100 --> 00:03:53,190
e caricamento in falso perch fatto. Ora creer anche un'altra funzione,

37
00:03:53,200 --> 00:03:57,650
authFail, l ricevo anche lo stato e

38
00:03:58,040 --> 00:04:06,550
l'azione e qui, restituir lo stato updateObject e qui imposter quindi l'errore di

39
00:04:06,770 --> 00:04:14,630
errore di azione che mi aspetto di ottenere e che sto ancora

40
00:04:14,630 --> 00:04:16,100
caricando su falso.

41
00:04:16,100 --> 00:04:23,600
Ora queste due azioni devono ovviamente essere gestite con i casi, quindi aggiungiamo un caso actionTypes. AUTH_SUCCESS, whoops, AUTH_SUCCESS, qui voglio restituire

42
00:04:23,640 --> 00:04:33,620
il risultato della funzione authSuccess che ho appena creato, passare lo stato e l'azione, naturalmente,

43
00:04:33,620 --> 00:04:39,890
e il caso actionTypes. AUTH_FAIL, qui voglio restituire il risultato della

44
00:04:40,100 --> 00:04:43,660
mia funzione authFail in cui passo anche lo

45
00:04:43,670 --> 00:04:46,080
stato e l'azione, quindi queste

46
00:04:46,190 --> 00:04:52,880
sono due funzioni che ho appena creato. Con ci ottengo un simpatico riduttore di autorizzazione

47
00:04:52,880 --> 00:04:55,080
che dovrebbe essere in grado

48
00:04:55,220 --> 00:04:59,470
di fare qualcosa con i miei dati, ora ovviamente voglio

49
00:04:59,540 --> 00:05:11,460
combinarlo con gli altri riduttori cos nel mio indice principale. js file, importer l'auth reducer da. / store reducers auth, come questo e aggiungilo

50
00:05:12,310 --> 00:05:14,790
per combinare i riduttori sul

51
00:05:14,830 --> 00:05:23,230
dominio auth, quindi su una propriet denominata auth. Con questo abbiamo aggiunto al nostro root riduttore globale,

52
00:05:23,650 --> 00:05:27,890
non avremo tutte le informazioni che vogliamo, ID token,

53
00:05:27,920 --> 00:05:33,180
ID utente, estrae tutto ci dall'azione, ora se guardiamo qui nella

54
00:05:33,250 --> 00:05:40,030
nostra azione, Non stiamo davvero trasmettendo quei dati. Quindi esaminiamo la risposta che otteniamo per vedere

55
00:05:40,030 --> 00:05:44,980
come estraiamo i dati che vogliamo trasmettere a authSuccess e cos via.

56
00:05:44,980 --> 00:05:53,170
Quindi torniamo alla nostra applicazione e la ricarichiamo e otteniamo questo errore perch nel riduttore per l'autenticazione, ho dimenticato

57
00:05:53,180 --> 00:05:55,160
una cosa importante, lo

58
00:05:55,270 --> 00:06:01,020
stato ovviamente deve essere impostato sullo stato iniziale altrimenti non  definito all'inizio.

59
00:06:01,200 --> 00:06:07,810
Cos ora, funziona di nuovo e proviamo ora ad accedere, accedendo perch questo indirizzo e-mail  gi

60
00:06:07,810 --> 00:06:09,340
stato preso, ci viene

61
00:06:09,340 --> 00:06:16,660
restituita una risposta e ora qui vediamo che otteniamo l'ID locale che  l'ID utente e noi ottenere il

62
00:06:16,660 --> 00:06:17,400
token ID,

63
00:06:17,410 --> 00:06:18,980
 anche interessante per me.

64
00:06:19,360 --> 00:06:23,380
Quindi queste sono due cose che salver, non salver il token

65
00:06:23,470 --> 00:06:26,270
di aggiornamento, quindi non  possibile aggiornare il

66
00:06:26,290 --> 00:06:32,020
token qui, questo  qualcosa che dovresti fare se vuoi assicurarti che i token non scadano

67
00:06:32,200 --> 00:06:36,450
dopo 1 ora, nella mia app, le persone dovranno accedere nuovamente dopo un'ora.

68
00:06:36,760 --> 00:06:42,110
Quindi per salvare quei dati su ID locale e token ID, ottengo

69
00:06:42,340 --> 00:06:51,010
quello nel mio file auth nella cartella azioni, qui dove pubblichiamo la nostra richiesta di autenticazione e riceviamo una risposta,

70
00:06:51,010 --> 00:06:53,870
nei dati di risposta, abbiamo il token

71
00:06:54,040 --> 00:07:02,380
ID e il campo ID locale e ho bisogno di passare questo su authSuccess perch authSuccess quindi ha bisogno

72
00:07:02,400 --> 00:07:07,640
di passarlo, passando su diciamo il token, quindi mi aspetto di ottenere

73
00:07:07,660 --> 00:07:16,870
il mio token e l'ID utente qui in modo che possa passare il token e l'ID utente come oggetti di scena

74
00:07:16,870 --> 00:07:19,860
che Quindi provo ad estrarre il mio riduttore.

75
00:07:19,960 --> 00:07:26,050
L cerco di estrarre token, token ID e id utente, quindi il suo token ID lo

76
00:07:26,230 --> 00:07:34,650
rinominiamo nel nostro file di azione auth, dovrebbe essere una propriet denominata token ID e per l'errore, si chiama errore, che 

77
00:07:34,690 --> 00:07:42,430
gi quello che provo estrarre in modo che funzioner. Con questo abbiamo bisogno di tornare al file auth qui

78
00:07:42,550 --> 00:07:50,130
e mi aspetto di ottenere il mio token e l'ID utente nella funzione authSuccess, che ovviamente significa che quando

79
00:07:50,200 --> 00:07:57,330
invio questa funzione qui, nel caso di successo, ho bisogno di passarlo on, quindi ho bisogno di passare

80
00:07:57,400 --> 00:08:04,450
i dati di risposta e poi  stato chiamato token ID e come secondo argomento, i dati di

81
00:08:04,450 --> 00:08:11,260
risposta e l'ID utente sono stati memorizzati in una propriet ID locale e puoi sempre verificarlo nel

82
00:08:11,260 --> 00:08:11,750
log

83
00:08:11,800 --> 00:08:16,960
della console, token ID e ID locale. Con ci sto salvando quei dati

84
00:08:17,320 --> 00:08:19,060
e ora vediamo se

85
00:08:19,070 --> 00:08:23,150
funziona, mandiamo questi dati ancora una volta, passiamo ad

86
00:08:23,150 --> 00:08:30,780
accedere, andiamo a redux e premiamo invio e in caso di successo se ora ispezioniamo lo stato,

87
00:08:31,050 --> 00:08:37,110
vediamo che in auth in effetti abbiamo il token e abbiamo l'ID utente

88
00:08:37,110 --> 00:08:44,310
qui memorizzato, in modo che funzionasse tutto. Con quello stiamo memorizzando lo stato di autenticazione, quello che non stiamo facendo

89
00:08:44,310 --> 00:08:45,310
 che non stiamo

90
00:08:45,320 --> 00:08:47,140
mostrando uno spinner mentre stiamo autenticando.

91
00:08:47,400 --> 00:08:54,600
Aggiungiamo questo e la gestione degli errori prima di continuare e utilizzare quel token quando proviamo ad accedere a

92
00:08:54,600 --> 00:08:58,230
risorse che altrimenti non sarebbero in grado di accedere.

