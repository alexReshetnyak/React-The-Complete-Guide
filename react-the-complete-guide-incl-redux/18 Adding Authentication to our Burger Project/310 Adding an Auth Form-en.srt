1
00:00:02,240 --> 00:00:09,830
So back in our application, this is where we last left it, I'll add a new container. I'll add in the containers

2
00:00:09,830 --> 00:00:11,520
folder and I'll name it auth,

3
00:00:11,570 --> 00:00:13,570
you can of course name this whatever you want

4
00:00:13,760 --> 00:00:19,450
and there, I'll create the auth.js file and this will be this page I want to load with the sign up or sign in

5
00:00:19,550 --> 00:00:24,280
form. Now in here, I will create a class based component

6
00:00:24,530 --> 00:00:31,110
so I'll import react and component from react,

7
00:00:31,110 --> 00:00:35,360
it's been a time since we created such a component but I'm sure you still know how it works.

8
00:00:35,380 --> 00:00:37,480
We create it with the class keyword,

9
00:00:37,540 --> 00:00:43,280
then the name of the component like auth and we extend this component we're importing.

10
00:00:43,310 --> 00:00:49,980
There we need a render method where we return some jsx and in the end, I'll export this class as

11
00:00:49,980 --> 00:00:51,910
the file default.

12
00:00:51,940 --> 00:00:59,650
Now the jsx here will be pretty close to our contact data form, I'll have a wrapping div and in

13
00:00:59,650 --> 00:01:04,020
there, I'll add a form element and in this form element

14
00:01:04,030 --> 00:01:11,110
I want to use my custom input and button components, just as I use them in the contact data component

15
00:01:11,170 --> 00:01:12,770
or container.

16
00:01:12,910 --> 00:01:20,120
I'll also manage my form through the state of this auth container, not through redux because I'm only talking about

17
00:01:20,120 --> 00:01:24,600
the local state, the values the user entered into their form inputs and so on

18
00:01:24,670 --> 00:01:30,760
and it makes more sense to me to use them and to manage them inside the container with react's state

19
00:01:30,760 --> 00:01:31,860
property.

20
00:01:31,930 --> 00:01:38,890
So I'll add state here and I'll add a controls property and I'll set it up kind of equally to the contact

21
00:01:38,890 --> 00:01:42,270
data so that I can reuse the logic from there,

22
00:01:42,280 --> 00:01:49,090
there we had an orderForm property and then we had the various controls and they all had something like

23
00:01:49,090 --> 00:01:51,710
the element, type, config and so on.

24
00:01:51,760 --> 00:01:59,560
I'm going to copy the name control from there and put it into my auth controls object and rename it from

25
00:01:59,560 --> 00:02:01,390
name to e-mail,

26
00:02:01,390 --> 00:02:04,150
now the element type will still be an input element,

27
00:02:04,420 --> 00:02:12,220
the config here I will create an input element of type e-mail and placeholder should just be mail

28
00:02:12,790 --> 00:02:14,510
address, for example.

29
00:02:14,830 --> 00:02:16,810
Now the value initially is empty,

30
00:02:16,870 --> 00:02:24,670
regarding the rules, I want to reuse the checkValidity method from contact data and there, I support

31
00:02:24,670 --> 00:02:27,890
things like required minLength, maxLength,

32
00:02:27,970 --> 00:02:34,190
isEmail, isNumeric and that is basically what I want to introduce in the auth container too.

33
00:02:34,560 --> 00:02:43,150
So I have required and now I also want to set up isEmail to true for this e-mail control I'm creating here,

34
00:02:43,840 --> 00:02:47,570
valid initially should be false and touched is also false.

35
00:02:47,800 --> 00:02:52,550
And now, I will duplicate this once to also have a password field

36
00:02:52,720 --> 00:02:58,250
so here I'll add password like this, it will also be of type input

37
00:02:58,480 --> 00:03:05,710
but then, the element type will be of that, the type of the input itself then will be a password and the placeholder

38
00:03:05,860 --> 00:03:08,210
will therefore be password.

39
00:03:08,380 --> 00:03:09,690
It should be required

40
00:03:09,700 --> 00:03:15,420
and let's say we want to have a minLength of seven characters or six characters

41
00:03:15,430 --> 00:03:20,710
maybe, that actually is the minLength required by firebase, of course adjust this to your backend.

42
00:03:20,710 --> 00:03:27,550
With that we got this set up, we can now dynamically create that form and for that, I first of all

43
00:03:27,550 --> 00:03:30,360
need to import the input and button components

44
00:03:30,370 --> 00:03:37,540
so my own components there. Input from, now I need to move up into the components folder, into the UI folder

45
00:03:37,630 --> 00:03:45,560
then there the input folder with the input file and the same for the button component, like this.

46
00:03:45,580 --> 00:03:48,940
Now the logic is the same as in the contact data component,

47
00:03:48,970 --> 00:03:55,900
there we also looped through all our controls here and I can therefore copy the code from there where

48
00:03:55,900 --> 00:04:02,860
I converted my state object to an array I can loop through, I'll copy that. I'll then move over to the

49
00:04:02,860 --> 00:04:07,530
auth container and add that in the render method before I return anything

50
00:04:07,870 --> 00:04:13,690
and now I want to loop through it and create my form. So I'll create a new constant which I'll name

51
00:04:13,690 --> 00:04:21,980
form and there, I want to take my form elements array called map to map it into an array of jsx elements,

52
00:04:22,060 --> 00:04:29,180
I get each form element here and I will return jsx, I want to return my input,

53
00:04:29,320 --> 00:04:33,080
it's a self-closing element and it takes a lot of keys and properties.

54
00:04:33,100 --> 00:04:35,130
The first one is the key property,

55
00:04:35,530 --> 00:04:44,190
there I really just want to use the form element ID which is available since I add it here.

56
00:04:44,200 --> 00:04:50,220
If you remember the form's module, we added it here, it's the name of the element to be precise

57
00:04:50,590 --> 00:04:56,200
and then, all the other keys which are expected. We can have a look at the contact data and we can actually

58
00:04:56,200 --> 00:04:59,780
copy all the set up from there, for all the other props

59
00:04:59,780 --> 00:05:05,050
we set up on the input element and add it here in the auth container.

60
00:05:05,050 --> 00:05:08,180
So there we can also leave the code as it is

61
00:05:08,200 --> 00:05:13,560
because I kept the name, I'm talking about a form element in my loop and I do use that here too.

62
00:05:13,810 --> 00:05:19,060
I do have a config key and a value key and all these keys because I use the same set up in my state

63
00:05:19,060 --> 00:05:21,480
property so that's really reusable

64
00:05:21,820 --> 00:05:28,090
and with that, we now have a dynamically generated set of inputs.

65
00:05:28,510 --> 00:05:31,320
Now the next thing is of course that I also need a button

66
00:05:31,390 --> 00:05:41,050
so below all these inputs, I'll add a button. That button requires a button type prop which I'll set to

67
00:05:41,050 --> 00:05:48,160
success, danger would be the other option we have in our application and that should not be part of my

68
00:05:48,160 --> 00:05:54,340
form here though, that should be part of my form element down there where I return something and above

69
00:05:54,340 --> 00:05:59,970
the button, I'll render the form content which contains my inputs.

70
00:06:00,820 --> 00:06:07,000
With that, the button should not be a self-closing element but the button should allow me to add some

71
00:06:07,450 --> 00:06:09,960
caption in between the tags,

72
00:06:10,120 --> 00:06:18,310
so here I'll simply say submit and now we got a form with inputs and a button. To see it,

73
00:06:18,410 --> 00:06:24,520
we need to load it via routing, we got the auth container and we set up all our routes in the app.js

74
00:06:24,770 --> 00:06:25,610
file.

75
00:06:25,940 --> 00:06:34,990
So there I want to import my auth container, import auth from ./containers auth and auth again

76
00:06:35,180 --> 00:06:43,220
and now here, I'll simply replicate one of the routes and let's say for /auth, I want to load this

77
00:06:43,280 --> 00:06:46,100
auth component, like that.

78
00:06:46,100 --> 00:06:49,030
Let's try this out and to be able to reach that,

79
00:06:49,130 --> 00:06:57,710
I'll also go into my components folder and there to navigation, navigation items into the navigation

80
00:06:57,770 --> 00:06:59,290
items component,

81
00:06:59,540 --> 00:07:02,530
here we got our links and I will add a new one,

82
00:07:02,720 --> 00:07:10,960
I will add a link to /auth and I'll give it a caption of authenticate, something like that. With that

83
00:07:10,960 --> 00:07:14,890
set up, let's go back to the application, we are on

84
00:07:14,890 --> 00:07:18,650
authenticate, the styling is a bit off though

85
00:07:18,790 --> 00:07:22,490
and if we inspect it, I can't spot my inputs.

86
00:07:22,870 --> 00:07:28,890
So let's head back to the auth container and see where the inputs are at,

87
00:07:28,930 --> 00:07:32,840
we have a form, that should be that form constant

88
00:07:33,030 --> 00:07:35,240
but somehow when looping through the array

89
00:07:35,250 --> 00:07:38,560
here, we seem to not really create inputs.

90
00:07:38,560 --> 00:07:41,940
The reason is because I copied the code from contact data,

91
00:07:41,980 --> 00:07:49,340
I'm referring to an orderForm property in my state but here in the auth container, I renamed this to controls

92
00:07:49,630 --> 00:07:51,570
so I'll just rename it here too

93
00:07:51,790 --> 00:07:55,090
and now if we go back, we see the controls.

94
00:07:55,160 --> 00:08:01,960
Now to also give this some styling, I'll add an auth.css file and I'll copy the styling from the contact

95
00:08:01,960 --> 00:08:07,340
data css file into there, replace the contact data class

96
00:08:07,360 --> 00:08:13,900
here with the auth class and leave all the styling and in the auth.js file, I'll then import

97
00:08:14,170 --> 00:08:23,800
my classes from the ./auth.css file and then I'll assign it to the wrapping div, so that the wrapping

98
00:08:23,800 --> 00:08:32,180
div here receives the class name which is classes.Auth, this newly added css class.

99
00:08:32,180 --> 00:08:34,160
If we now save all these files,

100
00:08:34,160 --> 00:08:38,740
this is looking pretty good on all device sizes, I guess.

101
00:08:38,840 --> 00:08:45,520
So this is my sign up form, the next step is to also configure this form to have validation,

102
00:08:45,530 --> 00:08:47,370
so let's do that in the next step,

103
00:08:47,450 --> 00:08:50,920
I will also copy the code for this from contact data

104
00:08:51,020 --> 00:08:57,560
and by the way with all these code copying, you would correctly say can't we outsource some of this code

105
00:08:57,560 --> 00:09:00,240
in some centralized file and yes we can,

106
00:09:00,260 --> 00:09:05,970
we'll do this in the next module where we will apply some optimizations to this project.

107
00:09:05,990 --> 00:09:09,680
For now, I would just wrap checkValidity, this method,

108
00:09:09,830 --> 00:09:18,620
copy it and add it to my auth container too, so above render, I'll add checkValidity which supports various

109
00:09:18,620 --> 00:09:19,220
rules,

110
00:09:19,250 --> 00:09:26,600
actually all the rules I use here and now I need an inputChangedHandler and I will also get this from

111
00:09:26,600 --> 00:09:28,040
contact data.

112
00:09:28,370 --> 00:09:37,290
So to check the validity, I'll add a new method to my auth container, I'll name it inputChangedHandler

113
00:09:38,000 --> 00:09:44,500
and there, I expect to get the event and the control name which did change

114
00:09:45,450 --> 00:09:51,560
and in there, I now can use a lot of the logic but not all from the contact data.

115
00:09:51,900 --> 00:09:59,640
I want to create an updated form, not named orderForm though where I update my elements but I'll

116
00:09:59,640 --> 00:10:08,850
do it manually here in the auth container. So I'll create my updatedControls constant where I'll create

117
00:10:08,850 --> 00:10:16,680
a new object where I'll copy this.state.controls first and then I want to only update one of the

118
00:10:16,680 --> 00:10:22,040
controls, the control with the control name we have here.

119
00:10:22,440 --> 00:10:28,170
So state controls simply copies all elements inside this control object

120
00:10:28,320 --> 00:10:33,300
and one of them will then be overwritten by me and that's the one with the name I receive as an argument

121
00:10:33,300 --> 00:10:37,730
here and that should then in turn receive a new object.

122
00:10:37,980 --> 00:10:46,740
So here, I will then also call this.state.controls for that given control name and distribute all these

123
00:10:46,740 --> 00:10:51,120
properties so that I can then overwrite some of the properties,

124
00:10:51,120 --> 00:10:59,530
for example the value, now the value of this control and I can basically now overwrite all the properties

125
00:10:59,530 --> 00:11:03,240
we have here on the control, like value and valid and touched.

126
00:11:03,730 --> 00:11:14,510
So the value will now be event.target.value, valid will use this checkValidity method and there I will pass

127
00:11:14,560 --> 00:11:16,580
event.target.value

128
00:11:16,630 --> 00:11:19,080
and the rules of this given control,

129
00:11:19,090 --> 00:11:25,810
so the rules are this.state.controls for this control name,

130
00:11:25,870 --> 00:11:29,820
there we have this validation property which I'll pass,

131
00:11:29,830 --> 00:11:35,740
so that is referring to that validation property each control has where I set up the rules.

132
00:11:35,890 --> 00:11:39,640
So that is now what I pass as a second argument to check validity,

133
00:11:40,410 --> 00:11:47,580
additionally, I'll add another property, touched, it will be set to true here whenever this inputChangedHandler

134
00:11:47,580 --> 00:11:51,490
fires, the user did type something so it's definitely touched.

135
00:11:51,750 --> 00:11:57,840
So with that, I update my individual control which was changed,

136
00:11:57,870 --> 00:12:01,190
I update all the relevant fields I want to change.

137
00:12:01,500 --> 00:12:06,510
Now I deliberately won't handle the overall form validity here,

138
00:12:06,510 --> 00:12:07,740
I won't check this,

139
00:12:07,740 --> 00:12:14,070
I won't disable the submit button for invalid forms because I also want to show what happens if we submit

140
00:12:14,100 --> 00:12:15,490
invalid forms,

141
00:12:15,540 --> 00:12:18,400
you can of course implement this too but I won't.

142
00:12:18,810 --> 00:12:25,320
So I'm pretty much done here, what I will have to do is I'll call set state in inputChangedHandler

143
00:12:25,800 --> 00:12:29,880
and set the controls property equal to my updatedControls

144
00:12:29,880 --> 00:12:35,900
now. With that, I got this working, now I need to connect it,

145
00:12:35,970 --> 00:12:39,950
I already did this because I used the same name as in contact data,

146
00:12:40,080 --> 00:12:41,910
so this should work.

147
00:12:42,240 --> 00:12:48,450
Now let's save this and let's see if validation is working then, back in the project if I start typing

148
00:12:48,450 --> 00:12:54,540
here, it stays invalid until it's a valid email address and the password has to be at least 6 characters

149
00:12:54,540 --> 00:12:56,570
long to be treated as valid.

150
00:12:56,610 --> 00:12:57,440
So that's working

151
00:12:57,450 --> 00:13:00,900
and as I said, the button is deliberately never changed.

152
00:13:00,900 --> 00:13:02,550
So my form is finished,

153
00:13:02,640 --> 00:13:08,460
my next step is to now handle the submission and of course I want to do this using redux and action

154
00:13:08,730 --> 00:13:09,150
creators.

