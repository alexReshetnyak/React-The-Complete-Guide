1
00:00:02,070 --> 00:00:04,350
Quindi impariamo le nozioni di base sul

2
00:00:04,470 --> 00:00:10,230
prossimo, ma cosa succede se voglio ancora comporre la mia applicazione da componenti e non solo pagine,

3
00:00:10,230 --> 00:00:11,420
non dovrei farlo pi?

4
00:00:11,520 --> 00:00:13,360
Dovremmo assolutamente.

5
00:00:13,380 --> 00:00:16,770
Il modo in cui costruisci la tua applicazione di

6
00:00:16,800 --> 00:00:22,800
reazione non cambia,  comunque una buona pratica comporre la tua applicazione di molti piccoli pezzi.

7
00:00:22,800 --> 00:00:27,420
Quindi aggiungiamo una nuova cartella, i componenti e il nome della cartella in realt dipende

8
00:00:27,450 --> 00:00:29,340
da te, a nextjs non interessa,

9
00:00:29,370 --> 00:00:33,890
potresti chiamarlo C, CMP, qualunque cosa tu voglia. L, aggiunger il

10
00:00:34,080 --> 00:00:37,920
mio utente. js, un componente utente, creer

11
00:00:38,160 --> 00:00:46,670
un utente costante, forse otterr alcuni oggetti di scena e poi emetter un po 'di jsx e per questo naturalmente, come sempre, l'importazione

12
00:00:46,670 --> 00:00:57,230
reagir reagendo in quel modo ed esportando questa costante dell'utente come default del file. Qui possiamo ora creare un nuovo div dove voglio produrre

13
00:00:57,250 --> 00:00:58,010
alcuni

14
00:00:58,090 --> 00:01:06,110
dati utente come ad esempio il nome che mi aspetto di ottenere tramite oggetti di scena

15
00:01:06,110 --> 00:01:07,920
e poi diciamo anche

16
00:01:08,240 --> 00:01:13,020
l'et, gli oggetti di scena. et.

17
00:01:13,140 --> 00:01:17,760
Questo  un componente molto semplice, ovviamente perch deliberatamente non stiamo

18
00:01:17,780 --> 00:01:21,920
tracciando i componenti, voglio mostrarvi come usarlo nell'applicazione nextjs.

19
00:01:22,010 --> 00:01:26,260
Ora, una volta ottenuto ci, una volta ottenuto questo componente, lo usiamo come sempre, diciamo

20
00:01:26,390 --> 00:01:29,230
che vogliamo usare in authIndex. js file, semplicemente importiamo

21
00:01:29,240 --> 00:01:32,350
utente da ora andiamo su e andiamo alla

22
00:01:32,450 --> 00:01:39,520
cartella components e l importiamo il file utente e poi aggiungo semplicemente il mio componente utente in questo

23
00:01:39,530 --> 00:01:41,930
modo, passando i puntelli del nome

24
00:01:42,110 --> 00:01:49,470
da quando mi aspetto questo e il puntello dell'et che  il numero cos,  cos che posso usare

25
00:01:49,480 --> 00:01:49,950
questo.

26
00:01:50,100 --> 00:01:52,760
Ora se salviamo tutti i file

27
00:01:52,760 --> 00:01:54,130
e torniamo, lo

28
00:01:54,170 --> 00:01:56,120
vedi gi qui Max 28.

29
00:01:56,300 --> 00:02:02,050
Quindi lavoriamo ancora con i componenti nella nostra applicazione nextjs, abbiamo solo

30
00:02:02,180 --> 00:02:09,980
la cartella delle pagine speciali che contiene anche componenti, funzionali o di classe ma che  l'unica

31
00:02:09,980 --> 00:02:16,700
cartella che ottiene un trattamento speciale perch nextjs come analizzeremo tutti i file in

32
00:02:16,700 --> 00:02:21,740
loro come pagine, creare percorsi per loro e code dividere automaticamente.

33
00:02:21,860 --> 00:02:28,060
Dal modo in cui la suddivisione del codice ovviamente include anche componenti inclusi in quella pagina come il

34
00:02:28,070 --> 00:02:28,820
componente utente,

35
00:02:29,060 --> 00:02:33,490
la usiamo solo nel componente auth, nell'authindex. js file, quindi caricheremo

36
00:02:33,680 --> 00:02:36,100
il codice solo se

37
00:02:36,260 --> 00:02:42,650
navighiamo a quella pagina. Se passiamo tutto il nostro tempo sull'indice principale. js pagina dove non usiamo il

38
00:02:42,650 --> 00:02:46,310
componente utente, non caricaremmo mai il codice neanche per questo.

