1
00:00:02,080 --> 00:00:06,310
Nell'ultima lezione, abbiamo creato la nostra prima applicazione nextjs.

2
00:00:06,310 --> 00:00:11,980
Ora questo non  un corso nextjs completo e potresti effettivamente creare un corso su questo, voglio

3
00:00:11,980 --> 00:00:16,710
solo mostrarti le semplici funzionalit di base in modo da poterti immergere pi a

4
00:00:16,720 --> 00:00:20,080
fondo, ad esempio con il repository github che ti ho indicato.

5
00:00:20,080 --> 00:00:26,230
Quindi vediamo ora come possiamo navigare facilmente dalla nostra pagina principale dell'indice alla pagina dell'indice auth, per cui ovviamente

6
00:00:26,230 --> 00:00:32,170
abbiamo bisogno di un collegamento e con il router di reazione, usiamo il componente collegato che il router

7
00:00:32,200 --> 00:00:35,280
di reazione ci ha fornito. Ora con nextjs, abbiamo

8
00:00:35,290 --> 00:00:37,650
anche un componente di collegamento che

9
00:00:37,750 --> 00:00:40,140
possiamo usare, ma non viene dal

10
00:00:40,240 --> 00:00:44,610
router di risposta, ma invece viene da bene, ovviamente nextjs.

11
00:00:44,710 --> 00:00:48,430
Quindi, per navigare, importer un nuovo componente, il

12
00:00:48,430 --> 00:00:56,680
componente di collegamento da prossimo / collegamento, il collegamento importante ha un minuscolo L qui nel percorso di importazione.

13
00:00:56,980 --> 00:00:59,320
Ora possiamo aggiungere questo link

14
00:00:59,500 --> 00:01:07,500
qui, per esempio, posso aggiungere un paragrafo nella mia pagina principale e dire andare a e ora link auth.

15
00:01:07,540 --> 00:01:12,880
Ora che funziona, il collegamento deve essere configurato in modo da puntare da qualche parte e lo fai

16
00:01:12,880 --> 00:01:16,990
con l'attributo ref come su un normale tag di ancoraggio in html normale.

17
00:01:17,080 --> 00:01:23,410
E l, puoi puntare ad auth / auth per puntare alla cartella auth e l sceglier sempre l'indice. file js se ne

18
00:01:23,420 --> 00:01:25,660
hai preso uno.

19
00:01:25,690 --> 00:01:28,830
Quindi il collegamento da solo non far il

20
00:01:28,900 --> 00:01:35,530
trucco per, in realt usi ancora il normale tag di ancoraggio al suo interno senza l'attributo ref,

21
00:01:35,530 --> 00:01:42,790
tuttavia, dietro le quinte, nextjs aggiunger fondamentalmente l'attributo ref al tag anchor ma poi acquisir tutti i clic sul

22
00:01:42,790 --> 00:01:47,770
tag di ancoraggio e gestirlo internamente in modo da non ricaricare la pagina.

23
00:01:47,800 --> 00:01:51,970
Se ora salviamo questo e torniamo alla nostra applicazione, ricarichiamo l'app, dovremmo vedere il

24
00:01:52,270 --> 00:01:56,120
link in basso, se clicchiamo su di esso, andiamo su / auth.

25
00:01:56,320 --> 00:02:01,630
Un'altra cosa interessante che dovresti essere in grado di vedere  che se vai alla scheda di

26
00:02:01,630 --> 00:02:04,200
rete e ricarichi la tua pagina principale e

27
00:02:04,490 --> 00:02:11,850
fai clic su auth, vedi anche che  stato caricato un ulteriore auth authle e questo  ci che nextjs fa per te,

28
00:02:12,010 --> 00:02:13,790
la suddivisione automatica del codice .

29
00:02:13,870 --> 00:02:16,880
A proposito, non essere intimidito dalle dimensioni dei

30
00:02:16,890 --> 00:02:18,660
file, questo non  affatto

31
00:02:18,670 --> 00:02:22,540
ottimizzato, questo contiene un sacco di overhead dell'ambiente di sviluppo.

32
00:02:22,750 --> 00:02:28,600
In questo modo  possibile suddividere gratuitamente il codice e con il link che vedi

33
00:02:28,600 --> 00:02:31,280
qui puoi navigare facilmente nella tua applicazione.

34
00:02:31,590 --> 00:02:36,190
Ecco come utilizziamo il collegamento ed  cos che possiamo facilmente aggirare la nostra applicazione.

35
00:02:36,190 --> 00:02:38,630
Anche qui non si limita a usare

36
00:02:38,680 --> 00:02:44,620
il collegamento, diciamo che hai un pulsante in cui vuoi andare su auth e vuoi farlo con

37
00:02:44,620 --> 00:02:45,930
un clic e quindi

38
00:02:45,940 --> 00:02:49,240
naviga imperativamente, quindi nel tuo codice puoi sempre farlo.

39
00:02:49,300 --> 00:02:54,100
Per esempio qui, ovviamente, registrando onClick listener e quindi definendo un metodo che dovrebbe essere eseguito

40
00:02:54,100 --> 00:02:58,350
e che ovviamente potrebbe essere se si dispone di un componente basato sulla classe,

41
00:02:58,360 --> 00:03:06,320
qualsiasi metodo in quel componente, qui sto semplicemente scrivendolo in linea per mantenerlo breve.  quindi possibile importare il router dal prossimo

42
00:03:06,320 --> 00:03:15,380
/ router, come in questo caso con la lettera minuscola e quindi qui, si pu semplicemente chiamare il router

43
00:03:15,470 --> 00:03:17,810
push / auth e questo

44
00:03:17,990 --> 00:03:20,320
 un modo molto rapido

45
00:03:20,360 --> 00:03:28,310
di imperativamente cos nel codice, navigando in giro. Se ora torni indietro e carichi la tua pagina principale, ottenuto quel pulsante,

46
00:03:28,340 --> 00:03:33,830
se fai clic su di esso, sei sulla pagina di autorizzazione ora navigata attraverso il codice con quell'oggetto router.

47
00:03:33,830 --> 00:03:36,870
Ecco come ti muovi, come usi il link in nextjs.

48
00:03:37,400 --> 00:03:43,210
Uno dei concetti chiave e sembra super semplice ma molto sta succedendo dietro le

49
00:03:43,280 --> 00:03:47,550
quinte, soprattutto la suddivisione automatica del codice che  fantastica.

50
00:03:47,900 --> 00:03:51,700
Ora vediamo cosa ci offre nextjs e come lavoriamo con esso.

