1
00:00:02,060 --> 00:00:08,940
Quindi iniziamo a impostare un progetto nextJS, puoi trovare tutte le istruzioni su quella pagina github e questo 

2
00:00:08,960 --> 00:00:15,230
un ottimo posto per immergerti pi a fondo. Come potete vedere qui, nextjs nell'ultima versione al momento in

3
00:00:15,230 --> 00:00:21,550
cui sto registrando questo richiede una reazione 16 che sotto la cappa ha introdotto alcune modifiche irrisolte e che 

4
00:00:21,620 --> 00:00:24,330
la versione che abbiamo usato durante il corso.

5
00:00:24,770 --> 00:00:28,150
Quindi stiamo bene, useremo anche quella versione

6
00:00:28,340 --> 00:00:30,550
qui e ora installiamo nextjs,

7
00:00:30,570 --> 00:00:37,290
questo pacchetto con questo comando, come vedi anche tu continui a installare react e react-dom.

8
00:00:37,640 --> 00:00:40,100
Ora per eseguire questo,  necessario un progetto

9
00:00:40,100 --> 00:00:43,120
vuoto e qui ne ho gi caricato uno nel mio

10
00:00:43,130 --> 00:00:46,980
IDE, l'unica cosa che ho qui  un file gitignore perch user git.

11
00:00:47,240 --> 00:00:53,720
Ora, prima di tutto, per poter eseguire i comandi npm, dobbiamo mettere questo progetto sotto controllo di npm, lo fai

12
00:00:53,720 --> 00:00:59,150
eseguendo npm init, poi ti viene chiesto un paio di domande a cui puoi semplicemente rispondere con

13
00:00:59,150 --> 00:01:02,840
s colpendo semplicemente enter . Una volta che hai risposto a

14
00:01:02,840 --> 00:01:06,510
tutte queste domande, ottieni un pacco. file json che viene utilizzato per gestire le dipendenze.

15
00:01:06,710 --> 00:01:12,830
Parlo della creazione di questo file in modo un po 'pi dettagliato nel modulo in cui creiamo da

16
00:01:12,830 --> 00:01:14,180
zero il nostro progetto.

17
00:01:14,450 --> 00:01:21,320
Ora possiamo eseguire il comando che hai visto sulla pagina github qui, installare npm --salva con questi

18
00:01:21,500 --> 00:01:23,650
tre pacchetti, successivamente, reagisci e

19
00:01:23,700 --> 00:01:28,540
reagisci-dom perch nextjs  un'app di libreria che reagisce, ti offre funzionalit

20
00:01:28,550 --> 00:01:34,280
extra ma dietro le quinte o anche dal punto di vista del codice cosa

21
00:01:34,280 --> 00:01:37,830
stai per scrivere,  ancora tutto in grado di reagire.

22
00:01:37,850 --> 00:01:43,400
Una volta che questo comando  terminato e tutti questi pacchetti sono installati nelle loro ultime

23
00:01:43,400 --> 00:01:46,600
versioni, possiamo tornare al repository github per trovare pi istruzioni.

24
00:01:46,640 --> 00:01:50,520
Ora dovremmo aggiungere questa sezione degli script a pacchetto. json quindi

25
00:01:50,680 --> 00:01:56,900
facciamolo, nel pacchetto. file json, in realt abbiamo una sezione di

26
00:01:56,900 --> 00:02:03,890
script, possiamo sostituirla con quella che abbiamo appena afferrato dal nostro file github qui, quindi lo script

27
00:02:04,090 --> 00:02:06,380
dovrebbe essere aggiunto in questo modo.

28
00:02:06,380 --> 00:02:08,440
Con ci, possiamo iniziare a

29
00:02:08,450 --> 00:02:11,090
usarlo e ora che abbiamo quella

30
00:02:11,120 --> 00:02:15,880
cosa importante del file system di cui stavo parlando, in nextjs,

31
00:02:15,920 --> 00:02:24,110
il file system  la nostra API principale, non usiamo il router di reazione con nextjs per creare percorsi

32
00:02:24,110 --> 00:02:25,470
e consentire all'utente

33
00:02:25,700 --> 00:02:36,290
per visitare / auth, / user e cos via, invece creiamo cartelle e file per riflettere i nostri URL nel file system e nextJS, il

34
00:02:36,470 --> 00:02:42,870
pacchetto lo analizzer automaticamente e user il proprio router interno per gestire tutto il sollevamento pesante.

35
00:02:42,950 --> 00:02:53,040
Ora, durante il percorso, esegue il pre-rendering del contenuto che cariciamo come pagine sul server, codifica automaticamente le suddivisioni, quindi carichi pigri

36
00:02:53,120 --> 00:02:58,670
che, tutto ci appena estratto dalla scatola senza che noi configuriamo nulla.

37
00:02:58,700 --> 00:03:04,170
Questo  il motivo per cui il prossimo  un pacchetto cos grande e potrebbe valere la pena dare

38
00:03:04,190 --> 00:03:10,880
un'occhiata al tuo prossimo progetto, molte cose stanno semplicemente lavorando fuori dalla scatola l al prezzo di dover mantenere una certa struttura di file.

39
00:03:11,540 --> 00:03:15,560
Quella struttura dei file riguarda principalmente

40
00:03:15,710 --> 00:03:21,820
la cartella delle pagine, creiamo. Lo crei direttamente nella cartella radice accanto ai

41
00:03:21,830 --> 00:03:27,470
moduli del nodo e agli altri file qui, quindi l crei una nuova cartella e

42
00:03:27,470 --> 00:03:34,730
l crei i tuoi file javascript che reagiranno ai componenti che manterranno ed esporteranno i componenti e questi nomi

43
00:03:34,760 --> 00:03:40,870
di file ora definiscono i diversi percorsi che hai. Puoi anche avere una sottocartella come auth

44
00:03:40,940 --> 00:03:47,270
l e l aggiungere per esempio utente. js, dovresti raggiungere questo file nel tuo dominio /

45
00:03:47,270 --> 00:03:52,440
auth / utente, se nominerai questo indice. js, lo raggiungeresti su / auth.

46
00:03:52,520 --> 00:03:56,150
Aggiungiamo anche un indice. file js sotto la cartella

47
00:03:56,210 --> 00:04:02,060
delle pagine, ora abbiamo qualcosa come l'esempio. it / e raggiungerebbe quel file e / auth e

48
00:04:02,060 --> 00:04:02,990
raggiungerebbe quel file.

49
00:04:02,990 --> 00:04:05,060
Ora consente di aggiungere un componente in entrambi

50
00:04:05,150 --> 00:04:10,520
e in genere qui, si utilizzano componenti funzionali, ma naturalmente  anche possibile utilizzare quelli di stato con le parole

51
00:04:10,520 --> 00:04:13,700
chiave della classe nel caso in cui sia necessario gestire lo stato.

52
00:04:14,120 --> 00:04:16,490
Quindi creiamo uno funzionale qui, chiamer

53
00:04:16,580 --> 00:04:21,260
questa indexPage, il nome dipende da te e tu sai che

54
00:04:21,650 --> 00:04:26,330
la sintassi qui, dove potresti ricevere oggetti di scena, restituire qualcosa.

55
00:04:26,330 --> 00:04:32,750
Ora quello che far  che tutte le importazioni reagiscono reagendo cos proprio come hai imparato in questo corso,

56
00:04:32,750 --> 00:04:35,430
che non cambia perch stiamo ancora usando jsx

57
00:04:35,570 --> 00:04:38,150
qui, beh non ancora, ma lo faremo in

58
00:04:38,150 --> 00:04:40,810
un secondo e io export indexPage come predefinito.

59
00:04:40,820 --> 00:04:41,570
Questo 

60
00:04:41,570 --> 00:04:46,720
importante, devi ancora esportare questo otherwsie. Nextjs non pu fare nulla con quello.

61
00:04:46,730 --> 00:04:48,730
Quindi ora aggiungiamo semplicemente

62
00:04:48,730 --> 00:05:00,860
del codice qui, come un div dove diciamo h1 alla pagina principale, come questo. Ora copier tutto quel codice e

63
00:05:00,860 --> 00:05:09,100
lo inserir nell'altro indice. js file, chiamer authIndexPage e, naturalmente, esporter questa costante

64
00:05:09,320 --> 00:05:12,750
e l, dir la pagina di indice auth.

65
00:05:12,770 --> 00:05:13,900
Ora salviamolo e

66
00:05:13,910 --> 00:05:17,860
ora eseguiamo uno degli script che abbiamo aggiunto, dev.

67
00:05:17,870 --> 00:05:25,400
Ora se esegui npm esegui dev, questo far ruotare su un server di sviluppo sviluppando la tua applicazione e lato

68
00:05:25,400 --> 00:05:29,770
server rendendolo anche dando cose come il ricaricamento a caldo, quindi un

69
00:05:29,810 --> 00:05:31,580
ambiente di sviluppo davvero bello.

70
00:05:31,730 --> 00:05:39,020
Se ora torni al browser, puoi effettivamente caricarlo in una nuova scheda sotto localhost: 3000, l dovresti

71
00:05:39,470 --> 00:05:45,970
vedere la tua pagina e se ora vai su / auth vedi la pagina dell'indice auth.

72
00:05:46,070 --> 00:05:52,790
Quindi, senza che noi configuriamo alcun routing, possiamo caricare questi due diversi componenti come pagine e, come ho detto,

73
00:05:52,790 --> 00:05:55,880
questi componenti non devono essere componenti funzionali, potrebbero anche

74
00:05:55,880 --> 00:05:58,030
essere componenti basati su classi.

