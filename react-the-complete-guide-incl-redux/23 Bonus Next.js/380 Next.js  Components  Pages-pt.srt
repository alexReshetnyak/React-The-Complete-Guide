1
00:00:02,070 --> 00:00:04,350
Ento, aprendemos o bsico sobre o prximo, mas

2
00:00:04,470 --> 00:00:10,230
o que  se eu ainda quiser compor meu aplicativo a partir de componentes e no apenas de pginas, no

3
00:00:10,230 --> 00:00:11,420
devo mais fazer isso?

4
00:00:11,520 --> 00:00:13,360
Ns deveramos absolutamente.

5
00:00:13,380 --> 00:00:16,770
A maneira como voc constri seu aplicativo reagente

6
00:00:16,800 --> 00:00:22,800
no muda, ainda  uma boa prtica compor sua aplicao de muitos pequenos pedaos.

7
00:00:22,800 --> 00:00:27,420
Ento, vamos adicionar uma nova pasta, componentes e este nome da pasta, na verdade,  com voc,

8
00:00:27,450 --> 00:00:29,340
nextjs to no se importa com isso,

9
00:00:29,370 --> 00:00:33,890
voc poderia nome-lo C, CMP, o que voc quiser. Ali, adicionarei

10
00:00:34,080 --> 00:00:37,920
meu usurio. js, um componente de usurio,

11
00:00:38,160 --> 00:00:46,670
vou criar um usurio constante, pegar alguns adereos talvez e ento dar sada alguns jsx e para isso eu vou claro como sempre

12
00:00:46,670 --> 00:00:57,230
importar reagir de reagir assim e exportar essa constante de usurio como o arquivo default. Aqui agora podemos criar uma nova div onde eu quero

13
00:00:57,250 --> 00:00:58,010
dar

14
00:00:58,090 --> 00:01:06,110
sada a alguns dados do usurio como por exemplo o nome que eu espero obter via

15
00:01:06,110 --> 00:01:07,920
adereos e ento vamos

16
00:01:08,240 --> 00:01:13,020
dizer tambm a idade, adereos. era.

17
00:01:13,140 --> 00:01:17,760
 um componente muito simples, claro, porque no estamos puxando

18
00:01:17,780 --> 00:01:21,920
componentes, quero mostrar como usar isso no aplicativo nextjs.

19
00:01:22,010 --> 00:01:26,260
Agora, uma vez que conseguimos isso, uma vez que recebemos este componente, usamos como sempre, digamos

20
00:01:26,390 --> 00:01:29,230
que queremos usar no authIndex. js arquivo, ns simplesmente

21
00:01:29,240 --> 00:01:32,350
importamos o usurio a partir de agora vamos subir

22
00:01:32,450 --> 00:01:39,520
e vamos at a pasta de componentes e l importar o arquivo do usurio e ento simplesmente adicionar meu

23
00:01:39,530 --> 00:01:41,930
componente de usurio assim, passando o nome

24
00:01:42,110 --> 00:01:49,470
props j que espero isso e a idade prop que  o nmero assim,  assim que eu posso usar

25
00:01:49,480 --> 00:01:49,950
isso.

26
00:01:50,100 --> 00:01:52,760
Agora, se salvarmos todos os arquivos

27
00:01:52,760 --> 00:01:54,130
e voltarmos, voc

28
00:01:54,170 --> 00:01:56,120
j ver aqui Max 28.

29
00:01:56,300 --> 00:02:02,050
Ento, ns ainda trabalhamos com componentes em nosso aplicativo nextjs, ns apenas temos

30
00:02:02,180 --> 00:02:09,980
a pasta de pginas especiais que tambm contm componentes, funcionais ou baseados em classes, mas que  a

31
00:02:09,980 --> 00:02:16,700
nica pasta que recebe algum tratamento especial porque nextjs vamos analisar todos os arquivos em

32
00:02:16,700 --> 00:02:21,740
como pginas, criar rotas para eles e codificar automaticamente a diviso.

33
00:02:21,860 --> 00:02:28,060
Pela maneira como a diviso de cdigo tambm inclui componentes includos nessa pgina, como o componente do usurio, usamos apenas

34
00:02:28,070 --> 00:02:28,820
isso no

35
00:02:29,060 --> 00:02:33,490
componente de autenticao, no ndice de autenticao. arquivo js, ento ns apenas

36
00:02:33,680 --> 00:02:36,100
carregamos o cdigo para ele

37
00:02:36,260 --> 00:02:42,650
se navegarmos para aquela pgina. Se passarmos todo o nosso tempo no ndice principal. Na pgina js, onde no usamos

38
00:02:42,650 --> 00:02:46,310
o componente do usurio, nunca carregaramos o cdigo para isso.

