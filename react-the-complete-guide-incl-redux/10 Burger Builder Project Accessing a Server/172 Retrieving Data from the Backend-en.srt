1
00:00:02,170 --> 00:00:05,240
In the last lecture we made sure that we can handle errors,

2
00:00:05,310 --> 00:00:12,030
and with that we get a robust application which allows us to post our orders to our backend, that already

3
00:00:12,030 --> 00:00:12,750
is a lot.

4
00:00:12,750 --> 00:00:14,810
Now there's one more thing I want to do though

5
00:00:15,000 --> 00:00:18,460
I also want to be able to get some data from the backend

6
00:00:18,900 --> 00:00:23,000
and why don't we get our ingredients from there.

7
00:00:23,040 --> 00:00:25,960
So the ingredients which we set up like this.

8
00:00:26,040 --> 00:00:33,120
Why don't we get the ingredients dynamically from the backend. For that, let's go to firebase first

9
00:00:33,460 --> 00:00:35,620
and let's close the orders node,

10
00:00:35,640 --> 00:00:41,160
now let's add a new node by clicking on the plus directly next to your root name here

11
00:00:41,160 --> 00:00:50,400
and let's name this ingredients, then add this plus your on the right to add a nested element and there

12
00:00:50,400 --> 00:00:54,740
ingredients should really just be our key value pairs.

13
00:00:54,750 --> 00:00:57,870
So there we might have salad with a value of zero,

14
00:00:57,870 --> 00:01:03,760
click this add button then and now add more and let's add meat with a value of zero,

15
00:01:04,080 --> 00:01:08,010
let's add bacon with a value of zero,

16
00:01:08,010 --> 00:01:11,760
so I'm using the same ingredients as before because I only support these

17
00:01:11,850 --> 00:01:16,600
but you could of course now add more to both your front-end code and your backend.

18
00:01:17,130 --> 00:01:20,490
And let me also add cheese here

19
00:01:21,450 --> 00:01:24,480
and of course you could also set up different starting values.

20
00:01:24,480 --> 00:01:28,240
So now we get that ingredient node, here is the URL to it.

21
00:01:28,320 --> 00:01:32,510
You will need to append .json to really access it though,

22
00:01:32,610 --> 00:01:39,630
and now the goal is to initialize our ingredients here with the ingredients we just stored on firebase.

23
00:01:39,840 --> 00:01:42,070
So still in the burger builder component

24
00:01:42,210 --> 00:01:48,210
I want to set up the state dynamically and you learned that a good place for fetching data is componentDidMount

25
00:01:48,760 --> 00:01:51,340
So this is the method I want to use,

26
00:01:51,450 --> 00:01:58,990
So I'll add it here componentDidMount like this and there I now want to reach out with axios

27
00:01:59,010 --> 00:02:04,740
So I'm using axios with a get request and reach out to the URL I just copied with .json

28
00:02:04,740 --> 00:02:05,480
at the end.

29
00:02:05,910 --> 00:02:12,600
So this will now send a request to get our ingredients, I'll then add then block here to handle the

30
00:02:12,600 --> 00:02:18,210
response we get back and that response should of course contain our ingredients object.

31
00:02:18,210 --> 00:02:25,210
So now the goal is to set our state here ingredients to that object,

32
00:02:25,230 --> 00:02:31,130
so I'm actually going to set this to null initially here because we're now fetching it from the database

33
00:02:31,530 --> 00:02:40,680
and there I will now call this set state and set ingredients equal to response,

34
00:02:40,680 --> 00:02:45,860
and there there will be a data object which actually contains the data we fetched.

35
00:02:45,960 --> 00:02:53,970
Now if we save that and we go back to our application here you'll see we get an error, because now when

36
00:02:53,970 --> 00:03:00,420
we try to look for our ingredients at the start of the app that of course fails because initial ingredients

37
00:03:00,630 --> 00:03:07,110
now null, really fetching it at the start and that's a typical use case in applications. You fetch data

38
00:03:07,110 --> 00:03:08,220
when it loads

39
00:03:08,400 --> 00:03:13,490
so parts of the UI which depend on the data will therefore fail.

40
00:03:13,830 --> 00:03:21,000
Now this of course can easily be prevented by checking if we have ingredients before rendering anything which

41
00:03:21,000 --> 00:03:27,420
depends on ingredients, like the burger here. Now there are a couple of ways where we can handle this.

42
00:03:27,630 --> 00:03:29,940
I want to handle it here in my container,

43
00:03:29,970 --> 00:03:37,140
I want to show a spinner instead of the burger and instead of the build controls whilst I am waiting

44
00:03:37,140 --> 00:03:39,240
for the ingredients to load.

45
00:03:39,240 --> 00:03:49,220
So to do that I'll add another variable here which I'll name burger and this will be the burger and

46
00:03:49,220 --> 00:03:54,270
the build controls so I'll cut it from there and assign it to that variable.

47
00:03:54,320 --> 00:04:02,720
And now of course, this will fail due to us having adjacent elements here in jsx which is not liked

48
00:04:02,720 --> 00:04:03,350
by default

49
00:04:03,350 --> 00:04:11,060
as you learned but you can either return an array or use our aux helper component here essentially.

50
00:04:11,180 --> 00:04:13,250
So I'll wrap it with that,

51
00:04:13,250 --> 00:04:17,570
keep in mind that's not rendering anything to the screen so we're not destroying our layout.

52
00:04:17,870 --> 00:04:24,220
But Burger should of course actually only be that if we have the ingredients, so I'll actually overwrite

53
00:04:24,220 --> 00:04:31,500
the variable burger which I'll set prior to that burger where I will use the spinner and then I only want

54
00:04:31,500 --> 00:04:37,560
to overwrite it if this state ingredients is basically not null

55
00:04:37,620 --> 00:04:40,310
So that will only be the case if it was loaded.

56
00:04:40,350 --> 00:04:46,430
So move my code where I overwrite the burger variable inside of this if statement.

57
00:04:46,440 --> 00:04:49,750
So now by default the burger is just a spinner.

58
00:04:49,950 --> 00:04:56,460
And now I can output it here below the modal, I'll output burger with single curly braces

59
00:04:56,520 --> 00:05:02,280
however we'll also face another issue, the order summary will also use the ingredients and therefore

60
00:05:02,280 --> 00:05:03,050
fail.

61
00:05:03,090 --> 00:05:10,510
So here we should simply also add something and set order summary to null by default

62
00:05:10,890 --> 00:05:16,650
and then add the same check, well actually we already have that check of course where we overwrite that

63
00:05:16,710 --> 00:05:21,810
order summary variable with the order summary if ingredients are set,

64
00:05:21,810 --> 00:05:25,210
so let's add this after this burger code here maybe.

65
00:05:25,380 --> 00:05:30,380
So now we are overwriting the order summary in that same if statement we traded a second ago.

66
00:05:30,660 --> 00:05:34,460
Of course I also want to make sure that we overwrite this.

67
00:05:34,460 --> 00:05:41,880
again if loading was set. So after this if ststement where we check for ingredients, I'll add this old if

68
00:05:41,880 --> 00:05:47,040
statement where we check for the loading state to overwrite order summary when needed.

69
00:05:47,040 --> 00:05:52,080
So now when we save this and go back to the application, you saw that spinner for a fraction of a second

70
00:05:52,320 --> 00:05:53,220
and thereafter, you

71
00:05:53,340 --> 00:05:59,600
can get going and you can create that burger which you can see is still handled correctly,

72
00:05:59,640 --> 00:06:01,110
so this all works.

73
00:06:01,140 --> 00:06:06,810
The cool thing now is if we go to firebase and we update our ingredients so that for example we always

74
00:06:07,110 --> 00:06:08,720
start with meat.

75
00:06:09,000 --> 00:06:13,850
We can simply set meat to one here and confirm with enter and then go back to our burger

76
00:06:13,860 --> 00:06:17,920
and if we now reload it, you'll see we already start with one meat,

77
00:06:17,940 --> 00:06:19,550
so that's pretty cool.

78
00:06:19,560 --> 00:06:22,560
So now we're also fetching this from the backend

79
00:06:22,740 --> 00:06:28,770
and now we really improved our application and we have both a post and a get request.

80
00:06:28,800 --> 00:06:36,660
Now the good thing is we're showing the spinner but if we now are removing the json and off

81
00:06:36,660 --> 00:06:43,920
our URL where we're getting the ingredients, just as an example if we're removing that and we go back we don't

82
00:06:43,950 --> 00:06:46,590
get the error modal, that's not cool.

83
00:06:46,590 --> 00:06:51,140
Why are we not getting that? That can be hard to spot,

84
00:06:51,290 --> 00:06:57,350
the reason they actually can be found in our withErrorHandler function, we're setting up our

85
00:06:57,350 --> 00:06:58,030
interceptors

86
00:06:58,060 --> 00:07:06,020
in the componentDidMount hook and it worked great for the post request but think about that lifecycle

87
00:07:06,020 --> 00:07:07,350
diagram.

88
00:07:07,610 --> 00:07:14,570
There you see componentDidMount is actually called after all child components have been rendered which

89
00:07:14,570 --> 00:07:19,960
means ofter componentDidMount was completed in the child components.

90
00:07:19,970 --> 00:07:24,590
Now think about our withErrorHandler. Here,

91
00:07:24,590 --> 00:07:30,180
we're wrapping this wrapped component which is our burger builder container for example because there

92
00:07:30,260 --> 00:07:33,920
we are using withErrorHandler on the export.

93
00:07:34,130 --> 00:07:40,250
So we're essentially wrapping the burger builder and that of course has one implication, componentDidMount

94
00:07:40,250 --> 00:07:47,960
in the withErrorHandler will only be called once componentDidMount was called here and since

95
00:07:47,960 --> 00:07:54,800
we reach out to the web in componentDidMount of the wrap component, we never set up our interceptors.

96
00:07:54,830 --> 00:07:58,950
The fix is simple, we use componentWillMount,

97
00:07:59,090 --> 00:08:05,020
THIS will be called before the child components are rendered and we're not causing side effects here

98
00:08:05,120 --> 00:08:11,420
We're just registering the interceptors and we want to do that before the child components are rendered.

99
00:08:11,420 --> 00:08:18,530
Now with that, if we save this and we reload the application we get that error modal, but then we get

100
00:08:18,530 --> 00:08:23,360
another error that we fail to set our state.

101
00:08:23,420 --> 00:08:30,680
The reason for this is that the then block gets executed in our burger builder even though we have

102
00:08:30,680 --> 00:08:31,750
an error.

103
00:08:32,090 --> 00:08:38,630
Now the reason for that simply is that we're not having a catch method here in componentDidMount of

104
00:08:38,630 --> 00:08:39,850
the burger builder.

105
00:08:40,250 --> 00:08:47,570
If we catch an error there and simply don't do anything with it for example, then we will already not

106
00:08:47,570 --> 00:08:53,960
get this anymore because now we're not calling the then log anymore.

107
00:08:53,960 --> 00:08:58,480
We can still dismiss the network error and our application is now broken

108
00:08:58,520 --> 00:09:06,730
so we probably would want to handle that specific error case here for this specific page by for example

109
00:09:06,740 --> 00:09:08,890
also setting the UI here.

110
00:09:09,050 --> 00:09:13,740
So there we could also set some error state.

111
00:09:13,790 --> 00:09:22,830
So now in the burger builder which is null initially or false maybe and then inside here if we get

112
00:09:22,890 --> 00:09:29,410
an error if we catch this then we call set state and set error to

113
00:09:29,550 --> 00:09:30,490
True.

114
00:09:30,830 --> 00:09:35,880
Now with that we can go down to the render method and we want to output an error message for this case

115
00:09:35,880 --> 00:09:38,480
where our application becomes unusable,

116
00:09:38,490 --> 00:09:40,200
here we set burger to spinner.

117
00:09:40,200 --> 00:09:45,650
Now we actually don't want to show the spinner but our application is not usable at all,

118
00:09:45,750 --> 00:09:50,520
error message if we have the error equal to true.

119
00:09:50,700 --> 00:09:56,640
So we could check if this state error or if that is true and we actually want to show a paragraph where

120
00:09:56,640 --> 00:10:00,800
we say ingredients can't be loaded,

121
00:10:01,070 --> 00:10:03,140
this is our worst case scenario.

122
00:10:03,180 --> 00:10:07,360
Otherwise we're showing the spinner or we're overwriting it with ingredients if we got them.

123
00:10:07,410 --> 00:10:11,640
So now if we save this we get the spinner and then we see ingredients can be loaded.

124
00:10:11,640 --> 00:10:15,000
Now our application is broken but at least we show it to the user.

125
00:10:15,120 --> 00:10:20,840
Of course once we fix that link by adding .json at the end again

126
00:10:20,850 --> 00:10:23,760
now of course the ingredients will load,

127
00:10:23,970 --> 00:10:29,260
as you can see here we see the spinner for a fraction of a second, the ingredients are there and we can

128
00:10:29,260 --> 00:10:32,360
continue using our application just fine.

129
00:10:32,460 --> 00:10:34,320
So it is now all working.

130
00:10:34,320 --> 00:10:40,290
Now we get a really robust application where we are both storing orders and we're fetching content.

131
00:10:40,290 --> 00:10:46,930
Now of course we could also implement code to fetch the orders from our database from our backend here.

132
00:10:46,950 --> 00:10:53,430
So that is something we want to work on next routing being able to switch pages even though technically

133
00:10:53,700 --> 00:10:56,910
we only have one page in that single page application.

