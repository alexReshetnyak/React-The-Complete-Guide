1
00:00:02,150 --> 00:00:05,490
En la ltima conferencia creamos nuestra instancia de X-ists.

2
00:00:05,510 --> 00:00:08,790
Ahora es el momento de poder enviar las solicitudes all.

3
00:00:08,840 --> 00:00:11,220
Ahora descubramos dnde hacemos esto.

4
00:00:11,630 --> 00:00:20,390
Bueno, en nuestro contenedor de Bergere Boulder tenemos este mtodo donde manejamos la continuacin de la persecucin.

5
00:00:20,390 --> 00:00:22,990
En este momento estamos mostrando esto sigues alert.

6
00:00:23,040 --> 00:00:27,190
Ahora, por supuesto, no queremos mostrarte que contines en la aplicacin final.

7
00:00:27,200 --> 00:00:31,380
Es probable que deseemos navegar por el usuario para buscarlo.

8
00:00:31,490 --> 00:00:35,930
No hemos aprendido cmo cargar diferentes pginas en nuestra pgina individual.

9
00:00:35,960 --> 00:00:40,620
Y si las pginas de nuestras aplicaciones de una sola pgina parecen extraas, ver cmo funcionan pronto.

10
00:00:40,850 --> 00:00:45,160
Y tambin hemos aprendido cmo manejar un formulario de entrada cmo validar esto y as sucesivamente.

11
00:00:45,410 --> 00:00:47,920
Entonces, por ahora, habr un formulario de salida.

12
00:00:48,020 --> 00:00:54,110
Simplemente podemos tomar el orden tal como est y almacenarlo as con algunos datos ficticios anexados a l en la

13
00:00:54,110 --> 00:00:55,160
base de datos.

14
00:00:55,160 --> 00:01:02,510
Entonces, para hacer eso, comencemos esta lnea de alerta aqu y en lugar de mostrar aqu, quiero enviar mis datos a mi

15
00:01:02,660 --> 00:01:08,960
espalda y quiero hacer esta solicitud de HTP para que cualquier proyecto de ley de Bergere presentado, deberamos importar

16
00:01:08,990 --> 00:01:10,390
nuestra propia instancia de X-ists.

17
00:01:10,610 --> 00:01:17,600
As que voy a importar x aos a partir de ahora, tengo que ir hasta la carpeta raz y, a

18
00:01:17,600 --> 00:01:23,240
partir de los aos X, el archivo de rdenes js va a usar nuestra instancia x configurada.

19
00:01:23,630 --> 00:01:30,090
Ahora podemos usar eso en el manejador de continuacin de persecucin de papel para enviar la solicitud a nuestro propio paquete.

20
00:01:30,260 --> 00:01:37,310
Ahora, para almacenar datos, debemos usar una solicitud posterior y, por lo tanto, usamos el mtodo de publicacin en esa instancia.

21
00:01:37,310 --> 00:01:42,950
Ahora tu L es, por supuesto, ahora nuestra base, eres L ms lo que sea que agreguemos aqu.

22
00:01:43,160 --> 00:01:48,770
Y eso es lo bueno de los ojos de firebase establecidos que usa como Mongo D-B como estructura.

23
00:01:48,770 --> 00:01:50,540
En realidad, no tenemos tablas aqu.

24
00:01:50,630 --> 00:01:57,800
como una estructura anidada y si enva una solicitud a algo como esto, usted es quien ordena.

25
00:01:57,860 --> 00:01:59,640
Simplemente tenemos a Jason

26
00:01:59,690 --> 00:02:04,950
Va a crear nuestro nodo de pedidos y almacenar nuestros pedidos debajo de ese nodo.

27
00:02:05,180 --> 00:02:06,950
Y esto es exactamente lo que quiero hacer.

28
00:02:07,130 --> 00:02:14,960
Agregar rdenes de barra aqu y ahora para firebase, solo que hay una cosa especial que necesitas para agregar el punto

29
00:02:14,960 --> 00:02:15,710
Jason aqu.

30
00:02:15,710 --> 00:02:20,390
Este es el punto final al que solo debes apuntar para que Firebase funcione correctamente.

31
00:02:20,390 --> 00:02:25,940
Por supuesto, en su prximo proyecto probablemente tenga su propio back-end o use algn servicio promedio

32
00:02:25,940 --> 00:02:28,880
y debe elegir el punto final apropiado all.

33
00:02:28,940 --> 00:02:32,790
Para firebase es cualquier nombre de nodo de su eleccin datt.

34
00:02:32,810 --> 00:02:40,170
Jason: As que ese es el t o yo queremos enviar una solicitud para que yo agregue a mi base tu codo o

35
00:02:40,180 --> 00:02:42,960
la ruta que se adjunte a tu base.

36
00:02:43,100 --> 00:02:50,840
Ahora tambin tenemos que enviar algunos datos y esa informacin, por supuesto, debe ser nuestra orden para una configuracin de Bruegel determinada.

37
00:02:50,870 --> 00:02:54,020
Ahora la configuracin de la hamburguesa se almacena en el estado.

38
00:02:54,020 --> 00:02:56,590
Aqu tenemos los ingredientes que tenemos con el precio total.

39
00:02:56,660 --> 00:02:58,450
As que tenemos todo lo que necesitamos aqu.

40
00:02:58,610 --> 00:03:00,250
As que eso es sper simple.

41
00:03:00,260 --> 00:03:06,840
Podemos crear un nuevo objeto de orden, un objeto javascript que tiene ingredientes.

42
00:03:06,920 --> 00:03:13,390
Y aqu simplemente quiero usar estos ingredientes estatales y cules deberan tener un precio.

43
00:03:13,460 --> 00:03:21,160
Este precio total del precio estatal me disculpa y solo una pequea anotacin, por supuesto, para su produccin o la aplicacin,

44
00:03:21,160 --> 00:03:26,770
definitivamente debe calcular el precio final en el servidor porque probablemente tenga su producto almacenado

45
00:03:26,770 --> 00:03:32,470
en el servidor all para asegurarse de que el usuario no est t manipular el

46
00:03:32,470 --> 00:03:36,280
cdigo antes de enviarlo y manipula el precio que est utilizando.

47
00:03:36,340 --> 00:03:39,280
An aqu voy a usar ese precio nuevamente.

48
00:03:39,360 --> 00:03:43,000
Tenga en cuenta que esto, por supuesto, no es una configuracin que usara en una aplicacin real.

49
00:03:43,120 --> 00:03:47,050
All se volvera a calcular el precio en el servidor.

50
00:03:47,050 --> 00:03:52,780
Ahora, digamos que para un pedido tambin necesitamos informacin adicional que podamos obtener ahora mismo porque no

51
00:03:52,780 --> 00:03:58,570
tenemos un cheque para l pero que todava quiero llenar en el back-end con algunos datos ficticios.

52
00:03:58,810 --> 00:04:05,980
Entonces, tenemos algunos datos de clientes, tal vez el cliente podra ser un objeto de JavaScript, donde tenemos algo

53
00:04:05,980 --> 00:04:07,390
as como un nombre.

54
00:04:07,420 --> 00:04:10,940
Entonces tu amigo es Max Schwartz MILLER Ese es mi nombre.

55
00:04:10,940 --> 00:04:12,140
Elige tu nombre, por supuesto.

56
00:04:12,310 --> 00:04:18,950
Entonces podramos tener una direccin donde tenemos algo as como Street Detest Street.

57
00:04:18,970 --> 00:04:27,940
Podras adivinar que no estoy viviendo all y que el cdigo del sip pase por el teclado y quizs pases para m que sean

58
00:04:28,000 --> 00:04:31,990
Alemania y no dudes en agregar cualquier dato adicional aqu.

59
00:04:32,200 --> 00:04:38,260
Es posible que tengamos esa direccin de correo electrnico, as que probemos ese punto com probado aqu.

60
00:04:38,260 --> 00:04:45,070
Y a lo mejor agreguemos un campo numrico al lado del mtodo de entrega del cliente, que debera fomentarse para que tengamos

61
00:04:45,070 --> 00:04:49,750
la posibilidad de elegir entre una entrega rpida y la ms econmica o algo as.

62
00:04:49,750 --> 00:04:52,140
Entonces solo algunos datos de orden ficticio.

63
00:04:52,150 --> 00:04:54,140
Sintase libre de elegir cualquier informacin que desee.

64
00:04:54,190 --> 00:04:58,870
agregar una pgina de pago en la que podamos llenar esos con algunos en vivo mediante el uso de un formulario.

65
00:04:58,870 --> 00:04:59,470
Posteriormente vamos a

66
00:04:59,500 --> 00:05:07,450
Pero, por ahora, simplemente construyamos nuestro orden ficticio como este ahora es el orden que quiero almacenar en

67
00:05:07,450 --> 00:05:08,230
el back-end.

68
00:05:08,380 --> 00:05:15,040
Entonces, para el ao del pedido voy a pasar esto como un segundo argumento para la solicitud posterior.

69
00:05:15,040 --> 00:05:18,290
Entonces estos son los datos que se envan a dis Poth.

70
00:05:18,730 --> 00:05:24,010
Y ahora agreguemos Methot para ver nuestra respuesta.

71
00:05:24,100 --> 00:05:28,010
Y voy a bloquear la respuesta aqu por ahora.

72
00:05:28,390 --> 00:05:35,320
Y ese es todo el mtodo Ad the catch donde tambin quiero registrar el error por el momento.

73
00:05:35,350 --> 00:05:38,970
Vamos a actualizar ambos mtodos en un segundo.

74
00:05:39,370 --> 00:05:41,130
Entonces veamos si esto ahora funciona.

75
00:05:41,140 --> 00:05:43,370
Tenemos nuestra solicitud de publicacin en su lugar.

76
00:05:43,370 --> 00:05:45,170
Estamos enviando una orden ficticia.

77
00:05:45,220 --> 00:05:50,040
Configuramos la instancia de acceso y creamos el proyecto de firebase.

78
00:05:50,080 --> 00:05:54,420
Dirijmonos a nuestra aplicacin Bruegel y construyamos una hamburguesa aqu.

79
00:05:54,550 --> 00:05:57,470
Tal vez este hagamos clic en ordenar ahora.

80
00:05:57,700 --> 00:06:00,580
Y ahora subir y continuar las solicitudes deben enviarse.

81
00:06:00,580 --> 00:06:03,500
Continuamos y se ve bien.

82
00:06:03,550 --> 00:06:06,850
Devuelvo un estado de respuesta a 100.

83
00:06:07,210 --> 00:06:09,430
As que vamos a ver Firebase.

84
00:06:09,460 --> 00:06:15,700
Debera actualizar esta pgina automticamente y debera ver el nodo de pedidos en el que

85
00:06:15,730 --> 00:06:18,160
ahora ver este nombre crptico aqu.

86
00:06:18,160 --> 00:06:23,840
Ahora, para utilizar el mtodo de publicacin, firebase est creando y administrando automticamente una lista aqu.

87
00:06:24,190 --> 00:06:30,760
Y en cada lista, simplemente no obtuve un ID nico asignado y creado por Firebase automticamente.

88
00:06:31,000 --> 00:06:35,220
Si expandimos este objeto, vemos los datos del pedido.

89
00:06:35,230 --> 00:06:42,580
De hecho pasamos la direccin al mtodo de entrega de datos del cliente y los ingredientes de la hamburguesa y los

90
00:06:42,790 --> 00:06:44,710
ingredientes se vean bien para m.

91
00:06:44,710 --> 00:06:50,640
Tocino de ensalada de carne que se parece mucho a la hamburguesa que realmente construimos aqu.

92
00:06:50,920 --> 00:06:52,170
As que eso es genial.

93
00:06:52,180 --> 00:06:54,880
Tenemos nuestras hamburguesas guardadas en la parte posterior.

94
00:06:54,880 --> 00:06:56,780
Tenemos nuestros pedidos guardados aqu.

95
00:06:56,830 --> 00:07:00,500
Y lo bueno es, por supuesto, que esta informacin se queda aqu.

96
00:07:00,640 --> 00:07:06,700
cargar este archivo HDMI y, por lo tanto, por supuesto, perdemos el estado de la aplicacin porque el estado de javascript se ha ido.

97
00:07:06,700 --> 00:07:08,550
Si volvemos a cargar S, volvemos a

98
00:07:08,770 --> 00:07:11,470
Pero, por supuesto, nuestro estado en el servidor todava est all.

99
00:07:11,470 --> 00:07:14,950
As que ahora podramos obtener los pedidos y enviarlos al usuario.

100
00:07:15,130 --> 00:07:21,610
Y en una aplicacin real tambin podramos, como productor, descansar al propietario del negocio.

101
00:07:21,640 --> 00:07:26,540
Probablemente tambin manejemos los pedidos ahora y enviemos esa hamburguesa al cliente.

102
00:07:26,830 --> 00:07:28,500
Entonces esa es una solicitud POST.

103
00:07:28,600 --> 00:07:36,100
Antes de pasar al manejo de errores y a la deuda, asegurmonos de que tambin presentamos algo

104
00:07:36,100 --> 00:07:39,650
al usuario mientras la solicitud est en camino.

105
00:07:39,850 --> 00:07:44,090
Y luego asegurmonos de que tambin obtengamos algunos datos del back-end.

