1
00:00:02,150 --> 00:00:05,490
Nell'ultima lezione abbiamo creato la nostra istanza X-ists.

2
00:00:05,510 --> 00:00:08,790
Ora  il momento di essere in grado di inviare le richieste l.

3
00:00:08,840 --> 00:00:11,220
Ora scopriamo dove lo facciamo.

4
00:00:11,630 --> 00:00:20,390
Bene nel nostro contenitore di Bergere Boulder, abbiamo questo metodo in cui gestiamo la continuazione della caccia.

5
00:00:20,390 --> 00:00:22,990
In questo momento stiamo dimostrando che continui ad allertare.

6
00:00:23,040 --> 00:00:27,190
Ora ovviamente non vogliamo mostrarti di continuare nell'applicazione finale.

7
00:00:27,200 --> 00:00:31,380
Probabilmente vorremmo navigare tra l'utente e alcuni check-out per lui.

8
00:00:31,490 --> 00:00:35,930
Non abbiamo imparato come caricare pagine diverse nella nostra singola pagina.

9
00:00:35,960 --> 00:00:40,620
E s, le pagine nelle nostre app a singola pagina sembrano strane, vedrai come funzioner presto.

10
00:00:40,850 --> 00:00:45,160
E abbiamo anche imparato come gestire un modulo in input come convalidarlo e cos via.

11
00:00:45,410 --> 00:00:47,920
Quindi per ora ci sar un modulo di verifica.

12
00:00:48,020 --> 00:00:54,110
Possiamo semplicemente prendere l'ordine cos com' e memorizzarlo in questo modo con alcuni dati fittizi

13
00:00:54,110 --> 00:00:55,160
aggiunti nel database.

14
00:00:55,160 --> 00:01:02,510
Quindi, per fare questo, iniziamo qui questa linea di avviso e invece di visualizzare qui voglio inviare i miei dati alla

15
00:01:02,660 --> 00:01:08,960
mia schiena e voglio fare questa richiesta HTP in modo tale che ogni fattura Bergere debba essere importata

16
00:01:08,990 --> 00:01:10,390
dalla nostra istanza X-ists.

17
00:01:10,610 --> 00:01:17,600
Quindi ho intenzione di importare x anni da ora ho bisogno di andare fino alla cartella radice e

18
00:01:17,600 --> 00:01:23,240
l dagli ordini X anni il file js user la nostra istanza x 'configurata.

19
00:01:23,630 --> 00:01:30,090
Ora possiamo usare quello nel cacciatore di carte continue per inviare la richiesta al nostro pacchetto.

20
00:01:30,260 --> 00:01:37,310
Ora per la memorizzazione dei dati dovremmo usare una richiesta di post e quindi usiamo il metodo post su quell'istanza.

21
00:01:37,310 --> 00:01:42,950
Ora la tua L  ovviamente la nostra base, sei pi ci che stiamo aggiungendo qui.

22
00:01:43,160 --> 00:01:48,770
E questa  la cosa bella degli occhi di Firebase che usa come struttura simile a Mongo D-B.

23
00:01:48,770 --> 00:01:50,540
In realt non abbiamo tavoli qui.

24
00:01:50,630 --> 00:01:57,800
struttura annidata e se si invia una richiesta a qualcosa di simile, si tratta di ordini di barre.

25
00:01:57,860 --> 00:01:59,640
Abbiamo solo Jason come una

26
00:01:59,690 --> 00:02:04,950
Creer il nostro nodo ordini e memorizzeremo i nostri ordini sotto quel nodo.

27
00:02:05,180 --> 00:02:06,950
E questo  esattamente quello che voglio fare.

28
00:02:07,130 --> 00:02:14,960
Aggiunger ordini di slash qui e ora per Firebase solo c' una cosa speciale che devi aggiungere dot

29
00:02:14,960 --> 00:02:15,710
Jason qui.

30
00:02:15,710 --> 00:02:20,390
Questo  il punto finale che devi semplicemente indirizzare a Firebase per funzionare correttamente.

31
00:02:20,390 --> 00:02:25,940
Naturalmente nel tuo prossimo progetto probabilmente hai il tuo back-end o usi un servizio

32
00:02:25,940 --> 00:02:28,880
medio e devi scegliere l'endpoint appropriato l.

33
00:02:28,940 --> 00:02:32,790
Per firebase  un qualsiasi nome di nodo di tua scelta datt.

34
00:02:32,810 --> 00:02:40,170
Jason Quindi questo  il tu o io vogliamo inviare una richiesta a dl che viene aggiunta alla mia base il tuo gomito

35
00:02:40,180 --> 00:02:42,960
o il percorso che viene aggiunto alla nostra base.

36
00:02:43,100 --> 00:02:50,840
Ora abbiamo anche bisogno di inviare alcuni dati e naturalmente questi dati dovrebbero essere il nostro ordine per una data configurazione di Bruegel.

37
00:02:50,870 --> 00:02:54,020
Ora la configurazione dell'hamburger  memorizzata nello stato.

38
00:02:54,020 --> 00:02:56,590
Qui abbiamo gli ingredienti con il prezzo totale.

39
00:02:56,660 --> 00:02:58,450
Quindi otteniamo tutto ci di cui abbiamo bisogno qui.

40
00:02:58,610 --> 00:03:00,250
Quindi  super semplice.

41
00:03:00,260 --> 00:03:06,840
Possiamo creare un nuovo oggetto ordine un oggetto javascript con ingredienti.

42
00:03:06,920 --> 00:03:13,390
E qui voglio semplicemente utilizzare questi ingredienti di stato e che dovrebbero avere un prezzo.

43
00:03:13,460 --> 00:03:21,160
Questo prezzo totale del prezzo di stato mi scusa e solo una piccola nota a parte per la tua produzione

44
00:03:21,160 --> 00:03:26,770
o l'applicazione dovresti sicuramente calcolare il prezzo finale sul server perch probabilmente hai il tuo

45
00:03:26,770 --> 00:03:32,470
prodotto memorizzato sul server per assicurarti che l'utente non sia t manipolando il codice prima

46
00:03:32,470 --> 00:03:36,280
di inviarlo e manipola il prezzo che stai usando.

47
00:03:36,340 --> 00:03:39,280
Ancora qui user di nuovo quel prezzo.

48
00:03:39,360 --> 00:03:43,000
Ricorda che questo non  un set che useresti su una vera app.

49
00:03:43,120 --> 00:03:47,050
Ci si ricalcola il prezzo sul server.

50
00:03:47,050 --> 00:03:52,780
Ora diciamo che per un ordine abbiamo anche bisogno di alcune informazioni aggiuntive che possiamo recuperare in questo momento

51
00:03:52,780 --> 00:03:58,570
perch non abbiamo un check out per lui ma che voglio ancora riempire sul back-end con alcuni dati fittizi.

52
00:03:58,810 --> 00:04:05,980
Quindi, abbiamo alcuni dati sui clienti, forse il cliente potrebbe essere un oggetto javascript in cui abbiamo qualcosa

53
00:04:05,980 --> 00:04:07,390
come un nome.

54
00:04:07,420 --> 00:04:10,940
Quindi il tuo  Max Schwartz MILLER Questo  il mio nome.

55
00:04:10,940 --> 00:04:12,140
Scegli il tuo nome, naturalmente.

56
00:04:12,310 --> 00:04:18,950
Allora potremmo avere un indirizzo dove abbiamo qualcosa come Street Detest Street.

57
00:04:18,970 --> 00:04:27,940
Potresti immaginare che non ci sto vivendo e come il codice sip che scorre sulla tastiera e forse i paesi per me sono

58
00:04:28,000 --> 00:04:31,990
la Germania e sentiti libero di aggiungere altri dati qui.

59
00:04:32,200 --> 00:04:38,260
Potremmo avere quell'indirizzo e-mail, quindi testiamo il punto com provato qui.

60
00:04:38,260 --> 00:04:45,070
E magari aggiungiamo un campo numerico accanto al metodo di consegna del cliente che dovrebbe essere favorevole in modo tale

61
00:04:45,070 --> 00:04:49,750
da avere una scelta tra consegna veloce e pi economica o qualcosa del genere.

62
00:04:49,750 --> 00:04:52,140
Quindi solo alcuni dati di ordine fittizio.

63
00:04:52,150 --> 00:04:54,140
Sentiti libero di scegliere i dati che desideri.

64
00:04:54,190 --> 00:04:58,870
aggiungeremo una pagina di checkout in cui possiamo effettivamente riempire quelli con alcuni live utilizzando un modulo.

65
00:04:58,870 --> 00:04:59,470
In seguito

66
00:04:59,500 --> 00:05:07,450
Ma per ora costruiamo semplicemente il nostro ordine fittizio come questo ora  l'ordine che voglio memorizzare

67
00:05:07,450 --> 00:05:08,230
sul back-end.

68
00:05:08,380 --> 00:05:15,040
Quindi per l'anno di ordine passer questo come secondo argomento per la richiesta di post.

69
00:05:15,040 --> 00:05:18,290
Quindi questo  il dato che viene inviato a disPoth.

70
00:05:18,730 --> 00:05:24,010
E ora aggiungiamo Methot per vedere la nostra risposta.

71
00:05:24,100 --> 00:05:28,010
E sto per bloccare la risposta qui per ora.

72
00:05:28,390 --> 00:05:35,320
E questo  tutto l'annuncio il metodo di cattura in cui voglio anche registrare l'errore per ora.

73
00:05:35,350 --> 00:05:38,970
Aggiorneremo entrambi i metodi in un secondo.

74
00:05:39,370 --> 00:05:41,130
Quindi vediamo se ora funziona.

75
00:05:41,140 --> 00:05:43,370
Abbiamo ricevuto la nostra richiesta di posta.

76
00:05:43,370 --> 00:05:45,170
Stiamo inviando un ordine fittizio.

77
00:05:45,220 --> 00:05:50,040
Abbiamo impostato l'istanza di accesso e abbiamo creato il progetto Firebase.

78
00:05:50,080 --> 00:05:54,420
Andiamo alla nostra applicazione Bruegel e costruiamo un hamburger qui.

79
00:05:54,550 --> 00:05:57,470
Forse questo facciamo clic su ordine ora.

80
00:05:57,700 --> 00:06:00,580
E ora su e continua le richieste dovrebbero essere inviate.

81
00:06:00,580 --> 00:06:03,500
Quindi continuiamo e va bene.

82
00:06:03,550 --> 00:06:06,850
Sto tornando uno stato di risposta a 100.

83
00:06:07,210 --> 00:06:09,430
Diamo un'occhiata a Firebase.

84
00:06:09,460 --> 00:06:15,700
Dovrebbe aggiornare automaticamente questa pagina e dovresti vedere il nodo ordini in cui ora

85
00:06:15,730 --> 00:06:18,160
vedi questo nome criptico qui.

86
00:06:18,160 --> 00:06:23,840
Ora per utilizzare il metodo post firebase crea e gestisce automaticamente un elenco qui.

87
00:06:24,190 --> 00:06:30,760
E ad ogni elenco non ho semplicemente ottenuto un ID univoco assegnato e creato automaticamente da Firebase.

88
00:06:31,000 --> 00:06:35,220
Se espandiamo questo oggetto vediamo i dati dell'ordine.

89
00:06:35,230 --> 00:06:42,580
In realt abbiamo passato con l'indirizzo al metodo di consegna dei dati del cliente e gli ingredienti del burger e

90
00:06:42,790 --> 00:06:44,710
gli ingredienti mi sembravano buoni.

91
00:06:44,710 --> 00:06:50,640
Pancetta di carne che assomiglia molto all'hamburger che abbiamo effettivamente costruito qui.

92
00:06:50,920 --> 00:06:52,170
Quindi  grandioso.

93
00:06:52,180 --> 00:06:54,880
Abbiamo preso i nostri hamburger salvati sul retro.

94
00:06:54,880 --> 00:06:56,780
Abbiamo ottenuto i nostri ordini salvati qui.

95
00:06:56,830 --> 00:07:00,500
E la cosa interessante  che questi dati stanno qui.

96
00:07:00,640 --> 00:07:06,700
file HDMI e quindi, naturalmente, perdiamo lo stato dell'applicazione perch lo stato di javascript  scomparso.

97
00:07:06,700 --> 00:07:08,550
Se ricarichiamo S, ricarichiamo questo

98
00:07:08,770 --> 00:07:11,470
Ma ovviamente il nostro stato sul server  ancora l.

99
00:07:11,470 --> 00:07:14,950
Quindi ora potremmo recuperare gli ordini e inviarli all'utente.

100
00:07:15,130 --> 00:07:21,610
E in una vera applicazione vorremmo anche come produttore riposare l'imprenditore.

101
00:07:21,640 --> 00:07:26,540
Probabilmente verificheremo anche gli ordini adesso e manderemo quell'hamburger al cliente.

102
00:07:26,830 --> 00:07:28,500
Quindi questa  una richiesta POST.

103
00:07:28,600 --> 00:07:36,100
Prima di passare alla gestione degli errori e al debito, assicuriamoci di presentare anche qualcosa

104
00:07:36,100 --> 00:07:39,650
all'utente mentre la richiesta  in arrivo.

105
00:07:39,850 --> 00:07:44,090
E poi assicuriamoci di ottenere anche alcuni dati dal back-end.

