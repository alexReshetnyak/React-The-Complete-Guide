1
00:00:02,130 --> 00:00:07,580
In the last lecture, we made sure that we show a spinner a loader to the user once the request is on

2
00:00:07,580 --> 00:00:08,320
its way.

3
00:00:08,510 --> 00:00:14,870
That's of course a good thing to do, it improves our user experience because user clearly sees that something

4
00:00:14,870 --> 00:00:15,820
is happening,

5
00:00:15,830 --> 00:00:22,500
it's also an improvement to the user experience if we show error messages in case something fails.

6
00:00:22,520 --> 00:00:27,810
And here again there are different places where you could show such an error message,

7
00:00:27,860 --> 00:00:36,020
I simply want to set up some global error handler which shows a modal with the error message but doesn't

8
00:00:36,020 --> 00:00:43,910
use the modal here because I don't want to be stuck to this container, to the burger builder container.

9
00:00:44,130 --> 00:00:49,550
I want to have a flexible way of showing an error no matter which component and which container

10
00:00:49,640 --> 00:00:50,770
it occurs.

11
00:00:51,020 --> 00:00:59,120
So therefore my modal is going to get added to a higher level in the application and I want to have

12
00:00:59,370 --> 00:01:07,910
a higher level of the application, so some higher component then this burger builder container where I catch

13
00:01:08,000 --> 00:01:13,610
errors and where I then make sure that my error modal is displayed.

14
00:01:13,610 --> 00:01:17,390
Now where can we set this up?

15
00:01:17,390 --> 00:01:19,970
How can we control this?

16
00:01:19,970 --> 00:01:27,440
I simply want to create a higher order component with which I can wrap the burger builder or which I'll

17
00:01:27,440 --> 00:01:34,250
actually use in that second way I showed you for using higher order components, so that we can simply

18
00:01:34,250 --> 00:01:40,850
wrap any component which should have this error modal with it and can conveniently add the error

19
00:01:40,850 --> 00:01:43,490
handling functionality to it.

20
00:01:43,490 --> 00:01:50,480
So for this, I'm going to create a new higher order component in a folder which I'll name withError

21
00:01:50,510 --> 00:01:51,610
Handler.

22
00:01:51,830 --> 00:02:00,380
I'm using this syntax withErrorHandler because I want to use this second way of creating a high order

23
00:02:00,380 --> 00:02:06,020
component which will be used here on the export and not used as

24
00:02:06,070 --> 00:02:07,090
jsx code.

25
00:02:07,400 --> 00:02:16,310
So if they are all added with errorHandler.js file and this file here now will take the following

26
00:02:16,310 --> 00:02:17,380
form,

27
00:02:17,480 --> 00:02:20,810
it will be a function with error handler

28
00:02:20,960 --> 00:02:28,490
and this should be a function which takes the wrapped component as an input and which then returns a

29
00:02:28,530 --> 00:02:31,370
function which receives props

30
00:02:31,580 --> 00:02:37,310
and of course simply returns these, some jsx including the wrapped component.

31
00:02:37,460 --> 00:02:42,400
So for that we need to import React from react

32
00:02:42,590 --> 00:02:49,100
and now here I of course want to return the wrapped component and distribute any props this component

33
00:02:49,100 --> 00:02:54,360
might receive on it because I don't know these props but I definitely don't want to lose them.

34
00:02:54,370 --> 00:02:59,790
I then want to export this withErrorHandler function as the default

35
00:02:59,990 --> 00:03:03,670
but now I also want to use my or add my error modal.

36
00:03:03,670 --> 00:03:05,990
So for that I need to import two things,

37
00:03:05,990 --> 00:03:16,170
the modal component of course from the components UI modal folder and there is modal.js file

38
00:03:16,440 --> 00:03:24,880
and since I want to place it next to it I need to Aux component from the aux folder in the HOC folder.

39
00:03:24,990 --> 00:03:33,100
So now I can wrap that all with aux like this and add the modal next to it,

40
00:03:33,180 --> 00:03:37,680
don't use a self-closing tag here because in the modal of course I want to output something.

41
00:03:37,680 --> 00:03:44,220
For now I'll just say something didn't work, just like that

42
00:03:44,360 --> 00:03:47,630
Now we can finetune this but this is what I want to show right now,

43
00:03:47,630 --> 00:03:54,520
now let's see if this works. If we save this, we now have our higher order component,

44
00:03:54,710 --> 00:03:57,100
let's now use this on the burger builder.

45
00:03:57,140 --> 00:03:58,430
There I will

46
00:03:58,460 --> 00:04:04,430
import it at the top so withErrorHandler starting with a lowercase character because we're not going to

47
00:04:04,430 --> 00:04:13,750
use it in jsx and now I'll navigate to my HOC folder and there to the withErrorHandler folder and the withErrorHandler.js

48
00:04:13,750 --> 00:04:20,710
file of course, and then take that withErrorHandler function we're importing and

49
00:04:20,710 --> 00:04:24,820
wrap the burger builder with it like this.

50
00:04:24,820 --> 00:04:31,480
Now with this if we go back to the withErrorHandler function, set show like this so to true simply

51
00:04:31,510 --> 00:04:36,440
on the modal, if we save this and go back we should always see something didn't work.

52
00:04:36,580 --> 00:04:40,120
Now obviously we only want to show this if we got an error

53
00:04:40,120 --> 00:04:47,910
so we need to set show to something else and that something else needs to come from the wrapped component

54
00:04:47,920 --> 00:04:49,840
we need that information.

55
00:04:49,990 --> 00:04:56,890
If it did fail to get that information, we should add a second argument to our higher order function

56
00:04:56,890 --> 00:04:57,490
here,

57
00:04:57,720 --> 00:05:05,670
The axios instance which was used so that we can set up an error handler, a global error handler on it.

58
00:05:05,830 --> 00:05:13,960
Now to use that instance here, I will change this functional component into a class based one,

59
00:05:14,200 --> 00:05:21,730
so here I will return class which should now extend the component object from react so I need to import

60
00:05:21,730 --> 00:05:26,830
that class extends component as you can see it's an anonymous class.

61
00:05:26,830 --> 00:05:30,280
I don't set up a name here because I never use that class,

62
00:05:30,280 --> 00:05:31,350
I return it here,

63
00:05:31,360 --> 00:05:37,090
it's a class factory essentially, withErrorHandler creates these classes.

64
00:05:37,460 --> 00:05:44,080
Now in there, we clearly need a render method where we in the end return what we return in our functional

65
00:05:44,080 --> 00:05:45,200
component here,

66
00:05:45,310 --> 00:05:52,480
so simply return that. Of course props is now this.props since we changed it to a class,

67
00:05:52,600 --> 00:05:54,040
we can get rid of that part

68
00:05:54,040 --> 00:06:03,940
down there now. And now with this, we can add componentDidMount here and in componentDidMount, we can

69
00:06:03,940 --> 00:06:14,170
now set up our axios listeners. So on the axios instance here we can now set up our global interceptor

70
00:06:14,260 --> 00:06:20,450
which also allows us to handle errors, so I'll add interceptors here

71
00:06:21,300 --> 00:06:28,000
then response and then with use at a function I want to use.

72
00:06:28,230 --> 00:06:33,330
So this function here will get the response and then do something with it but I'm not really interested

73
00:06:33,330 --> 00:06:36,150
in that first argument so I'll pass null here.

74
00:06:36,150 --> 00:06:38,330
The second argument is the one I'm interested in,

75
00:06:38,430 --> 00:06:42,120
that's the error case where I get an error. Here

76
00:06:42,150 --> 00:06:44,680
I then want to show my error modal,

77
00:06:44,760 --> 00:06:45,800
So for that, I'll

78
00:06:45,810 --> 00:06:55,260
now add a state where I will simply set error to null initially, and in here I will then set or call

79
00:06:55,290 --> 00:06:58,660
this set state and set error

80
00:06:58,780 --> 00:07:06,060
to the error I'm getting here back from firebase and this happens to be an object which also contains

81
00:07:06,060 --> 00:07:08,860
an error message on the message property.

82
00:07:08,880 --> 00:07:14,100
You can simply console log that error to see how this object looks like.

83
00:07:14,190 --> 00:07:16,350
So now I'm setting that error here.

84
00:07:16,410 --> 00:07:17,230
Once we

85
00:07:17,260 --> 00:07:19,980
well got one. Now what I'll

86
00:07:20,010 --> 00:07:26,010
also do is I'll add  a new interceptor for a request,

87
00:07:26,280 --> 00:07:32,720
so there, I'll call use and I'm not really interested in the request but there's one thing I want to do in there.

88
00:07:32,790 --> 00:07:40,320
I want to call this set state and clear any errors so that whenever I send the request I don't have

89
00:07:40,320 --> 00:07:44,850
my error set up anymore so that I definitely clear it here.

90
00:07:45,180 --> 00:07:53,700
So now on the modal I will only show it if this state error is not null essentially

91
00:07:54,060 --> 00:08:01,830
and that in there I can output this state error and then again there will be a message property on the

92
00:08:01,920 --> 00:08:08,260
error object returned by firebase. There is just one more thing we have to do,

93
00:08:08,450 --> 00:08:15,790
the modal component we created also exposes the click property which occurs when we click the backdrop,

94
00:08:15,950 --> 00:08:20,980
and in this case, of course, I also want to clear the error because then we click the modal,

95
00:08:20,990 --> 00:08:22,600
I don't want to show it any more,

96
00:08:22,610 --> 00:08:29,620
I have to get rid of the error. So also add clicked here and there I will call a method

97
00:08:29,630 --> 00:08:39,060
I have to create in my withErrorHandler component, I'll name it errorConfirmedHandler.

98
00:08:39,500 --> 00:08:46,500
This simply is a method where I will call this set state and set error to null too

99
00:08:46,970 --> 00:08:51,800
and I will assign it here, this errorConfirmedHandler

100
00:08:51,800 --> 00:08:56,450
Now with this set up here, there's one more thing I want to do,

101
00:08:56,480 --> 00:09:03,740
this.state.error.message which I'm outputting here will throw an error initially because the modal component

102
00:09:03,740 --> 00:09:07,730
is always present even if we don't show it there.

103
00:09:08,030 --> 00:09:15,350
So what I'll do is I'll simply add a ternary expression where I'll say this.state.error ?

104
00:09:15,410 --> 00:09:16,850
only if this is not null,

105
00:09:16,850 --> 00:09:21,130
then I'll output that, otherwise I'll output null so I'll put nothing.

106
00:09:21,140 --> 00:09:27,710
Now with that, if I save this and go back to the application, we'll get cannot read property interceptors

107
00:09:27,950 --> 00:09:30,930
which makes sense because we try to run this on

108
00:09:30,930 --> 00:09:35,800
axios but we don't receive axios, we expect to get it as an argument.

109
00:09:35,870 --> 00:09:41,150
But in the burger builder where I use withErrorHandler, I'm only passing the burger builder component,

110
00:09:41,420 --> 00:09:42,960
the wrapped component.

111
00:09:42,980 --> 00:09:50,070
So here I simply have to pass axios which we are importing here and which is our axios instance.

112
00:09:50,110 --> 00:09:55,790
Now with that, there's one more thing we have to do. In our interceptors, we of course have to return something,

113
00:09:56,030 --> 00:09:57,170
when sending the request,

114
00:09:57,170 --> 00:10:00,860
We have to return the request config so that the request can continue.

115
00:10:01,010 --> 00:10:06,830
and for the response, I also want to implement the response handler here where I simply returned a response,

116
00:10:06,950 --> 00:10:09,490
this is the shortest possible syntax for doing that.

117
00:10:09,500 --> 00:10:14,690
Now with that if we save all of that and we go back to the application and we add a burger,

118
00:10:14,900 --> 00:10:16,480
this should still work,

119
00:10:16,580 --> 00:10:17,100
it does,

120
00:10:17,120 --> 00:10:19,010
we can still save a burger.

121
00:10:19,190 --> 00:10:24,140
Now let's mess something up and let's see if that also works in the burger builder container where we

122
00:10:24,140 --> 00:10:25,480
sent the request,

123
00:10:25,700 --> 00:10:32,390
if we now change that URL and maybe remove the .json which I said is a valid or an important

124
00:10:32,390 --> 00:10:38,490
part of the API endpoint of forward to firebase database we're sending the request to here.

125
00:10:38,660 --> 00:10:40,530
So if we remove that, it should fail.

126
00:10:40,610 --> 00:10:46,910
So now if we try to store a burger, we indeed get a network error message here.

127
00:10:47,210 --> 00:10:50,440
Now closing by clicking on the backdrop doesn't work though so

128
00:10:50,450 --> 00:10:53,400
let's quickly check why this is the case.

129
00:10:53,420 --> 00:10:55,350
Let me quickly have a look.

130
00:10:55,370 --> 00:11:01,580
I'm using the wrong prop, in the modal of course, clicked is for the backdrop that prop the backdrop

131
00:11:01,580 --> 00:11:05,920
exposes, the modal then uses modal closed. This is the method

132
00:11:05,930 --> 00:11:07,470
we tried to execute here.

133
00:11:07,520 --> 00:11:09,600
So this is the property we should implement.

134
00:11:09,710 --> 00:11:12,360
So modal closed is the correct prop

135
00:11:12,590 --> 00:11:17,480
Now with that again if we try to send this with the wrong URL, we get the error

136
00:11:17,660 --> 00:11:19,700
but we can dismiss it.

137
00:11:19,700 --> 00:11:25,380
So now we got global error handling in place and I'm going to fix that orders URL again,

138
00:11:25,610 --> 00:11:30,580
so now we're handling both the success case and the error case, we're showing a loader as long as needed

139
00:11:30,650 --> 00:11:37,400
and with that we gather robust application with a reusable higher order component which we can wrap around

140
00:11:37,490 --> 00:11:41,140
any component which uses axios to handle its errors.

