1
00:00:02,150 --> 00:00:05,490
Na ltima conferncia, criamos nossa instncia X-ists.

2
00:00:05,510 --> 00:00:08,790
Agora  hora de poder enviar os pedidos l.

3
00:00:08,840 --> 00:00:11,220
Agora vamos descobrir onde fazemos isso.

4
00:00:11,630 --> 00:00:20,390
Bem, no nosso contentor Bergere Boulder, temos esse mtodo onde lidamos com a continuao da perseguio.

5
00:00:20,390 --> 00:00:22,990
Agora, estamos mostrando isso que voc continua alerta.

6
00:00:23,040 --> 00:00:27,190
Agora,  claro, no queremos mostrar-lhe continuar na aplicao final.

7
00:00:27,200 --> 00:00:31,380
Ns provavelmente queremos navegar o usurio para algum check-out para ele.

8
00:00:31,490 --> 00:00:35,930
No aprendemos a carregar pginas diferentes em nossa nica pgina.

9
00:00:35,960 --> 00:00:40,620
E sim pginas em nossos aplicativos de pgina nica parecem estranhas, voc ver como isso funciona em breve.

10
00:00:40,850 --> 00:00:45,160
E tambm aprendemos como lidar com uma entrada de formulrio para validar isso e assim por diante.

11
00:00:45,410 --> 00:00:47,920
Ento, por enquanto, haver um formulrio de check-out.

12
00:00:48,020 --> 00:00:54,110
Podemos simplesmente tomar a ordem como est e armazen-la assim com alguns dados falsos anexados a ela no

13
00:00:54,110 --> 00:00:55,160
banco de dados.

14
00:00:55,160 --> 00:01:02,510
Ento, para fazer isso, vamos cometer esta linha de alerta aqui e, em vez de exibir aqui, eu quero enviar meus dados s

15
00:01:02,660 --> 00:01:08,960
minhas costas e eu quero fazer essa solicitao de HTP para que qualquer nota de Bergere arquivada devamos importar nossa

16
00:01:08,990 --> 00:01:10,390
prpria instncia de X-ists.

17
00:01:10,610 --> 00:01:17,600
Ento, eu vou importar x anos a partir de agora eu preciso ir todo o caminho at a pasta

18
00:01:17,600 --> 00:01:23,240
raiz e l a partir do Xs ordens js arquivo vai usar nossa x 'instncia configurada.

19
00:01:23,630 --> 00:01:30,090
Agora, podemos usar isso no acompanhamento de perseguio do papel para enviar o pedido para o nosso prprio pacote.

20
00:01:30,260 --> 00:01:37,310
Agora, para armazenar dados, devemos usar uma solicitao de publicao e, portanto, usamos o mtodo de publicao nessa instncia.

21
00:01:37,310 --> 00:01:42,950
Agora, o L , claro, agora, nossa base, voc  L mais tudo o que estamos adicionando aqui.

22
00:01:43,160 --> 00:01:48,770
E essa  a coisa legal sobre os olhos de firebase definir que ele usa como Mongo D-B como estrutura.

23
00:01:48,770 --> 00:01:50,540
Na verdade, no temos tabelas aqui.

24
00:01:50,630 --> 00:01:57,800
uma estrutura aninhada e, se voc enviar um pedido para algo assim, voc  um pedido de barras.

25
00:01:57,860 --> 00:01:59,640
Ns apenas temos Jason como

26
00:01:59,690 --> 00:02:04,950
Ele vai criar nosso n de pedidos e armazenar nossas ordens abaixo desse n.

27
00:02:05,180 --> 00:02:06,950
E isso  exatamente o que eu quero fazer.

28
00:02:07,130 --> 00:02:14,960
Eu vou adicionar pedidos de barras aqui e agora para a base de fire somente h uma coisa especial que voc precisa para adicionar Jason

29
00:02:14,960 --> 00:02:15,710
ponto aqui.

30
00:02:15,710 --> 00:02:20,390
Este  o ponto final que voc s precisa segmentar para que a base de firebows funcione corretamente.

31
00:02:20,390 --> 00:02:25,940
Claro que em seu prximo projeto, voc provavelmente ter seu prprio back-end ou voc usar algum servio

32
00:02:25,940 --> 00:02:28,880
mdio e voc precisar escolher o ponto final apropriado.

33
00:02:28,940 --> 00:02:32,790
Para a base de fogo,  um nome de n de sua escolha.

34
00:02:32,810 --> 00:02:40,170
Jason Ento,  voc ou eu queremos enviar um pedido para d l, que  anexado  minha base o seu cotovelo ou

35
00:02:40,180 --> 00:02:42,960
o caminho que  anexado  nossa base.

36
00:02:43,100 --> 00:02:50,840
Agora tambm precisamos enviar alguns dados e esses dados,  claro, deveriam ser nosso pedido para uma determinada configurao do Bruegel.

37
00:02:50,870 --> 00:02:54,020
Agora, a configurao da hambrguer  armazenada no estado.

38
00:02:54,020 --> 00:02:56,590
Aqui temos os ingredientes com o preo total.

39
00:02:56,660 --> 00:02:58,450
Ento ns conseguimos tudo o que precisamos aqui.

40
00:02:58,610 --> 00:03:00,250
Ento, isso  super simples.

41
00:03:00,260 --> 00:03:06,840
Podemos criar um novo objeto de ordem como um objeto javascript que possui ingredientes.

42
00:03:06,920 --> 00:03:13,390
E aqui eu simplesmente quero usar esses ingredientes do estado e quais devem ter um preo.

43
00:03:13,460 --> 00:03:21,160
Este preo total do preo do estado me desculpa e apenas uma pequena nota lateral, claro, para a sua produo ou

44
00:03:21,160 --> 00:03:26,770
o aplicativo, voc definitivamente deve calcular esse preo final no servidor, porque provavelmente voc tem

45
00:03:26,770 --> 00:03:32,470
seu produto armazenado no servidor para garantir que o usurio no esteja. t manipulao do cdigo

46
00:03:32,470 --> 00:03:36,280
antes de envi-lo e manipula o preo que voc est usando.

47
00:03:36,340 --> 00:03:39,280
Ainda aqui vou usar esse preo novamente.

48
00:03:39,360 --> 00:03:43,000
Esteja ciente de que, claro, no  uma configurao que voc usaria em um aplicativo real.

49
00:03:43,120 --> 00:03:47,050
L voc recalcula o preo no servidor.

50
00:03:47,050 --> 00:03:52,780
Agora, digamos, para uma ordem, tambm precisamos de algumas informaes adicionais que podemos buscar agora, porque

51
00:03:52,780 --> 00:03:58,570
no temos check-out para ele, mas que ainda quero preencher o back-end com alguns dados falsos.

52
00:03:58,810 --> 00:04:05,980
Ento, ns temos alguns dados de clientes, talvez o cliente possa ser um objeto javascript onde temos algo

53
00:04:05,980 --> 00:04:07,390
como um nome.

54
00:04:07,420 --> 00:04:10,940
Ento, o que voc faz  Max Schwartz MILLER Esse  o meu nome.

55
00:04:10,940 --> 00:04:12,140
Escolha o seu nome, claro.

56
00:04:12,310 --> 00:04:18,950
Ento, podemos ter um endereo onde temos algo como street detest street.

57
00:04:18,970 --> 00:04:27,940
Voc pode adivinhar que no estou morando l e gosto de tirar o cdigo do mouse sobre o teclado e talvez pases para mim que

58
00:04:28,000 --> 00:04:31,990
seja a Alemanha e sinta-se livre para adicionar dados adicionais aqui.

59
00:04:32,200 --> 00:04:38,260
Podemos ter esse endereo de e-mail, ento vamos testar esse ponto de ponto testado aqui.

60
00:04:38,260 --> 00:04:45,070
E possamos adicionar um campo de nmero ao lado do mtodo de entrega do cliente, que deve ser promovido

61
00:04:45,070 --> 00:04:49,750
para que possamos escolher entre entrega rpida e mais barata ou algo assim.

62
00:04:49,750 --> 00:04:52,140
Ento, apenas alguns dados de ordem falsa.

63
00:04:52,150 --> 00:04:54,140
Sinta-se  vontade para escolher os dados desejados.

64
00:04:54,190 --> 00:04:58,870
adicionar uma pgina de pagamento onde realmente podemos preencher aqueles com algum live usando um formulrio.

65
00:04:58,870 --> 00:04:59,470
Posteriormente, iremos

66
00:04:59,500 --> 00:05:07,450
Mas, por enquanto, simplesmente construamos nossa ordem falsa como essa, agora  a ordem que eu quero armazenar

67
00:05:07,450 --> 00:05:08,230
no back-end.

68
00:05:08,380 --> 00:05:15,040
Ento, para o ano da ordem, eu vou passar isso como um segundo argumento para o pedido de publicao.

69
00:05:15,040 --> 00:05:18,290
Ento, este  o dado que  enviado para este.

70
00:05:18,730 --> 00:05:24,010
E agora vamos adicionar ento o Methot para ver nossa resposta.

71
00:05:24,100 --> 00:05:28,010
E eu vou trancar a resposta aqui por enquanto.

72
00:05:28,390 --> 00:05:35,320
E esse  todo o anncio do mtodo catch onde eu tambm quero registrar o erro por enquanto.

73
00:05:35,350 --> 00:05:38,970
Vamos atualizar os dois mtodos em um segundo.

74
00:05:39,370 --> 00:05:41,130
Ento, vamos ver se isso funciona agora.

75
00:05:41,140 --> 00:05:43,370
Recebemos nosso pedido de publicao no lugar.

76
00:05:43,370 --> 00:05:45,170
Estamos enviando uma ordem falsa.

77
00:05:45,220 --> 00:05:50,040
Ns configuramos a instncia de acesso e criamos o projeto firebase.

78
00:05:50,080 --> 00:05:54,420
Vamos dirigir nossa aplicao Bruegel e vamos construir um hambrguer aqui.

79
00:05:54,550 --> 00:05:57,470
Talvez este deixe-nos clicar em ordem agora.

80
00:05:57,700 --> 00:06:00,580
E agora, e continue, os pedidos devem ser enviados.

81
00:06:00,580 --> 00:06:03,500
Ento vamos continuar e isso est bem.

82
00:06:03,550 --> 00:06:06,850
Estou recebendo um status de resposta para 100.

83
00:06:07,210 --> 00:06:09,430
Ento, vamos verificar a base de fogo.

84
00:06:09,460 --> 00:06:15,700
Ele deve atualizar esta pgina automaticamente e voc deve ver o n de pedidos no qual voc

85
00:06:15,730 --> 00:06:18,160
agora v este nome crptico aqui.

86
00:06:18,160 --> 00:06:23,840
Agora, para usar a base de dados do mtodo de postagem, est criando e gerenciando automaticamente uma lista aqui.

87
00:06:24,190 --> 00:06:30,760
E cada lista que eu no simplesmente obtive uma identidade exclusiva foi atribuda e criada pela firebase automaticamente.

88
00:06:31,000 --> 00:06:35,220
Se expandimos este objeto, vemos os dados da ordem.

89
00:06:35,230 --> 00:06:42,580
Ns realmente passamos com o endereo para o mtodo de entrega de dados do cliente e os ingredientes do hambrguer e

90
00:06:42,790 --> 00:06:44,710
os ingredientes me pareciam bons.

91
00:06:44,710 --> 00:06:50,640
Bacon de salada de carne que se parece muito com o hambrguer que realmente construmos aqui.

92
00:06:50,920 --> 00:06:52,170
Ento isso  muito bom.

93
00:06:52,180 --> 00:06:54,880
Ns conseguimos nossos hambrgueres salvos nas costas.

94
00:06:54,880 --> 00:06:56,780
Ns obtivemos nossas ordens salvo aqui.

95
00:06:56,830 --> 00:07:00,500
E, claro,  claro que esses dados esto aqui.

96
00:07:00,640 --> 00:07:06,700
arquivo HDMI e, portanto, perdemos o estado do aplicativo porque o estado javascript desapareceu.

97
00:07:06,700 --> 00:07:08,550
Se recarregarmos, recarregamos este

98
00:07:08,770 --> 00:07:11,470
Mas  claro que nosso estado no servidor ainda est l.

99
00:07:11,470 --> 00:07:14,950
Ento, agora, poderamos buscar os pedidos e envi-los para o usurio.

100
00:07:15,130 --> 00:07:21,610
E em uma aplicao real, ns tambm, como produtor, descansaremos o proprietrio da empresa.

101
00:07:21,640 --> 00:07:26,540
Ns provavelmente tambm lidaremos com as encomendas agora e enviaremos esse hambrguer ao cliente.

102
00:07:26,830 --> 00:07:28,500
Ento, esse  um pedido POST.

103
00:07:28,600 --> 00:07:36,100
Antes de entrar no tratamento de erros e questes de dvidas, certifique-se de que tambm apresentamos algo

104
00:07:36,100 --> 00:07:39,650
ao usurio enquanto o pedido est a caminho.

105
00:07:39,850 --> 00:07:44,090
E ento, asseguremos que tambm possamos obter alguns dados do back-end.

