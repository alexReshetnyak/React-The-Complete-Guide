1
00:00:02,180 --> 00:00:07,040
Ahora, en esta marcha, obviamente tenamos mucha lgica en nuestra hamburguesa Boulder nuevamente.

2
00:00:07,130 --> 00:00:14,510
Hay una mejora o solucin que debemos aplicar, aunque puede ser sutil detectar, pero realmente

3
00:00:14,510 --> 00:00:15,780
mejora nuestra aplicacin.

4
00:00:16,100 --> 00:00:21,030
Echemos un vistazo a esto con el componente de orden superior de controlador de aire all.

5
00:00:21,110 --> 00:00:27,110
Obviamente, agregamos que nuestros interceptores en el componente se montarn y, por supuesto, tiene sentido tenerlos all

6
00:00:27,110 --> 00:00:34,160
porque queramos asegurarnos de que pudiramos restablecer los errores y, por lo tanto, mostrar este error o mvil que configuramos

7
00:00:34,160 --> 00:00:36,620
en este componente de orden superior.

8
00:00:36,800 --> 00:00:44,290
Sin embargo, tenemos un problema con el mtodo del controlador de errores que puede combinarse con varios componentes.

9
00:00:44,300 --> 00:00:47,790
Esa es la idea de tener este componente de orden superior.

10
00:00:47,840 --> 00:00:52,940
De lo contrario, podramos haber puesto el cdigo de la muerte directamente en la roca de la hamburguesa si ese fuera el

11
00:00:52,940 --> 00:00:54,260
nico componente donde queremos usar eso.

12
00:00:54,260 --> 00:00:56,880
En este momento es el nico componente que lo estamos usando.

13
00:00:56,900 --> 00:01:02,760
Pero, de nuevo, nuestro componente de orden superior, por supuesto, no se limita al creador del programa.

14
00:01:03,170 --> 00:01:12,710
El problema que tenemos es que si agregamos este componente de orden superior con el manejador de errores a nuestros

15
00:01:12,710 --> 00:01:19,070
componentes lo llamaremos compote y lo montaremos una y otra vez, por supuesto,

16
00:01:19,070 --> 00:01:26,270
porque el componente de clase que devolvemos es de orden superior. alrededor de un componente existente.

17
00:01:26,270 --> 00:01:34,840
As que cada vez que llamamos con controlador de aire en el elemento que estamos exportando como lo hacemos en el Bergere Boulder.

18
00:01:34,940 --> 00:01:40,440
As que en realidad estamos conectando mltiples interceptores en nuestra aplicacin y los estamos conectando

19
00:01:40,440 --> 00:01:42,740
a la misma instancia de acceso.

20
00:01:43,040 --> 00:01:48,020
El problema, por supuesto, es que no tenemos que hacerlo ahora, pero lo haremos ms adelante en el curso.

21
00:01:48,090 --> 00:01:54,920
El enrutamiento mencionado de DB conducir al problema una vez que tengamos ms pginas donde podramos usar el

22
00:01:54,920 --> 00:01:55,910
manejador de errores.

23
00:01:55,910 --> 00:02:03,130
Nosotros, por supuesto, creamos esta instancia aqu, incontinencia de tiempo mltiple y aqu y, por lo tanto, todos los setters de

24
00:02:03,130 --> 00:02:03,950
lesiones antiguas.

25
00:02:03,980 --> 00:02:09,740
Entonces todava existen todos los interceptores que configuramos cuando envolvemos esto alrededor de otro

26
00:02:09,740 --> 00:02:12,170
componente que podra no ser necesario.

27
00:02:12,170 --> 00:02:18,260
As que tenemos muchos interceptores muertos en la memoria, que en realidad no estn muertos,

28
00:02:18,440 --> 00:02:21,430
pero que an reaccionan a nuestras peticiones.

29
00:02:21,560 --> 00:02:29,630
Y el peor de los casos conduce a errores o de alguna manera cambia el estado de nuestra aplicacin.

30
00:02:29,690 --> 00:02:36,410
Pero incluso en el mejor de los casos, pierden memoria porque ese cdigo an se ejecuta y ya no

31
00:02:36,410 --> 00:02:37,250
se requiere.

32
00:02:37,490 --> 00:02:43,850
Entonces deberamos eliminar la satirise cuando este componente se desmonta.

33
00:02:43,880 --> 00:02:50,470
Entonces, cundo ya no se necesita una instancia especfica de nuestro contenedor de controladores de errores?

34
00:02:50,570 --> 00:02:59,360
Y realmente hay un ciclo de vida para que su componente se desmonte.

35
00:02:59,420 --> 00:03:06,470
Ahora, como los nombres de solo das es un mtodo de ciclo de vida que se ejecuta en el momento en que

36
00:03:06,560 --> 00:03:08,590
ya no se requiere un componente.

37
00:03:09,200 --> 00:03:16,910
Ahora, para poder eliminar una intercepcin o aqu tenemos que almacenar una referencia a los interceptores que creamos en

38
00:03:17,210 --> 00:03:19,840
las propiedades de la clase no.

39
00:03:19,880 --> 00:03:22,190
Ahora tenemos que declarar la propiedad ya.

40
00:03:22,310 --> 00:03:25,550
No podemos simplemente agregar nuevas propiedades.

41
00:03:25,550 --> 00:03:34,340
As que para eso simplemente crear una nueva propiedad sobre la marcha usando esta la palabra clave para referirme a la clase

42
00:03:34,340 --> 00:03:36,890
que tenga el nombre que elija.

43
00:03:37,100 --> 00:03:46,880
Todos los ISDE solicitados ingresan al centro o tal como este interceptor de solicitud y almacenaremos el resultado de la configuracin de

44
00:03:46,940 --> 00:03:54,140
nuestro interceptor, que es solo una referencia de la central de direcciones transferida automticamente por Access.

45
00:03:54,310 --> 00:03:58,490
Y har lo mismo para el interceptor de respuesta aqu.

46
00:03:58,520 --> 00:04:07,190
As que ahora tengo dos nuevas propiedades en mi clase y ahora puedo usar estas propiedades para desmontarlas

47
00:04:07,190 --> 00:04:09,400
y eliminar los receptores all.

48
00:04:09,410 --> 00:04:18,050
simplemente usar interceptores X aos tal como los creamos, pero ahora tambin podemos solicitar y responder x all.

49
00:04:18,080 --> 00:04:19,070
Ahora podemos

50
00:04:19,080 --> 00:04:24,670
Expulsin y expulsin en llamada ahora requiere la referencia al interceptor.

51
00:04:24,830 --> 00:04:33,390
Entonces aqu solicitamos interceptor y finalmente duplicadores para hacer lo mismo para la respuesta para el objeto

52
00:04:33,410 --> 00:04:34,560
de respuesta.

53
00:04:34,580 --> 00:04:39,210
Toda la llamada expulsa y luego se llama interceptor de respuesta.

54
00:04:39,590 --> 00:04:41,360
Y ahora con eso tenemos esta configuracin.

55
00:04:41,370 --> 00:04:48,160
Incomputable desconocido y deberamos eliminar nuestros interceptores con eso para evitar fugas de memoria.

56
00:04:48,200 --> 00:04:54,530
funciona, guardar ese archivo y luego ir a la abertura hasta donde sea que agreguemos Burgard Boulder.

57
00:04:54,530 --> 00:04:56,600
Ahora, para ver rpidamente si eso

58
00:04:56,960 --> 00:05:03,760
Y quiero agregar un cdigo para eliminarlo despus de un tiempo solo para ver si vamos a desmontar.

59
00:05:04,040 --> 00:05:13,340
As que all simplemente voy a desmontar consola y deseo generar esta intercepcin de solicitud o en esta respuesta y las propiedades de Precentor D2 que agregamos

60
00:05:13,610 --> 00:05:19,080
para ver si estn configuradas al principio de la cantidad de quejas de Will, porque las

61
00:05:19,100 --> 00:05:21,450
estoy usando a partir de entonces.

62
00:05:21,860 --> 00:05:27,050
Entonces, si eso est guardado regresemos al s y para asegurarnos de que Bergere

63
00:05:27,080 --> 00:05:31,920
Boulder desaparezca despus de un tiempo, agregando temporalmente estado al componente de mi aplicacin.

64
00:05:32,030 --> 00:05:37,850
la roca de Bergere de Por supuesto, porque solo se agrega al dormitorio si Show es verdadero.

65
00:05:37,850 --> 00:05:45,110
Es un componente basado en la clase, as que por supuesto puedo hacer esto y simplemente mostrar una propiedad que es cierta inicialmente

66
00:05:45,110 --> 00:05:50,510
y la usar aqu con este espectculo de escenario para mostrar el constructor de Bergere o mostrar

67
00:05:50,510 --> 00:05:51,640
nulo que esencialmente elimina

68
00:05:51,860 --> 00:05:53,910
As que ahora solo necesito un camino para ti.

69
00:05:53,960 --> 00:05:57,550
Bien desarreglado presumir por un tiempo y por muerto.

70
00:05:57,560 --> 00:05:59,500
Y nuevamente esto es solo para probar.

71
00:05:59,570 --> 00:06:05,750
Aadir un componente que se mont aqu y all. Simplemente usar para normalizar un mtodo de tiempo establecido

72
00:06:05,750 --> 00:06:06,750
proporcionado por Javascript.

73
00:06:06,950 --> 00:06:14,990
Y despus de cinco segundos quiero ejecutar este ao de funcin y en esa funcin llamar a set state y

74
00:06:15,320 --> 00:06:17,170
establecer show a 4.

75
00:06:17,180 --> 00:06:19,810
Y de nuevo eliminar este cdigo en un segundo.

76
00:06:19,820 --> 00:06:23,240
Solo est ah para probar si esto funciona.

77
00:06:23,330 --> 00:06:25,900
Si lo hace, la llamada se desmontar.

78
00:06:26,210 --> 00:06:28,150
Entonces, si todo eso nos salv.

79
00:06:28,370 --> 00:06:31,590
Y ahora recarguemos la aplicacin que vemos.

80
00:06:32,000 --> 00:06:33,480
Esperemos cinco segundos.

81
00:06:34,880 --> 00:06:41,050
Ojal Tennessee se desmonte y veamos el 0 de Ciro, y eso es correcto porque estas son

82
00:06:41,050 --> 00:06:42,070
simplemente las ideas.

83
00:06:42,220 --> 00:06:49,690
Hay ideas que se guardan en la memoria mediante el acceso tanto para los interceptores de solicitud como de respuesta. De modo que hay dos

84
00:06:49,690 --> 00:06:53,170
listas diferentes de centros de inters y comienzan con el ndice cero.

85
00:06:53,200 --> 00:06:56,700
Agregamos uno a cada lista una solicitud y un centro de control de respuesta.

86
00:06:56,710 --> 00:06:58,960
Entonces, es por eso que vemos dos Ciro aqu.

87
00:06:59,110 --> 00:07:01,630
Entonces, lo que podemos ver es que funciona.

88
00:07:01,660 --> 00:07:09,740
de los objetos y esto solo garantizar que, cuando ya no necesitemos el componente o componente de Bergere Boulder.

89
00:07:09,790 --> 00:07:17,110
Ahora podemos eliminar ese paso Cancellara y desmontarlo, lo hace con xito para obtener esta referencia al

90
00:07:17,680 --> 00:07:20,560
interceptor y podemos confiar en el funcionamiento

91
00:07:20,560 --> 00:07:25,810
Y por supuesto no es el caso ahora mismo en la aplicacin, pero pronto

92
00:07:25,820 --> 00:07:33,200
ser que limpiemos los interceptores que adjuntamos con el controlador de aire en el Bergere Boulder para que si realmente

93
00:07:33,200 --> 00:07:39,490
tuviramos controlador de aire en nuestra aplicacin no lo hagamos. Crear ms y ms interceptores con los

94
00:07:39,490 --> 00:07:40,810
viejos que viven.

95
00:07:40,810 --> 00:07:48,700
en la apertura como archivo para tener una aplicacin normal de nuevo, as que elimine todo el cdigo que agregamos para indicar

96
00:07:48,700 --> 00:07:55,570
y el componente que con el tiempo de espera establecido para que tengamos la misma aplicacin retocada como antes.

97
00:07:55,570 --> 00:07:58,680
As que con eso puedo eliminar mi cdigo aqu

98
00:07:58,810 --> 00:08:04,470
Pero ahora de nuevo con la aplicacin mejorada en la que eliminamos interceptores que ya no necesitamos.

