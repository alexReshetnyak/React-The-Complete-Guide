1
00:00:02,150 --> 00:00:05,490
In the last lecture we created our axios instance,

2
00:00:05,510 --> 00:00:08,790
now it's time to be able to send the requests there.

3
00:00:08,840 --> 00:00:11,220
Now let's figure out where we do this.

4
00:00:11,630 --> 00:00:20,390
Well in our burger builder container, there we have this method where we handle the purchase continuation.

5
00:00:20,390 --> 00:00:22,990
Right now we're showing this you continue alert,

6
00:00:23,040 --> 00:00:27,190
now of course we don't want to show you continue in the final application,

7
00:00:27,200 --> 00:00:31,380
we probably want to navigate the user to some checkout form.

8
00:00:31,490 --> 00:00:35,930
We haven't learned how to load different pages in our single page app

9
00:00:35,960 --> 00:00:40,620
and yes, pages in our single page app sounds strange you'll see how that works soon,

10
00:00:40,850 --> 00:00:45,160
and we also haven't learned how to handle a form input, how to validate this and so on.

11
00:00:45,410 --> 00:00:47,920
So for now there won't be a checkout form,

12
00:00:48,020 --> 00:00:54,110
we can simply take the order as it is and store it like this with some dummy data appended to it in

13
00:00:54,110 --> 00:00:55,160
the database.

14
00:00:55,160 --> 00:01:02,510
So to do that, let's comment out this alert line here and instead of this place here, I want to send my data

15
00:01:02,660 --> 00:01:08,960
to my backend, I want to make this HTTP request. So in the burger builder file, we should import our own

16
00:01:08,990 --> 00:01:10,390
axios instance

17
00:01:10,610 --> 00:01:17,600
so I'm going to import axios from and now I need to go all the way up to the root folder and there from

18
00:01:17,600 --> 00:01:23,240
the axios-orders.js file, this is going to use our configured axios instance.

19
00:01:23,630 --> 00:01:30,090
Now we can use that in the purchaseContinueHandler to send the request to our own backend.

20
00:01:30,260 --> 00:01:37,310
Now for storing data, we should use a post request and therefore we use the post method on that instance.

21
00:01:37,310 --> 00:01:42,950
Now the URL is of course now our base URL plus whatever we're adding here,

22
00:01:43,160 --> 00:01:48,770
and that's the cool thing about firebase I said that it uses as MongoDB like structure,

23
00:01:48,770 --> 00:01:50,540
we don't actually have tables here

24
00:01:50,630 --> 00:01:57,800
we just have json like nested structure and if you send a request to something like this URL

25
00:01:57,860 --> 00:01:59,640
slash orders,

26
00:01:59,690 --> 00:02:04,950
it's going to create our orders node and store our orders beneath that node

27
00:02:05,180 --> 00:02:06,950
and this is exactly what I want to do.

28
00:02:07,130 --> 00:02:14,960
I'll add slash orders here and now for firebase only, there is a special thing, you need to add .json

29
00:02:14,960 --> 00:02:15,710
here.

30
00:02:15,710 --> 00:02:20,390
This is the end point you just need to target for firebase to function correctly.

31
00:02:20,390 --> 00:02:25,940
Of course in your next project you probably have your own backend or you use some other service and

32
00:02:25,940 --> 00:02:28,880
you need to choose the appropriate endpoint there.

33
00:02:28,940 --> 00:02:32,790
For firebase it's any node name of your choice .json.

34
00:02:32,810 --> 00:02:40,170
So that's the URL I want to send a request to, the URL which gets appended to my base URL

35
00:02:40,180 --> 00:02:42,960
or the path which gets appended to our base URL,

36
00:02:43,100 --> 00:02:50,840
now we also need to send some data and that data of course should be our order for the given burger configuration.

37
00:02:50,870 --> 00:02:54,020
Now the burger configuration is stored in the state

38
00:02:54,020 --> 00:02:56,590
here, we have the ingredients, we have the total price

39
00:02:56,660 --> 00:02:58,450
so we get everything we need here,

40
00:02:58,610 --> 00:03:00,250
so that's super simple.

41
00:03:00,260 --> 00:03:06,840
We can create a new order object, a javascript object which has ingredients

42
00:03:06,920 --> 00:03:13,390
and here I simply want to use this.state.ingredients and which should have a price,

43
00:03:13,460 --> 00:03:21,160
this.state.price, total price excuse me and just a little side note of course for your production ready

44
00:03:21,160 --> 00:03:26,770
application, you should definitely calculate that final price on the server because you probably

45
00:03:26,770 --> 00:03:32,470
have your product stored on the server there to make sure that the user isn't manipulating the code

46
00:03:32,470 --> 00:03:36,280
before sending it and manipulates the price which you're using.

47
00:03:36,340 --> 00:03:39,280
Still here I'm going to use that price, again

48
00:03:39,360 --> 00:03:43,000
be aware that this of course is not a set up you would use on a real app,

49
00:03:43,120 --> 00:03:47,050
there you would recalculate the price on the server.

50
00:03:47,050 --> 00:03:52,780
Now let's say for our order we also need some additional information which we can't fetch right now because

51
00:03:52,780 --> 00:03:58,570
we don't have a checkout form but which I still want to fill on the backend with some dummy data.

52
00:03:58,810 --> 00:04:05,980
So there we have some customer data maybe, so customer, could be a javascript object where we have something

53
00:04:05,980 --> 00:04:07,390
like a name,

54
00:04:07,420 --> 00:04:10,940
So here, this is Max Schwarzmuller, that's my name,

55
00:04:10,940 --> 00:04:12,140
choose your name, of course.

56
00:04:12,310 --> 00:04:18,950
Then we might have an address where we have something like street, the test street,

57
00:04:18,970 --> 00:04:27,940
you might guess that I'm not living there and like a zipcode rolling over the keyboard and maybe countries

58
00:04:28,000 --> 00:04:31,990
for me, that's Germany and feel free to add any additional data here.

59
00:04:32,200 --> 00:04:38,260
We also might have that e-mail address so let's test@test.com here

60
00:04:38,260 --> 00:04:45,070
and let's maybe add a number field next to customer delivery method which should be fastest so that

61
00:04:45,070 --> 00:04:49,750
we have like a choice between fastest possible delivery and cheapest or something like that.

62
00:04:49,750 --> 00:04:52,140
So just some dummy order data,

63
00:04:52,150 --> 00:04:54,140
feel free to pick any data you want.

64
00:04:54,190 --> 00:04:58,870
We're later going to add a checkout page where we can actually fill those with some live by using a

65
00:04:58,870 --> 00:04:59,470
form

66
00:04:59,500 --> 00:05:07,450
but for now let's simply build our dummy order like this. This now is the order I want to store on the

67
00:05:07,450 --> 00:05:08,230
backend

68
00:05:08,380 --> 00:05:15,040
so for the order here, I'm going to pass this as a second argument for the post request.

69
00:05:15,040 --> 00:05:18,290
So this is the data which gets sent to this path

70
00:05:18,730 --> 00:05:24,010
and now let's add then method to see our response

71
00:05:24,100 --> 00:05:28,010
and I'm just going to log the response here for now.

72
00:05:28,390 --> 00:05:35,320
And let's also add a catch method where I also want to log the error for now,

73
00:05:35,350 --> 00:05:38,970
we're going to update both methods in a second.

74
00:05:39,370 --> 00:05:41,130
So let's see if this now works,

75
00:05:41,140 --> 00:05:43,370
we got our post request in place,

76
00:05:43,370 --> 00:05:45,170
we're sending a dummy order,

77
00:05:45,220 --> 00:05:50,040
we set up the axios instance and we created the firebase project.

78
00:05:50,080 --> 00:05:54,420
Let's head over to our burger application and let's build a burger here,

79
00:05:54,550 --> 00:05:57,470
maybe this one let's click order now

80
00:05:57,700 --> 00:06:00,580
and now up on continue, the requests should be sent.

81
00:06:00,580 --> 00:06:03,500
So let's click continue and that's looking good,

82
00:06:03,550 --> 00:06:06,850
I'm getting back a response with status 200

83
00:06:07,210 --> 00:06:09,430
so let's check out firebase.

84
00:06:09,460 --> 00:06:15,700
It should update this page automatically and you should see the orders node in which you now see this

85
00:06:15,730 --> 00:06:18,160
cryptic name here.

86
00:06:18,160 --> 00:06:23,840
Now to use the post method, firebase is automatically creating and managing a list here

87
00:06:24,190 --> 00:06:30,760
and each list item simply get a unique ID assigned and created by firebase automatically.

88
00:06:31,000 --> 00:06:35,220
If we expand this object we see the order data

89
00:06:35,230 --> 00:06:42,580
we actually passed with the address, the customer data, the delivery method and the ingredients of the burger

90
00:06:42,790 --> 00:06:44,710
and the ingredients looked good to me,

91
00:06:44,710 --> 00:06:50,640
meat, salad, bacon that looks a lot like the burger we actually built here.

92
00:06:50,920 --> 00:06:52,170
So that's pretty great.

93
00:06:52,180 --> 00:06:54,880
We got our burgers saved on the back,

94
00:06:54,880 --> 00:06:56,780
we got our orders saved here

95
00:06:56,830 --> 00:07:00,500
but the cool thing is of course that this data is staying here.

96
00:07:00,640 --> 00:07:06,700
If we reload the app, we reload this html file and therefore of course lose the application state because

97
00:07:06,700 --> 00:07:08,550
the javascript state is gone

98
00:07:08,770 --> 00:07:11,470
but of course our state on the server is still there.

99
00:07:11,470 --> 00:07:14,950
So now we could fetch the orders and output them to the user

100
00:07:15,130 --> 00:07:21,610
and in a real application, we would also as a producer or as the business owner,

101
00:07:21,640 --> 00:07:26,540
we would also probably handle the orders now and send that burger to the customer.

102
00:07:26,830 --> 00:07:28,500
So that's a POST request

103
00:07:28,600 --> 00:07:36,100
before we go onto error handling and that stuff, let's make sure that we also present something to the

104
00:07:36,100 --> 00:07:39,650
user whilst the request is on its way

105
00:07:39,850 --> 00:07:44,090
and then let's make sure that we also get some data from the backend.

