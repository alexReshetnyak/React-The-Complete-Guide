1
00:00:02,150 --> 00:00:05,940
So in the last lecture, we made sure that we can send a POST request,

2
00:00:05,980 --> 00:00:11,860
now in a typical application, we want to show something to the user whilst the request is on its way.

3
00:00:11,900 --> 00:00:13,170
Now I will have to add

4
00:00:13,180 --> 00:00:16,790
firebase is really really quick

5
00:00:17,000 --> 00:00:23,030
So we probably won't even have a chance to see a loading screen or something which you want to show

6
00:00:23,030 --> 00:00:25,640
to the user whilst the request is on its way.

7
00:00:25,640 --> 00:00:30,890
Still it is a good practice to show something like this because in case we have some latency or maybe

8
00:00:30,890 --> 00:00:32,460
the user network is slow,

9
00:00:32,570 --> 00:00:36,230
you definitely want to show the user hey something is happening.

10
00:00:36,260 --> 00:00:37,750
So what do we want to show?

11
00:00:37,850 --> 00:00:40,840
Well I want to show a spinner inside this modal

12
00:00:40,850 --> 00:00:47,030
so instead of the order summary, I want to show a spinner so that the user can see that something is

13
00:00:47,030 --> 00:00:47,940
happening here

14
00:00:48,050 --> 00:00:54,660
and  once you are done the modal should get closed and the spinner therefore of course will also disappear.

15
00:00:55,010 --> 00:00:56,740
So how do we do that?

16
00:00:56,780 --> 00:01:01,600
First of all we need a spinner component, that is clearly a UI element

17
00:01:01,610 --> 00:01:08,180
so here, I will add a spinner folder and in there a spinner.js file.

18
00:01:08,180 --> 00:01:16,570
Now the spinner can simply be a simple functional component where I will return some js, as always

19
00:01:16,590 --> 00:01:24,410
there import React from react and export the spinner function here as the file default of course.

20
00:01:24,410 --> 00:01:26,960
Now to create a css spinner,

21
00:01:26,960 --> 00:01:31,120
we can simply take advantage of some resources we can find on the internet.

22
00:01:31,310 --> 00:01:37,940
If you search for css spinners, you're going to find that awesome project here the very first search

23
00:01:37,940 --> 00:01:44,930
result which you can see here in the video, which is a page with loads of css spinners and the code for

24
00:01:44,930 --> 00:01:47,620
it, which you can simply use.

25
00:01:47,640 --> 00:01:52,190
You can also adjust them here by picking a background color

26
00:01:52,190 --> 00:02:01,360
and here I'm going to enter a hex code of white for the background and then a front color of this nice

27
00:02:01,530 --> 00:02:05,770
purple. With that, you can choose any spinner,

28
00:02:05,920 --> 00:02:12,210
maybe this one here or whichever one you like and then you'll see the css code responsible for

29
00:02:12,210 --> 00:02:13,310
the spinner.

30
00:02:13,320 --> 00:02:15,540
Now I'm going to grab all that code,

31
00:02:15,730 --> 00:02:21,180
you also see the HTML code which is really simple, I'm going to grab all that code and then head back to the

32
00:02:21,180 --> 00:02:23,190
react application. There,

33
00:02:23,190 --> 00:02:26,300
I'll add a spinner css file and paste in the code

34
00:02:26,310 --> 00:02:27,630
I just copied.

35
00:02:27,930 --> 00:02:34,610
Now what I'll do is I'll quickly rename loader here to Loader with a capital L

36
00:02:34,710 --> 00:02:40,860
just to be in line with the other css file names I'm using in this project and then I'm going to grab

37
00:02:40,860 --> 00:02:49,650
that html code here on the spinner and I'll use that in my spinner component as jsx and the class

38
00:02:49,710 --> 00:02:51,200
of course has to be adjusted.

39
00:02:51,210 --> 00:02:56,680
It's class name and I need to import the classes from my css files so

40
00:02:56,680 --> 00:03:03,870
I'm importing it from spinner css and then of that class name equal to classes.Loader with

41
00:03:03,870 --> 00:03:10,170
a capital L. And that actually is all, the loading in between is like a fallback in case the css isn't

42
00:03:10,170 --> 00:03:10,970
displayed,

43
00:03:11,040 --> 00:03:12,410
then this will be shown.

44
00:03:12,600 --> 00:03:15,370
That actually is all the code I need for a spinner

45
00:03:15,390 --> 00:03:19,880
now I only need some logic to show it inside the modal whilst we are loading.

46
00:03:19,920 --> 00:03:26,290
So essentially I conditionally want to render order summary or my spinner.

47
00:03:26,460 --> 00:03:30,420
But for that, I need a new state in my burger builder

48
00:03:30,420 --> 00:03:37,310
here, I'll then add a state which I'll name loading and which is false initially. When it is true,

49
00:03:37,320 --> 00:03:39,690
I want to show the spinner, when it is false,

50
00:03:39,720 --> 00:03:42,800
I want to show the order summary in this component.

51
00:03:43,290 --> 00:03:44,940
So in the render method,

52
00:03:44,970 --> 00:03:53,650
I'll now add a check where I say if this state loading then I want to show the spinner and first of all

53
00:03:53,710 --> 00:04:01,020
I'll set up the alternative which is my order summary here which should simply be that element here

54
00:04:01,020 --> 00:04:02,490
that order summary element

55
00:04:02,490 --> 00:04:04,310
we have nested in the modal.

56
00:04:04,650 --> 00:04:12,210
I'll store it in this order summary variable up here which I created with the let keyword and I'll override

57
00:04:12,210 --> 00:04:14,570
it in case we have the loading state.

58
00:04:14,640 --> 00:04:19,350
Then here, I want to use that new spinner component we just created,

59
00:04:19,380 --> 00:04:25,950
so let's import a spinner then I'll add it here, import Spinner from,

60
00:04:26,130 --> 00:04:31,710
and now we have to go to the components folder of course to the UI folder and then to the spinner folder

61
00:04:31,710 --> 00:04:39,570
and import the spinner file from there. And now we can grab that spinner and use it down there in our

62
00:04:39,570 --> 00:04:40,850
render method.

63
00:04:41,070 --> 00:04:48,180
Here I now want to set order summary should be my spinner and this is simply a self-closing tag.

64
00:04:48,600 --> 00:04:53,250
With that, we can save this and now we should output the order summary here,

65
00:04:53,250 --> 00:04:56,240
this variable we just created between the modal tags.

66
00:04:56,250 --> 00:05:01,320
So now we either show the spinner or we show the order summary.

67
00:05:01,590 --> 00:05:07,370
So let's save this and let's make sure that we now switch this loading state which we're checking here.

68
00:05:07,380 --> 00:05:13,820
We of course want to switch it here when we actually are continuing with the purchase.

69
00:05:13,980 --> 00:05:15,420
There right at the start,

70
00:05:15,450 --> 00:05:22,140
I want to call this set state and set loading to true of course because now we are loading the request

71
00:05:22,200 --> 00:05:26,830
is about to get sent. Once the response is there though,

72
00:05:26,850 --> 00:05:34,140
here where I log it, I no longer want to log it but I want to stop loading and I want to stop loading

73
00:05:34,140 --> 00:05:38,800
no matter what the response is because the request is done even if it failed.

74
00:05:38,850 --> 00:05:45,330
So here I will now call this set state and set the loading to false again

75
00:05:45,390 --> 00:05:48,920
of course so that we go back to the other

76
00:05:49,080 --> 00:05:51,620
well, page the other state.

77
00:05:51,990 --> 00:05:58,380
I also of course want to set loading to false if we have an error because even if an error occurred,

78
00:05:58,650 --> 00:06:02,830
we want to stop loading, we don't want to show the spinner anymore because our UI

79
00:06:02,860 --> 00:06:06,390
would be stuck in this case and the user would think it'S still

80
00:06:06,420 --> 00:06:07,950
well loading

81
00:06:08,310 --> 00:06:11,500
Of course I said I also want to close the modal,

82
00:06:11,820 --> 00:06:18,900
well that can be done easily because the modal is only shown if the state purchasing property here is

83
00:06:18,900 --> 00:06:20,000
set to true.

84
00:06:20,250 --> 00:06:23,550
So we should simply have to set purchasing to false here.

85
00:06:23,730 --> 00:06:31,190
So in both cases, I will also set purchasing to false so that we close the modal.

86
00:06:31,350 --> 00:06:31,930
So with that,

87
00:06:31,940 --> 00:06:32,820
let's try that out.

88
00:06:32,850 --> 00:06:38,910
If we go back to our burger and we create a burger I click order now to continue.

89
00:06:39,710 --> 00:06:42,980
We didn't actually see the spinner, did we?

90
00:06:43,170 --> 00:06:46,780
Now this makes sense due to the way we configured our app

91
00:06:46,790 --> 00:06:52,940
but do you know why we didn't see the spinner? It can be hard to spot but I'll give you a chance to pause

92
00:06:52,940 --> 00:06:57,850
the video and find the issue on your own before I will then show you why it's not working.

93
00:06:59,590 --> 00:07:01,750
Did you find out what's wrong?

94
00:07:02,110 --> 00:07:08,870
Now I can tell you we are correctly setting loading and so on and order summary also is the spinner

95
00:07:08,880 --> 00:07:09,560
therefore.

96
00:07:09,760 --> 00:07:15,730
But somehow our modal doesn't update, it doesn't show this when we set this

97
00:07:15,740 --> 00:07:17,880
now there's a good reason for that.

98
00:07:18,040 --> 00:07:26,270
Consider our modal code we use shouldComponentUpdate here and we basically only update the component

99
00:07:26,440 --> 00:07:34,090
if the show state changed. Here however, the children of the component simply change to props.

100
00:07:34,090 --> 00:07:35,380
children.changed,

101
00:07:35,380 --> 00:07:39,910
we're passing a new child, we're passing the spinner instead of the order summary,

102
00:07:40,240 --> 00:07:47,380
that doesn't trigger an update here. So we simply have to finetune our shouldComponentUpdate method

103
00:07:47,470 --> 00:07:49,330
in the modal component

104
00:07:49,510 --> 00:07:57,430
and we have to check if nextProps.children is actually different to thisProps.children so that it

105
00:07:57,430 --> 00:08:04,120
does update if it gets new children. With that change in place, once you saved it, if you now go back to

106
00:08:04,120 --> 00:08:09,250
your application, build a burger now you have to watch closely because it's only going to stay there for

107
00:08:09,250 --> 00:08:15,960
a fraction of a second but if you click continue, you see that loader and you see that the styling was

108
00:08:15,950 --> 00:08:16,690
a bit broken,

109
00:08:16,690 --> 00:08:18,140
let's quickly fix this.

110
00:08:18,240 --> 00:08:26,120
We have to go into the spinner and there the background color on that loader before rule should be white

111
00:08:26,140 --> 00:08:33,030
so #fff, the loader after color should also be white and with that

112
00:08:33,030 --> 00:08:37,890
now if we save this and we create one more burger and order that,

113
00:08:37,980 --> 00:08:39,500
now we have a nice looking spinner.

114
00:08:39,590 --> 00:08:43,020
Again, we don't see it that long because firebase is that fast,

115
00:08:43,080 --> 00:08:45,220
feel free to comment out

116
00:08:45,250 --> 00:08:49,130
this post request here to see it a little bit longer so

117
00:08:49,150 --> 00:08:50,160
I'm going to do that.

118
00:08:50,160 --> 00:08:54,810
So now we're not sending a request and we're never changing back from the loading state,

119
00:08:54,810 --> 00:08:57,420
now you can see the spinner here.

120
00:08:57,420 --> 00:09:01,930
So now we get a spinner in place which we're showing while something is happening.

121
00:09:02,110 --> 00:09:07,800
Nothing's happening here of course because I commented out but now we got this handled.

122
00:09:07,810 --> 00:09:11,680
Now let's also now handle the case that

123
00:09:11,730 --> 00:09:17,910
our HTTP request fails because we want to inform the user about such a failure too.

