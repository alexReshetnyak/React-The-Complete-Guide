1
00:00:02,170 --> 00:00:10,030
Quindi iniziamo installando redox e re-act redux in modo da uscire dal processo di avvio di NPM o

2
00:00:10,030 --> 00:00:19,870
semplicemente eseguire e dash dash dash di installazione salvare leggere X e leggere read X hit enter per installare questi due pacchetti in

3
00:00:19,870 --> 00:00:26,590
modo che possiamo usarli qui e pu accedere comodamente al nostro negozio di redux nell'applicazione re-act.

4
00:00:26,860 --> 00:00:28,060
Una volta finito.

5
00:00:28,060 --> 00:00:35,680
Ovviamente puoi riavviare il tuo processo in grassetto e sviluppare unserer con NPM per vedere nuovamente la tua

6
00:00:35,680 --> 00:00:36,740
bella applicazione.

7
00:00:37,000 --> 00:00:46,240
Ora, con entrambi installati,  ovviamente giunto il momento di creare nuovamente il nostro riduttore del negozio e le sue

8
00:00:46,240 --> 00:00:46,900
reazioni.

9
00:00:46,930 --> 00:00:53,570
Ancora una volta ri-intervista una cartella direttamente nella cartella sorgente che si chiama store e l.

10
00:00:53,620 --> 00:00:55,570
Aggiunger un nuovo riduttore di caduta.

11
00:00:55,620 --> 00:00:56,440
J. S. E naturalmente azioni.

12
00:00:56,560 --> 00:00:58,080
J. S. perch voglio esportare le mie azioni come costanti.

13
00:00:58,130 --> 00:01:02,460
La coda di nuovo mi

14
00:01:02,580 --> 00:01:09,640
impedisce di digitare errori di digitazione o di introdurre alcuni errori solo perch provo a creare stringhe di codice in pi file.

15
00:01:09,640 --> 00:01:10,890
Pertanto, iniziamo ora con i tipi di azioni di base che probabilmente avremo bisogno se iniziamo con l'hamburger.

16
00:01:11,580 --> 00:01:19,970
E davvero la funzionalit principale della costruzione di quell'hamburger.

17
00:01:20,100 --> 00:01:23,420
Possiamo immergerci nella ciotola o nel contenitore per hamburger e dare un'occhiata ai metodi che abbiamo creato l.

18
00:01:23,610 --> 00:01:29,450
Abbiamo un gestore di ingredienti e riceviamo un gestore di ingredienti rimossi.

19
00:01:29,520 --> 00:01:34,210
Queste sono ovviamente le due cose principali che aggiungiamo

20
00:01:34,320 --> 00:01:39,990
ingredienti e rimuoviamo gli ingredienti, quindi probabilmente vorremmo azioni appropriate.

21
00:01:39,990 --> 00:01:42,180
Esporta un concetto che chiamer gli ingredienti e assegner una stringa con lo stesso valore.

22
00:01:42,510 --> 00:01:49,810
Aggiungi gli ingredienti e poi duplicati per creare anche la rispettiva azione per rimuovere gli ingredienti.

23
00:01:49,940 --> 00:01:58,570
In realt possiamo chiamarlo.

24
00:01:58,580 --> 00:01:59,520
Aggiungi ingrediente

25
00:01:59,540 --> 00:02:00,680
Rimuovere un ingrediente perch non ne aggiungiamo pi di uno o ne rimuoviamo pi di uno alla volta.

26
00:02:00,710 --> 00:02:05,620
Quindi otteniamo queste due azioni e prima di aggiungere altro iniziamo con thius

27
00:02:05,900 --> 00:02:11,280
costruiamo il negozio con DS e poi aggiungiamo sempre pi funzionalit alle prossime lezioni.

28
00:02:11,280 --> 00:02:16,220
Quindi implementiamo o iniziamo a implementare il nostro riduttore.

29
00:02:16,250 --> 00:02:20,850
L importer tutto come tipi di azioni da queste azioni.

30
00:02:20,900 --> 00:02:26,840
File JS.

31
00:02:26,840 --> 00:02:28,270
mio stato e poi

32
00:02:28,520 --> 00:02:35,150
probabilmente vorremmo avere lo stesso stato che gi usiamo nel burger Boler l se scorriamo verso l'alto.

33
00:02:35,150 --> 00:02:40,400
Quindi creer uno stato iniziale costante per definire come dovrebbe essere inizialmente il

34
00:02:40,400 --> 00:02:41,030
Ovviamente ci sono molti campi ora.

35
00:02:41,140 --> 00:02:43,220
Ho detto che voglio iniziare con gli ingredienti nel prezzo totale.

36
00:02:43,220 --> 00:02:46,330
Quindi copiamo questi due e li spostiamo nel riduttore.

37
00:02:46,330 --> 00:02:50,930
Cos ora abbiamo gli ingredienti e il prezzo totale l per uno stato iniziale.

38
00:02:50,930 --> 00:02:54,600
Quindi possiamo creare la funzione stessa del riduttore semplicemente pu essere

39
00:02:54,950 --> 00:03:02,750
memorizzata in un riduttore denominato costante usando la sintassi delle sei funzioni in cui si arriva a stato che  impostato sullo stato iniziale.

40
00:03:02,750 --> 00:03:07,810
prima volta quelle corse e poi aggiungiamo anche l'azione che tutti riceveranno qui.

41
00:03:07,970 --> 00:03:14,300
Beh, inizialmente, nel caso in cui si diventa indefiniti come uno stato che facciamo con la

42
00:03:14,420 --> 00:03:18,730
Ora alla fine di tutto.

43
00:03:18,870 --> 00:03:20,830
Ovviamente voglio anche esportare il mio

44
00:03:20,850 --> 00:03:27,640
riduttore come default di default ora dovremo riempire questo produttore con un po 'di vita lo far nella prossima lezione prima di farlo.

45
00:03:27,640 --> 00:03:33,370
Impostiamo la gestione dello stato nell'indice G-S fall dove

46
00:03:33,370 --> 00:03:40,510
avvolgiamo la nostra intera applicazione e l vediamo gi qualcosa di interessante.

47
00:03:40,510 --> 00:03:42,700
Concludiamo la nostra applicazione qui con il router del browser.

48
00:03:42,700 --> 00:03:47,350
Questo naturalmente pu portare a confusione o forse  qualcosa che non abbiamo guardato prima.

49
00:03:47,350 --> 00:03:54,160
Dove dovremmo ora aggiungere il nostro componente del provider da re-act redux all'interno del router del browser o all'esterno.

50
00:03:54,160 --> 00:04:03,360
Mettiamolo in discussione nella prossima lezione.

51
00:04:03,370 --> 00:04:06,640
&nbsp;

