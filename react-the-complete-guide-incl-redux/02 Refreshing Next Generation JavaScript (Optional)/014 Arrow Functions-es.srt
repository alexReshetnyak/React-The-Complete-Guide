1
00:00:02,340 --> 00:00:08,140
Aprender acerca de LET y Konst, una construccin numrica y numrica, que ver

2
00:00:08,160 --> 00:00:11,080
mucho y, por supuesto, nuestras funciones aerodinmicas.

3
00:00:11,460 --> 00:00:15,890
Esa es una sintaxis diferente para crear funciones de Javascript.

4
00:00:15,960 --> 00:00:18,540
Por supuesto, una funcin normal de JavaScript se ve as.

5
00:00:18,540 --> 00:00:27,450
Con la palabra clave de funcin Tambin puede observar una sintaxis donde tiene la barra de mi funcin es igual a fonk.

6
00:00:27,540 --> 00:00:30,230
Ahora una funcin de flecha se ve as.

7
00:00:30,270 --> 00:00:34,160
Aqu lo estoy almacenando en una constante y luego en el lado derecho del signo de igual.

8
00:00:34,290 --> 00:00:36,750
Esa es la sintaxis de la funcin flecha.

9
00:00:36,840 --> 00:00:42,540
Aqu hay una lista de argumentos, pero podra contener algunos argumentos y luego una flecha.

10
00:00:42,720 --> 00:00:47,280
Entonces, un signo igual y un signo mayor que el cuerpo de la funcin.

11
00:00:47,280 --> 00:00:52,920
El ndice de funcin de flecha es un poco ms corto que la sintaxis normal, ya que omite la palabra

12
00:00:53,550 --> 00:00:56,700
clave de funcin y tambin, y ese es el gran beneficio.

13
00:00:56,700 --> 00:00:59,810
Resuelve muchos de los problemas que a menudo tenas con eso.

14
00:00:59,810 --> 00:01:02,710
Esta palabra clave en javascript.

15
00:01:02,940 --> 00:01:10,290
Si ha trabajado un poco con javascript, probablemente sepa que esta palabra clave no siempre se refiere a lo

16
00:01:10,290 --> 00:01:15,180
que podra haber esperado que se refiriera durante la escritura de su cdigo.

17
00:01:15,180 --> 00:01:22,830
Cuando usas esto dentro de la funcin de flecha, siempre mantendr su contexto y no cambiar sorprendentemente en

18
00:01:22,830 --> 00:01:24,450
el tiempo de ejecucin.

19
00:01:24,450 --> 00:01:28,130
Pasemos a J spend para ver la sintaxis de la funcin de flecha.

20
00:01:28,140 --> 00:01:31,320
En la prctica, de vuelta en J Espin.

21
00:01:31,380 --> 00:01:37,980
Creemos una funcin normal imprime mi nombre as.

22
00:01:38,890 --> 00:01:47,030
Ahora aqu podemos, por supuesto, dar salida al nombre del registro de la consola y al nombre del pase como argumento.

23
00:01:47,220 --> 00:01:54,930
Ahora, si llamo a imprimir mi nombre de esta manera y tuve el control despus de obtener el hallazgo porque

24
00:01:54,930 --> 00:01:59,200
no pas nada, haga lo mismo con Max pasado como argumento.

25
00:01:59,250 --> 00:02:07,410
Obtenemos max ahora en la funcin de flecha, el equivalente es iniciarnos en una constante llamada print my name.

26
00:02:07,410 --> 00:02:09,630
Tambin podra crearse con LET.

27
00:02:09,660 --> 00:02:15,410
Si planeas volver a asignar esta variable, imprime mi nombre como una constante.

28
00:02:15,520 --> 00:02:22,450
Y ahora no se olvide de agregar esta flecha entre la lista de argumentos y el cuerpo de la funcin ahora est libre y

29
00:02:22,480 --> 00:02:24,610
vuelva a ejecutar esto, igual ver Max.

30
00:02:24,610 --> 00:02:27,630
Entonces aqu se comporta exactamente de la misma manera.

31
00:02:27,640 --> 00:02:30,820
Ahora la palabra clave this thing es algo que vers para el curso.

32
00:02:30,850 --> 00:02:35,060
Se vuelve importante una vez que agregas funciones a un objeto por supuesto.

33
00:02:35,140 --> 00:02:40,960
En primer lugar, permtame mostrarle algunas alternativas para desinfectar con respecto a la lista de argumentos.

34
00:02:40,960 --> 00:02:48,370
Para ser precisos, si solo recibe un argumento como lo hacemos aqu, tambin puede usar un atajo para omitir los

35
00:02:48,430 --> 00:02:49,850
parntesis que lo rodean.

36
00:02:50,020 --> 00:02:56,720
Eso solo es vlido para exactamente un argumento aunque no para ms y no para el ltimo aqu.

37
00:02:56,740 --> 00:03:04,170
Obtendr el mismo resultado si tuviera una funcin que no recibe argumentos.

38
00:03:04,180 --> 00:03:06,270
Esta no es una sintaxis vlida.

39
00:03:06,340 --> 00:03:11,750
Necesita pasar un par de parntesis vacos como este.

40
00:03:11,860 --> 00:03:15,600
Si ejecutamos esto ahora, tambin vemos Max.

41
00:03:15,610 --> 00:03:19,080
Entonces esto funciona si tienes ms de un argumento.

42
00:03:19,090 --> 00:03:20,740
Tambin necesitas parntesis.

43
00:03:20,740 --> 00:03:23,410
Entonces, el nombre y la edad no funcionarn.

44
00:03:23,470 --> 00:03:26,950
Tendr que envolver esto entre parntesis.

45
00:03:26,950 --> 00:03:33,550
Y ahora podra mostrar el nombre y la edad y ambos como argumentos aqu.

46
00:03:33,910 --> 00:03:38,310
Entonces estas son dos sintaxis diferentes que podras ver con respecto a los argumentos.

47
00:03:38,380 --> 00:03:40,000
Tambin hay una alternativa.

48
00:03:40,000 --> 00:03:41,870
En cuanto al cuerpo de la funcin.

49
00:03:41,950 --> 00:03:47,780
Entonces, en el lado derecho de la flecha, obviamente, muchas funciones simplemente devuelven algo.

50
00:03:48,010 --> 00:03:58,920
Entonces, digamos que realmente queremos multiplicar algo y obtenemos un nmero como argumento.

51
00:03:58,920 --> 00:04:08,490
Ahora queremos devolver el nmero de veces, obviamente, lo que podemos hacer es consolar bloqueando el resultado de

52
00:04:08,490 --> 00:04:09,180
multiplicar.

53
00:04:09,180 --> 00:04:12,690
Entonces Watts regres por multiplicacin y pas a aqu.

54
00:04:12,870 --> 00:04:16,620
Si ahora borrara y ejecutara esto, deberamos ver cuatro y lo hacemos.

55
00:04:16,740 --> 00:04:24,960
en tu cuerpo funcional es el retorno y no tienes otro cdigo ah, puedes omitir las llaves Cauley y

56
00:04:24,960 --> 00:04:35,010
escribir esto en una lnea y luego debes admitir que la palabra clave return es muy corta. pregunta de escribir esta funcin

57
00:04:35,010 --> 00:04:39,670
Si tienes este caso en el que todo lo que haces

58
00:04:39,690 --> 00:04:44,820
Se vuelve un poco ms corto si aprovechamos el atajo para eliminar los parntesis

59
00:04:44,820 --> 00:04:46,260
alrededor del nico argumento.

60
00:04:46,260 --> 00:04:50,310
Y ahora lo que hace es devolver el resultado de este cdigo.

61
00:04:50,310 --> 00:04:54,230
Aqu simplemente omitimos la palabra clave return y tenemos dos emitidos.

62
00:04:54,450 --> 00:05:00,480
Y tenemos una forma muy concisa y breve de escribir una funcin que toma uno o ms

63
00:05:00,480 --> 00:05:01,860
argumentos y devuelve algo.

64
00:05:01,860 --> 00:05:05,690
As que aqu la limpieza y la ejecucin todava producen 4.

65
00:05:06,090 --> 00:05:11,430
As que esta es toda la sintaxis que podras ver y la funcin en general es algo que vers mucho.

66
00:05:11,430 --> 00:05:13,540
Viste la sintaxis varias nosotros.

67
00:05:13,650 --> 00:05:16,020
No tiene que recordarlos todos ahora mismo.

68
00:05:16,050 --> 00:05:21,240
Solo tenga en cuenta que hay diferencia en Texas y que si no los usamos rpidamente

69
00:05:21,240 --> 00:05:24,960
volvern a su mente y sabr por qu usamos una sintaxis dada.

