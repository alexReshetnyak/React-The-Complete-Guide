1
00:00:02,340 --> 00:00:08,140
Voc aprender sobre LET e Konst uma quantidade de nmero e construo de nmeros que voc

2
00:00:08,160 --> 00:00:11,080
vai ver muito e, claro, nossas funes aero.

3
00:00:11,460 --> 00:00:15,890
Essa  uma sintaxe diferente para criar funes de Javascript.

4
00:00:15,960 --> 00:00:18,540
Normalmente, uma funo javascript normal parece ser assim.

5
00:00:18,540 --> 00:00:27,450
Com a palavra-chave de funo, voc tambm pode observar uma sintaxe em que voc possui uma barra, minha fonk  igual  funo.

6
00:00:27,540 --> 00:00:30,230
Agora, uma funo de seta parece assim.

7
00:00:30,270 --> 00:00:34,160
Aqui estou armazenando-o em uma constante e depois no lado direito do sinal de igual.

8
00:00:34,290 --> 00:00:36,750
Essa  a sintaxe da funo seta.

9
00:00:36,840 --> 00:00:42,540
Uma lista de argumentos aqui est, mas pode conter alguns argumentos e, em seguida, uma seta.

10
00:00:42,720 --> 00:00:47,280
Ento, um sinal igual e um sinal maior do que o sinal e depois o corpo da funo.

11
00:00:47,280 --> 00:00:52,920
O ndice de funo de seta  um pouco menor do que a sintaxe normal, uma vez que ele omite a

12
00:00:53,550 --> 00:00:56,700
palavra-chave da funo e tambm e esse  o grande benefcio.

13
00:00:56,700 --> 00:00:59,810
Resolve muitos dos problemas que voc teve com isso.

14
00:00:59,810 --> 00:01:02,710
Esta palavra-chave em javascript.

15
00:01:02,940 --> 00:01:10,290
Se voc trabalhou com javascript um pouco, provavelmente voc sabe que esta palavra-chave nem sempre se refere ao que

16
00:01:10,290 --> 00:01:15,180
voc esperaria que ele se referisse durante a sua redao do seu cdigo.

17
00:01:15,180 --> 00:01:22,830
Quando voc usa isso dentro da funo de seta, ele sempre manter seu contexto e no mudar surpreendentemente

18
00:01:22,830 --> 00:01:24,450
no tempo de execuo.

19
00:01:24,450 --> 00:01:28,130
Ento, vamos agora passar para gastar para ver essa sintaxe da funo de seta.

20
00:01:28,140 --> 00:01:31,320
Na prtica de volta a J Espin.

21
00:01:31,380 --> 00:01:37,980
Vamos criar uma funo normal print meu nome como este.

22
00:01:38,890 --> 00:01:47,030
Agora, aqui, podemos, naturalmente, exibir o nome do log do console e passar o nome como o argumento.

23
00:01:47,220 --> 00:01:54,930
Agora, se eu chamar imprimir meu nome assim e ter controle depois de conseguirmos a descoberta, porque no passei

24
00:01:54,930 --> 00:01:59,200
nada porque faz o mesmo com Max aprovado como argumento.

25
00:01:59,250 --> 00:02:07,410
Ns recebemos o mximo agora na funo de seta, o equivalente  comear com uma constante chamada de imprimir meu nome.

26
00:02:07,410 --> 00:02:09,630
Tambm pode ser criado com LET.

27
00:02:09,660 --> 00:02:15,410
Se voc planeja reatribuir esta varivel, imprima meu nome como uma constante.

28
00:02:15,520 --> 00:02:22,450
E agora, no se esquea de adicionar esta seta entre a lista de argumentos e o corpo da funo agora est limpo e

29
00:02:22,480 --> 00:02:24,610
execute novamente isso, voc ainda ver Max.

30
00:02:24,610 --> 00:02:27,630
Ento, aqui, ele se comporta exatamente da mesma maneira.

31
00:02:27,640 --> 00:02:30,820
Agora, essa palavra-chave  algo que voc ver para o curso.

32
00:02:30,850 --> 00:02:35,060
Torna-se importante uma vez que voc adiciona funes ao objeto,  claro.

33
00:02:35,140 --> 00:02:40,960
Antes de mais, deixe-me mostrar-lhe algumas alternativas para desinfectar, no entanto, em relao  lista de argumentos.

34
00:02:40,960 --> 00:02:48,370
Para ser preciso se voc receber apenas um argumento, como fazemos aqui, voc tambm pode usar um atalho de omitir os

35
00:02:48,430 --> 00:02:49,850
parnteses  sua volta.

36
00:02:50,020 --> 00:02:56,720
Isso s  vlido para exatamente um argumento, embora no para mais e no para o ltimo aqui.

37
00:02:56,740 --> 00:03:04,170
Voc ainda ter o mesmo resultado se voc tiver uma funo que no recebe argumentos.

38
00:03:04,180 --> 00:03:06,270
Esta no  uma sintaxe vlida.

39
00:03:06,340 --> 00:03:11,750
Voc precisa passar um par de parnteses vazios como este.

40
00:03:11,860 --> 00:03:15,600
Se executarmos isso agora, ainda vemos Max.

41
00:03:15,610 --> 00:03:19,080
Ento, isso funciona se voc tiver mais de um argumento.

42
00:03:19,090 --> 00:03:20,740
Voc tambm precisa de parnteses.

43
00:03:20,740 --> 00:03:23,410
Ento o nome e a idade assim no funcionaro.

44
00:03:23,470 --> 00:03:26,950
Voc precisar envolver isso entre parnteses.

45
00:03:26,950 --> 00:03:33,550
E agora voc poderia exibir nome e idade e passar por ambos como argumentos aqui.

46
00:03:33,910 --> 00:03:38,310
Ento, estas so duas sintaxes diferentes que voc pode ver em relao aos argumentos.

47
00:03:38,380 --> 00:03:40,000
Existe tambm uma alternativa.

48
00:03:40,000 --> 00:03:41,870
Em relao ao corpo da funo.

49
00:03:41,950 --> 00:03:47,780
Ento, no lado direito da seta, obviamente, muitas funes apenas retornam algo.

50
00:03:48,010 --> 00:03:58,920
Ento, digamos aqui que realmente queremos multiplicar algo e ns ganhamos um nmero como argumento.

51
00:03:58,920 --> 00:04:08,490
Agora queremos retornar o nmero de vezes para, obviamente, o que podemos fazer  que podemos consolar bloqueado o resultado de

52
00:04:08,490 --> 00:04:09,180
multiplicar.

53
00:04:09,180 --> 00:04:12,690
Ento Watts retornou por multiplicar e passou para aqui.

54
00:04:12,870 --> 00:04:16,620
Se eu j esclarecer e executar isso, devemos ver quatro e ns fazemos.

55
00:04:16,740 --> 00:04:24,960
no seu corpo de funo  retornado e voc no tem outro cdigo l, voc pode omitir as chaves de Cauley

56
00:04:24,960 --> 00:04:35,010
e escrever isso em uma linha e ento voc tem que admitir que a palavra-chave de retorno  muito curta questo de escrever esta funo.

57
00:04:35,010 --> 00:04:39,670
Se voc tiver este caso em que tudo o que voc faz

58
00:04:39,690 --> 00:04:44,820
Ele fica um pouco mais curto se aproveitarmos o atalho de remover os parnteses em

59
00:04:44,820 --> 00:04:46,260
torno do nico argumento.

60
00:04:46,260 --> 00:04:50,310
E agora o que isso faz  que ainda retorna o resultado desse cdigo.

61
00:04:50,310 --> 00:04:54,230
Aqui, simplesmente omitimos a palavra-chave de retorno e ns dois emitimos.

62
00:04:54,450 --> 00:05:00,480
E temos uma maneira muito concisa e curta de escrever uma funo que leva um ou mais

63
00:05:00,480 --> 00:05:01,860
argumentos e retorna algo.

64
00:05:01,860 --> 00:05:05,690
Ento, o desmarque e o funcionamento ainda produzem 4.

65
00:05:06,090 --> 00:05:11,430
Ento, esta  toda a sintaxe que voc pode ver e a funo em geral  algo que voc ver muito.

66
00:05:11,430 --> 00:05:13,540
Voc viu a sintaxe vrios ns.

67
00:05:13,650 --> 00:05:16,020
Voc no precisa se lembrar de todos eles agora.

68
00:05:16,050 --> 00:05:21,240
Apenas esteja ciente de que h diferena no Texas e, se no as usarmos, eles voltaro rapidamente

69
00:05:21,240 --> 00:05:24,960
 sua mente e voc sabe por que usamos uma determinada sintaxe.

