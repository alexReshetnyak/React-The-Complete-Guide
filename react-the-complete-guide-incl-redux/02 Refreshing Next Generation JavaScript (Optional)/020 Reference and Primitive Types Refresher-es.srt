1
00:00:02,190 --> 00:00:07,180
Sepa en las ltimas conferencias que le present algunas de las funciones de javascript de

2
00:00:07,180 --> 00:00:10,240
prxima generacin ms importantes que ver en esos tribunales.

3
00:00:10,270 --> 00:00:12,810
Hay dos cosas que s definitivamente.

4
00:00:12,830 --> 00:00:13,980
Tambin quiero cubrir.

5
00:00:14,020 --> 00:00:20,650
No son javascript de prxima generacin, pero son caractersticas que quizs hayas olvidado u olvidado y son

6
00:00:20,740 --> 00:00:23,190
muy importantes para tener en cuenta.

7
00:00:23,380 --> 00:00:30,220
La primera caracterstica o concepto de JavaScript que estoy hablando es el hecho de que tiene tipos

8
00:00:30,220 --> 00:00:31,870
de referencia y primitivos.

9
00:00:31,870 --> 00:00:37,850
Si creo un nmero como este, entonces dis es un tipo primitivo.

10
00:00:37,900 --> 00:00:44,560
Eso significa que si tambin creo un segundo nombre de nmero y lo configuro igual a este nmero,

11
00:00:44,560 --> 00:00:49,240
entonces crear una copia real del nmero, as que nombrelo, por supuesto.

12
00:00:49,240 --> 00:00:53,930
Ahora si bloqueo esto, todo ser.

13
00:00:54,450 --> 00:00:58,470
Pero habr copiado ese valor uno en dos.

14
00:00:58,710 --> 00:01:06,030
Now numbers string booleans Estos son los llamados tipos primitivos cada vez que reasignas o almacenas una variable

15
00:01:06,090 --> 00:01:07,830
en una variable numrica.

16
00:01:07,860 --> 00:01:12,720
Copiar el valor de los objetos y las matrices son tipos de referencia.

17
00:01:12,720 --> 00:01:14,770
Aunque djame mostrarte lo que quiero decir.

18
00:01:14,910 --> 00:01:23,000
Crean mi objeto personal que solo tiene un nombre aqu y ahora creo una segunda persona y una persona

19
00:01:23,000 --> 00:01:24,940
asignada como valor aqu.

20
00:01:25,250 --> 00:01:27,120
Si el registro de mi consola.

21
00:01:27,140 --> 00:01:35,360
La segunda persona y yo lo ejecutaremos imprimir el mismo valor que la primera persona pero en realidad no habr

22
00:01:35,390 --> 00:01:38,010
copiado a la persona en su lugar.

23
00:01:38,150 --> 00:01:46,490
Persona que el objeto se almacena en la memoria y la persona constante almacenamos un puntero a ese lugar en la memoria.

24
00:01:46,700 --> 00:01:52,030
Y si luego asignamos persona a segunda persona, ese puntero ser copiado.

25
00:01:52,280 --> 00:01:59,450
Podemos ver que este es el caso si cambiamos el nombre de las personas despus de copiarlo.

26
00:01:59,510 --> 00:02:07,400
Con eso esperaras imprimir Max aqu todava una persona con el nombre Max porque copiamos persona lo

27
00:02:07,400 --> 00:02:11,690
almacen en segunda persona y luego cambiaron el nombre.

28
00:02:11,690 --> 00:02:15,200
Sin embargo, si borro y corro, ver el nombre.

29
00:02:15,230 --> 00:02:22,010
Hombre que est aqu aunque estoy imprimiendo la segunda persona as que para una segunda persona el nombre

30
00:02:22,340 --> 00:02:29,190
tambin cambi la razn porque es que simplemente copi el puntero y apunta exactamente al mismo objeto en

31
00:02:29,210 --> 00:02:30,430
memoria que la persona.

32
00:02:30,470 --> 00:02:35,480
Entonces, si cambiamos el nombre en una persona, automticamente lo cambiamos por una segunda persona.

33
00:02:35,480 --> 00:02:36,530
Ahora eso es importante

34
00:02:36,530 --> 00:02:38,850
Tenga en cuenta y es lo mismo para borrar.

35
00:02:38,900 --> 00:02:41,840
Si lo copias entre comillas

36
00:02:41,930 --> 00:02:43,310
Una matriz como esta.

37
00:02:43,430 --> 00:02:45,370
Y luego cambias un elemento de matriz.

38
00:02:45,410 --> 00:02:49,510
Todo cambiar en la llamada matriz copiada.

39
00:02:49,520 --> 00:02:54,540
Esto ser importante en reaccionar porque puede conducir a comportamientos inesperados.

40
00:02:54,590 --> 00:03:02,170
y aplicacin y manipular accidentalmente otro uso del mismo objeto en el lugar natural de la aplicacin.

41
00:03:02,250 --> 00:03:09,140
Si copia objetos o matrices de esta manera, puede manipular un objeto en un lugar

42
00:03:09,170 --> 00:03:16,850
Por lo tanto, aprenderemos tcnicas para copiar esto de forma inmutable, lo que significa que copiamos muertos

43
00:03:16,850 --> 00:03:24,630
copiando realmente el objeto y no solo un puntero de muerto que podemos usar es un operador separado.

44
00:03:24,680 --> 00:03:34,020
Ahora podemos simplemente crear un nuevo objeto de persona aqu y extender las propiedades de la persona.

45
00:03:34,040 --> 00:03:40,580
Esto eliminar las propiedades y los valores de las propiedades del objeto y se agregarn a este

46
00:03:40,580 --> 00:03:45,500
objeto recin creado aqu y crearemos uno nuevo con las llaves Cauley.

47
00:03:45,500 --> 00:03:51,440
Ahora, si lo tengo claro y lo ejecuto, seguimos imprimiendo un objeto con el nombre Mex, aunque

48
00:03:51,440 --> 00:03:55,760
hemos cambiado el nombre manualmente aqu porque ahora realmente creamos una copia real.

49
00:03:55,760 --> 00:03:59,390
Esta es una tcnica a la que volver ms adelante en este curso.

50
00:03:59,390 --> 00:04:05,530
Es importante darse cuenta y tener en cuenta que los objetos y matrices son tipos de referencia.

51
00:04:05,600 --> 00:04:11,010
Si los has asignado, ests copiando el puntero, no el valor.

52
00:04:11,270 --> 00:04:17,690
Si quiere hacer esto de una manera real, tendr que crear un nuevo objeto y simplemente

53
00:04:17,690 --> 00:04:20,950
copiar las propiedades y no todo el objeto.

54
00:04:20,960 --> 00:04:24,230
Eso es algo muy importante a tener en cuenta para el discurso.

