1
00:00:02,220 --> 00:00:08,790
Abbiamo imparato a conoscere le importazioni e le esportazioni e non registrare le funzionalit delle classi di arte javascript di

2
00:00:09,390 --> 00:00:14,190
prossima generazione se provieni da un altro linguaggio di programmazione che potresti gi conoscere.

3
00:00:14,250 --> 00:00:17,880
Le classi sono essenzialmente progetti per oggetti.

4
00:00:17,880 --> 00:00:24,390
Nel nostro caso qui per gli oggetti javascript viene creata una classe con la parola chiave class

5
00:00:24,390 --> 00:00:27,860
e una classe pu avere sia propriet che metodi.

6
00:00:28,110 --> 00:00:33,720
I metodi sono semplicemente funzioni associate a classi in cui le propriet sono variabili che hanno due classi.

7
00:00:33,720 --> 00:00:39,440
Potresti dire che useranno entrambi i corsi di Findus e ovviamente spiegheranno sempre cosa stiamo facendo qui.

8
00:00:39,480 --> 00:00:46,850
Quando aggiungiamo una propriet o un metodo, una classe viene istanziata in questo modo con la nuova parola chiave.

9
00:00:46,980 --> 00:00:50,790
E questo potrebbe ovviamente sembrarti familiare se hai lavorato un po 'con javascript.

10
00:00:50,850 --> 00:00:56,190
Si potrebbe notare dal costruire le funzioni e infatti le classi sono un modo

11
00:00:56,190 --> 00:01:02,520
pi conveniente di creare funzioni di costruzione in modo da creare oggetti javascript con classi come progetti.

12
00:01:02,520 --> 00:01:06,290
Questa  l'idea e le classi supportano tutte l'ereditariet.

13
00:01:06,300 --> 00:01:12,030
Ci significa che hai un'altra classe che erediti dall'acquisizione di tutte le sue propriet e

14
00:01:12,030 --> 00:01:15,140
metodi e potenzialmente aggiungendo nuove propriet e metodi.

15
00:01:15,350 --> 00:01:17,110
Anche se potrebbe sembrarti familiare.

16
00:01:17,250 --> 00:01:19,450
Potresti notare dai prototipi.

17
00:01:19,470 --> 00:01:21,860
Diamo un'occhiata alle classi in azione.

18
00:01:22,260 --> 00:01:24,160
Creiamo una nuova classe qui.

19
00:01:24,270 --> 00:01:27,310
Tutto il nome di persona proprio cos.

20
00:01:27,330 --> 00:01:30,570
Quindi hai parentesi graffe per contrassegnare il corpo della classe.

21
00:01:30,690 --> 00:01:38,070
E ora possiamo iniziare a utilizzare le propriet ora nella sua forma pi semplice o le propriet aggiunte aggiungendo

22
00:01:38,070 --> 00:01:41,760
un costruttore che  un metodo di funzione predefinito.

23
00:01:41,820 --> 00:01:47,490
 possibile aggiungere a qualsiasi classe che verr eseguita ogni volta che si crea un'istanza della classe e il

24
00:01:47,490 --> 00:01:52,470
metodo viene creato solo con il nome delle parentesi di Meffert e quindi chiamare le parentesi.

25
00:01:52,860 --> 00:01:59,070
E poi ci possiamo ora impostare le propriet con questa parola chiave e potremmo scrivere questo nome uguale

26
00:01:59,070 --> 00:02:00,290
a max, per esempio.

27
00:02:00,750 --> 00:02:02,590
Possiamo anche aggiungere un metodo.

28
00:02:02,880 --> 00:02:12,720
Stampa il mio nome e l potremmo semplicemente produrre questo nome facendo riferimento alla propriet Name che abbiamo creato.

29
00:02:12,720 --> 00:02:20,250
Ora possiamo usare questa classe per memorizzare un'istanza in una costante con una nuova persona e quindi possiamo

30
00:02:20,260 --> 00:02:21,510
eseguire una persona.

31
00:02:21,510 --> 00:02:23,870
Stampa il mio nome.

32
00:02:24,150 --> 00:02:27,780
Se ora eseguiamo C-Max.

33
00:02:27,950 --> 00:02:30,930
 cos facile usare una classe.

34
00:02:30,960 --> 00:02:33,420
Ora ho detto che anche le classi possono ereditare.

35
00:02:33,450 --> 00:02:43,620
Quindi, possiamo creare un'altra classe umana e l potremmo anche aggiungere un costruttore per impostare questo Chandor uguale a maschio

36
00:02:43,620 --> 00:02:51,060
o femmina, naturalmente, se vuoi, ma che cosa vuoi e potresti farlo al genere

37
00:02:51,060 --> 00:02:55,680
Brint e poi uscire dal blocco della console .

38
00:02:55,770 --> 00:02:57,840
Questo genere.

39
00:02:58,180 --> 00:03:04,420
E ora se una persona si estende allora quella  una parola chiave che si estende di nuovo umana.

40
00:03:04,660 --> 00:03:12,280
sia sulla persona che in quel modo, cos possiamo anche chiamare una persona che stampa il genere in quel modo.

41
00:03:12,730 --> 00:03:17,390
Ora ereditiamo questa propriet e questo metodo stampa il genere e possiamo usarlo

42
00:03:17,390 --> 00:03:21,720
Tuttavia, prima di correre con successo, in realt proviamo.

43
00:03:21,820 --> 00:03:28,480
Avremo un errore che dobbiamo chiamare il super costruttore nella classe derivata e questo  importante.

44
00:03:28,630 --> 00:03:34,320
Se si sta estendendo un'altra classe e si sta implementando la funzione di costruzione che non  necessario.

45
00:03:34,330 --> 00:03:41,280
Ma se lo sei, devi aggiungere Super questo super metodo speciale nel costruttore.

46
00:03:41,320 --> 00:03:47,470
 una parola chiave e semplicemente esegue il costruttore genitore a cui ovviamente devi correggere

47
00:03:47,470 --> 00:03:49,540
per inizializzare la classe genitore.

48
00:03:49,570 --> 00:03:56,340
continuare a dare il genere alla FEMA che non  corretto al 100% qui, ma solo per dimostrare che funziona.

49
00:03:56,350 --> 00:04:02,740
Quindi ora avevi le idee chiare e corri vedrai Max e la posta e ovviamente potresti ora entrare nella tua

50
00:04:02,740 --> 00:04:03,880
classe di persona e

51
00:04:03,940 --> 00:04:08,960
Ora vedi che stampiamo donne anche se stiamo ancora chiamando il genere Brint qui.

52
00:04:09,070 --> 00:04:17,800
Ma  esteso per persona, quindi queste sono le classi e le classi vengono utilizzate reagendo per creare i suoi componenti.

53
00:04:17,800 --> 00:04:20,960
Almeno come  uno dei due modi di creare componenti.

54
00:04:20,980 --> 00:04:26,500
Questo  il modo in cui mi vedrai usare in questo corso ed  importante

55
00:04:26,500 --> 00:04:33,850
capire che le classi sono solo dei progetti per gli oggetti javascript e sono molto simili alle funzioni del costruttore dove

56
00:04:33,880 --> 00:04:35,640
l'ereditariet  paragonabile ai prototipi.

