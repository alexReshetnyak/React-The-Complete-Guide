1
00:00:02,190 --> 00:00:07,180
Conoscere le ultime lezioni che ti ho presentato ad alcune delle pi importanti funzioni

2
00:00:07,180 --> 00:00:10,240
javascript di nuova generazione che vedrai in quei tribunali.

3
00:00:10,270 --> 00:00:12,810
Ci sono due cose che so sicuramente.

4
00:00:12,830 --> 00:00:13,980
Voglio anche coprire.

5
00:00:14,020 --> 00:00:20,650
Non sono javascript di nuova generazione, ma sono caratteristiche che potresti aver perso o dimenticato e sono

6
00:00:20,740 --> 00:00:23,190
molto importanti da tenere a mente.

7
00:00:23,380 --> 00:00:30,220
La prima caratteristica o concetto di javascript di cui sto parlando  il fatto che tu abbia dei tipi

8
00:00:30,220 --> 00:00:31,870
di riferimento e primitivi.

9
00:00:31,870 --> 00:00:37,850
Se creo un numero come questo, dis  un tipo primitivo.

10
00:00:37,900 --> 00:00:44,560
Ci significa che se creo anche un secondo nome numerico e lo imposto uguale a questo

11
00:00:44,560 --> 00:00:49,240
numero, creer effettivamente una copia reale del numero, quindi, ovviamente, il nome.

12
00:00:49,240 --> 00:00:53,930
Ora se blocco questo sar tutto.

13
00:00:54,450 --> 00:00:58,470
Ma avr copiato quel valore uno su due.

14
00:00:58,710 --> 00:01:06,030
Ora numeri stringhe booleani Si tratta dei cosiddetti tipi primitivi ogni volta che si riassegna o si memorizza una

15
00:01:06,090 --> 00:01:07,830
variabile in una variabile numerica.

16
00:01:07,860 --> 00:01:12,720
Copier il valore degli oggetti e gli array sono tipi di riferimento.

17
00:01:12,720 --> 00:01:14,770
Per lascia che ti mostri cosa intendo.

18
00:01:14,910 --> 00:01:23,000
Creano il mio oggetto personale che ha solo un nome qui e ora creo una seconda persona, una persona

19
00:01:23,000 --> 00:01:24,940
assegnata come valore qui.

20
00:01:25,250 --> 00:01:27,120
Se il mio registro della console.

21
00:01:27,140 --> 00:01:35,360
La seconda persona e io eseguiremo stamper lo stesso valore della prima persona, ma in realt

22
00:01:35,390 --> 00:01:38,010
non ha copiato la persona.

23
00:01:38,150 --> 00:01:46,490
Persona l'oggetto  memorizzato nella memoria e la persona costante che memorizziamo un puntatore a quel luogo in memoria.

24
00:01:46,700 --> 00:01:52,030
E se poi assegniamo una persona a una seconda persona, quel puntatore verr copiato.

25
00:01:52,280 --> 00:01:59,450
Possiamo vedere che questo  il caso se cambiamo nome delle persone dopo averlo copiato.

26
00:01:59,510 --> 00:02:07,400
Con questo ti aspetteresti di stampare Max qui ancora una persona con il nome Max perch abbiamo copiato la persona che

27
00:02:07,400 --> 00:02:11,690
l'ha archiviata in seconda persona e l ha cambiato il nome.

28
00:02:11,690 --> 00:02:15,200
Tuttavia se cancello e corro vedrai il nome.

29
00:02:15,230 --> 00:02:22,010
Ti mangio qui anche se sto stampando la seconda persona, quindi per una seconda persona il nome ha cambiato anche

30
00:02:22,340 --> 00:02:29,190
il motivo per cui  che ha appena copiato il puntatore e punta allo stesso identico oggetto in memoria come

31
00:02:29,210 --> 00:02:30,430
fa la persona.

32
00:02:30,470 --> 00:02:35,480
Quindi se cambiamo nome di persona lo cambiamo automaticamente per una seconda persona.

33
00:02:35,480 --> 00:02:36,530
Questo  importante

34
00:02:36,530 --> 00:02:38,850
Tieni presente che  lo stesso per cancellare.

35
00:02:38,900 --> 00:02:41,840
Se lo copi tra virgolette.

36
00:02:41,930 --> 00:02:43,310
Un array come questo.

37
00:02:43,430 --> 00:02:45,370
E quindi modifichi un elemento dell'array.

38
00:02:45,410 --> 00:02:49,510
Tutto cambier nel cosiddetto array copiato.

39
00:02:49,520 --> 00:02:54,540
Questo diventer importante in risposta perch pu portare a comportamenti imprevisti.

40
00:02:54,590 --> 00:03:02,170
e in un'app e manipolare accidentalmente un altro utilizzo dello stesso oggetto nel luogo naturale dell'app.

41
00:03:02,250 --> 00:03:09,140
Se copi oggetti o matrici come questo perch puoi manipolare un oggetto in un posto

42
00:03:09,170 --> 00:03:16,850
Quindi impareremo le tecniche per copiare questo in modo immutabile, il che significa che copiamo i morti

43
00:03:16,850 --> 00:03:24,630
copiando davvero l'oggetto e non solo un puntatore per morto che possiamo usare  un operatore di spread.

44
00:03:24,680 --> 00:03:34,020
Ora possiamo semplicemente creare un nuovo oggetto persona qui e diffondere le propriet della persona.

45
00:03:34,040 --> 00:03:40,580
Questo estrae le propriet e i valori delle propriet dall'oggetto e aggiunto a questo oggetto appena creato

46
00:03:40,580 --> 00:03:45,500
qui e ne creiamo uno nuovo con le parentesi graffe di Cauley.

47
00:03:45,500 --> 00:03:51,440
Ora, se avessi chiarito ed eseguito, stampiamo ancora un oggetto con il nome Mex anche se abbiamo cambiato

48
00:03:51,440 --> 00:03:55,760
il nome in manualmente qui perch ora abbiamo davvero creato una copia reale.

49
00:03:55,760 --> 00:03:59,390
Questa  una tecnica su cui torner pi tardi in questo corso.

50
00:03:59,390 --> 00:04:05,530
 solo importante rendersi conto e tenere a mente che gli oggetti e gli array sono tipi di riferimento.

51
00:04:05,600 --> 00:04:11,010
Se ti assegnano loro stai copiando il puntatore non il valore.

52
00:04:11,270 --> 00:04:17,690
Se vuoi farlo in un modo reale, dovrai creare un nuovo oggetto e copiare

53
00:04:17,690 --> 00:04:20,950
solo le propriet e non l'intero oggetto.

54
00:04:20,960 --> 00:04:24,230
 qualcosa di molto importante da ricordare per il discorso.

