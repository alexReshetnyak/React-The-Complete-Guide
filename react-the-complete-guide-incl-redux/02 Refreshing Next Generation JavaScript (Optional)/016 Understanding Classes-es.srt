1
00:00:02,220 --> 00:00:08,790
Aprendimos sobre las importaciones y exportaciones y no registramos la caracterstica de las clases de arte javascript de

2
00:00:09,390 --> 00:00:14,190
prxima generacin si vienes de algn otro lenguaje de programacin que ya conozcas.

3
00:00:14,250 --> 00:00:17,880
Las clases son esencialmente planos de objetos.

4
00:00:17,880 --> 00:00:24,390
En nuestro caso aqu para los objetos javascript, se crea una clase con la palabra clave class

5
00:00:24,390 --> 00:00:27,860
y una clase puede tener tanto propiedades como mtodos.

6
00:00:28,110 --> 00:00:33,720
Los mtodos son simplemente funciones asociadas a clases donde las propiedades son variables que tienen dos clases.

7
00:00:33,720 --> 00:00:39,440
Se podra decir que usar ambos cursos de Findus y obviamente siempre explicar lo que estamos haciendo aqu.

8
00:00:39,480 --> 00:00:46,850
Cuando agregamos dicha propiedad o mtodo, se crea una instancia de una clase como esta con la nueva palabra clave.

9
00:00:46,980 --> 00:00:50,790
Y esto, por supuesto, puede resultarle familiar si trabaj un poco con javascript.

10
00:00:50,850 --> 00:00:56,190
Puede observar desde la construccin de las funciones y, de hecho, las clases son una

11
00:00:56,190 --> 00:01:02,520
forma ms conveniente de crear funciones de constructor para que pueda crear objetos javascript con clases como blueprints.

12
00:01:02,520 --> 00:01:06,290
Esa es la idea y todas las clases admiten la herencia.

13
00:01:06,300 --> 00:01:12,030
Lo que significa que tiene otra clase que hereda de tomar todas sus propiedades y

14
00:01:12,030 --> 00:01:15,140
mtodos y potencialmente agregar nuevas propiedades y mtodos.

15
00:01:15,350 --> 00:01:17,110
Aunque podra parecerle familiar.

16
00:01:17,250 --> 00:01:19,450
Puede notar de prototipos.

17
00:01:19,470 --> 00:01:21,860
Echemos un vistazo a las clases en accin.

18
00:01:22,260 --> 00:01:24,160
Vamos a crear una nueva clase aqu.

19
00:01:24,270 --> 00:01:27,310
Toda persona de nombre as como as.

20
00:01:27,330 --> 00:01:30,570
Luego tienes llaves para marcar el cuerpo de la clase.

21
00:01:30,690 --> 00:01:38,070
Y ahora podemos comenzar a usar propiedades ahora en su forma ms simple o propiedades aadidas al agregar

22
00:01:38,070 --> 00:01:41,760
un constructor que es un mtodo de funcin predeterminado.

23
00:01:41,820 --> 00:01:47,490
Puede agregar a cualquier clase que se ejecutar cada vez que crea una instancia de la clase y el mtodo

24
00:01:47,490 --> 00:01:52,470
se crea simplemente con el nombre de los parntesis de Meffert y luego llame a las llaves.

25
00:01:52,860 --> 00:01:59,070
Y luego, ahora podemos configurar propiedades con esta palabra clave y podramos escribir este nombre igual a

26
00:01:59,070 --> 00:02:00,290
mximo, por ejemplo.

27
00:02:00,750 --> 00:02:02,590
Tambin podemos agregar un mtodo.

28
00:02:02,880 --> 00:02:12,720
Imprima mi nombre y all podramos simplemente generar este nombre refirindonos a la propiedad Name que creamos.

29
00:02:12,720 --> 00:02:20,250
Ahora podemos usar esta clase para almacenar una instancia en una constante con una nueva persona y luego podemos

30
00:02:20,260 --> 00:02:21,510
ejecutar una persona.

31
00:02:21,510 --> 00:02:23,870
Imprimir mi nombre

32
00:02:24,150 --> 00:02:27,780
Si ahora vamos a ejecutar nosotros C-Max.

33
00:02:27,950 --> 00:02:30,930
As de fcil podemos usar una clase.

34
00:02:30,960 --> 00:02:33,420
Ahora dije que las clases tambin pueden heredar.

35
00:02:33,450 --> 00:02:43,620
Entonces, lo que podemos hacer es crear otra clase humana y all tambin podramos agregar un constructor para establecer este Chandor igual

36
00:02:43,620 --> 00:02:51,060
a masculino o femenino, por supuesto, si quieres, pero lo que quieras y podras en el

37
00:02:51,060 --> 00:02:55,680
gnero Brint y luego bloquear la consola de salida. .

38
00:02:55,770 --> 00:02:57,840
Este genero

39
00:02:58,180 --> 00:03:04,420
Y ahora si una persona se extiende, entonces esa es una palabra clave que nuevamente se extiende a los humanos.

40
00:03:04,660 --> 00:03:12,280
usar ambos en la persona para que tambin podamos llamar a una persona que imprima el gnero de esa manera.

41
00:03:12,730 --> 00:03:17,390
Ahora heredamos esta propiedad y este mtodo imprime el gnero y tambin podemos

42
00:03:17,390 --> 00:03:21,720
Sin embargo, antes de ejecutar con xito, en realidad vamos a intentarlo.

43
00:03:21,820 --> 00:03:28,480
Obtendremos el error de que debemos llamar al superconstructor en la clase derivada y eso es importante.

44
00:03:28,630 --> 00:03:34,320
Si est ampliando otra clase y est implementando el constructor, no es necesario.

45
00:03:34,330 --> 00:03:41,280
Pero si lo eres, entonces tienes que agregar Super este super mtodo especial en el constructor.

46
00:03:41,320 --> 00:03:47,470
Es una palabra clave y simplemente ejecuta el constructor padre al que, por supuesto, tiene que

47
00:03:47,470 --> 00:03:49,540
corregir para inicializar la clase principal.

48
00:03:49,570 --> 00:03:56,340
desafo de gnero en FEMA, que no es 100% correcto aqu, pero solo para mostrar el caso de que esto funciona.

49
00:03:56,350 --> 00:04:02,740
As que ahora que las tienes libres, vers a Max y al correo, y obviamente ahora puedes ingresar a tu clase

50
00:04:02,740 --> 00:04:03,880
personal y establecer el

51
00:04:03,940 --> 00:04:08,960
Ahora ves que imprimimos una hembra a pesar de que todava estamos llamando al gnero Brint aqu.

52
00:04:09,070 --> 00:04:17,800
Pero se extiende por persona, por lo que estas son clases y las clases son utilizadas por reaccionar para crear sus componentes.

53
00:04:17,800 --> 00:04:20,960
Al menos como es una de las dos formas de crear componentes.

54
00:04:20,980 --> 00:04:26,500
As es como me vers usarlo en este curso y es importante comprender que las

55
00:04:26,500 --> 00:04:33,850
clases son solo planos para objetos JavaScript y son muy comparables a las funciones de constructor donde la herencia es

56
00:04:33,880 --> 00:04:35,640
comparable a los prototipos.

