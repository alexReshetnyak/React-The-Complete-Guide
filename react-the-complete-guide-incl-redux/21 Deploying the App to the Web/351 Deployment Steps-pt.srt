1
00:00:02,280 --> 00:00:06,200
Ento, quais etapas precisamos seguir quando implantamos um aplicativo de resposta?

2
00:00:06,480 --> 00:00:11,410
Primeiro de tudo, precisamos verificar e, possivelmente, ajustar o caminho base, isso s

3
00:00:11,430 --> 00:00:16,890
 importante quando usamos o roteador reage l e ao envolver o aplicativo no roteador

4
00:00:16,890 --> 00:00:24,840
do navegador, voc pode definir sua propriedade de nome de base. Isso  sempre necessrio quando seu aplicativo  veiculado a partir de algo

5
00:00:24,840 --> 00:00:25,140
diferente

6
00:00:25,150 --> 00:00:32,040
da rota raiz, o domnio da rota. Se voc est veiculando seu aplicativo do exemplo. com / my-app, voc precisar definir

7
00:00:32,160 --> 00:00:36,920
o nome de base do meu aplicativo para que o roteador funcione corretamente.

8
00:00:37,020 --> 00:00:38,910
Essa  a primeira coisa

9
00:00:38,910 --> 00:00:44,850
importante, a segunda coisa importante  que precisamos construir um projeto otimizado, isso  feito com

10
00:00:44,850 --> 00:00:47,060
um comando conveniente em nosso aplicativo,

11
00:00:47,160 --> 00:00:54,630
npm run build em criar projetos de aplicativos de resposta. Isso construir automaticamente o projeto e otimizar todos os nossos

12
00:00:54,690 --> 00:00:58,920
pacotes de javascript para que tenhamos uma base de cdigo muito

13
00:00:58,920 --> 00:01:04,680
pequena que, na verdade, carregaremos em um servidor, porque obviamente voc deseja enviar o menor cdigo

14
00:01:04,830 --> 00:01:07,800
possvel, pois isso ser o mais rpido possvel.

15
00:01:07,830 --> 00:01:16,650
Agora, outra coisa importante a ter em mente  que seu servidor deve sempre servir ao ndice. arquivo html tambm e especialmente em casos

16
00:01:16,650 --> 00:01:23,910
404, que  necessrio devido  maneira como a Internet funciona.

17
00:01:23,940 --> 00:01:32,350
Se seu usurio visitar meu aplicativo. com / users, o servidor  o primeiro a receber essa rota

18
00:01:32,460 --> 00:01:38,550
e provavelmente o servidor no conhece o caminho / users porque voc o definiu em seu aplicativo reagente.

19
00:01:39,090 --> 00:01:42,240
Agora, para que no jogue um erro, seu aplicativo reagir precisa ter uma chance

20
00:01:42,360 --> 00:01:48,140
de analisar o caminho e isso s acontece se voc retornar o ndice. arquivo html para essa

21
00:01:48,130 --> 00:01:51,520
rota desconhecida,  desconhecido para

22
00:01:51,600 --> 00:01:54,360
o servidor no final.

23
00:01:54,360 --> 00:01:59,190
Portanto, sempre retorne o ndice. html em casos 404,

24
00:01:59,190 --> 00:02:05,160
caso contrrio seus aplicativos de resposta dependentes de roteamento no funcionaro.

25
00:02:05,160 --> 00:02:12,600
Finalmente, carregue os artefatos de construo que voc obtm da segunda etapa, construa e otimize o projeto para um servidor

26
00:02:12,600 --> 00:02:13,390
esttico, voc

27
00:02:13,620 --> 00:02:17,980
no precisa de um servidor executando PHP ou Node ou algo assim.

28
00:02:18,120 --> 00:02:24,570
No final, o que voc vai implantar aqui  um aplicativo de uma nica pgina composto de html e

29
00:02:24,660 --> 00:02:26,440
um pouco de css e

30
00:02:26,490 --> 00:02:34,140
muito javascript, nenhum deles precisa de uma linguagem do lado do servidor, ento um servidor esttico como o AWS S3, pginas do Github

31
00:02:34,230 --> 00:02:41,420
ou Firebase ou qualquer outro servidor servir e voc apenas carregar os artefatos de compilao, no a pasta inteira do projeto.

32
00:02:41,460 --> 00:02:47,200
Os artefatos de construo sero armazenados em uma pasta / build e eu mostrarei isso para

33
00:02:47,610 --> 00:02:53,150
voc em um segundo e isso  tudo.  assim que  fcil implantar seu aplicativo reagente.

34
00:02:53,400 --> 00:02:56,040
Vamos agora fazer isso juntos na prxima aula.

