1
00:00:02,230 --> 00:00:07,720
Przyjrzyjmy si teraz cyklowi ycia komponentu do aktualizacji i

2
00:00:07,720 --> 00:00:09,810
tam musimy rozrni

3
00:00:09,940 --> 00:00:14,350
aktualizacje zainicjowane przez rodzica, zmieniajc rekwizyty i

4
00:00:14,410 --> 00:00:21,040
wyzwalane wewntrznie aktualizacje, zmieniajc stan. Tutaj bdziemy mieli spraw, e rekwizyty zostay zmienione, aby aktualizacja

5
00:00:21,040 --> 00:00:22,500
zostaa uruchomiona przez rodzica.

6
00:00:22,600 --> 00:00:28,600
Pierwsz metod, ktra nastpnie zostanie wykonana, jeli j zaimplementujemy, jest componentWillReceiveProps i otrzymamy

7
00:00:28,600 --> 00:00:31,070
tutaj nadchodzce rekwizyty jako argument.

8
00:00:31,330 --> 00:00:36,670
Jedn rzecz, ktr moemy zrobi w tej metodzie, jest to, e moemy zsynchronizowa nasz

9
00:00:36,670 --> 00:00:42,970
stan lokalny komponentu, jeli mamy go do rekwizytw. Zatem zainicjuj stan za pomoc rekwizytw, abymy potem mogli zmieni stan

10
00:00:43,060 --> 00:00:49,470
w tym komponencie, ale uzyskali stan bazowy w zalenoci od zewntrznych rekwizytw. Jeli nie musisz synchronizowa tego, prawdopodobnie

11
00:00:49,470 --> 00:00:49,750
nie

12
00:00:49,750 --> 00:00:52,210
musisz implementowa tej metody.

13
00:00:52,510 --> 00:00:58,360
To, czego nie powiniene tu robi, jest przyczyn efektw ubocznych, wic nie sigaj do sieci i nie pobieraj danych

14
00:00:58,360 --> 00:01:04,380
lub czego w tym stylu, poniewa spowoduje to ponowne renderowanie komponentu, a co za tym idzie problemy z wydajnoci.

15
00:01:04,510 --> 00:01:06,930
Teraz wolimy WillReceiveProps, wykonujemy

16
00:01:07,030 --> 00:01:10,980
bardzo interesujc metod, shouldComponentUpdate i tam dostaj

17
00:01:11,290 --> 00:01:13,460
dwa argumenty, nadchodzce rekwizyty

18
00:01:13,630 --> 00:01:16,690
i nadchodzcy stan, wic w

19
00:01:16,690 --> 00:01:21,350
zasadzie rekwizyty i stan, ktry uruchomi t aktualizacj.

20
00:01:21,450 --> 00:01:25,960
Jest to metoda, ktra moe rzeczywicie anulowa proces aktualizacji, moesz

21
00:01:25,960 --> 00:01:28,510
zdecydowa, czy ma, czy nie.

22
00:01:28,510 --> 00:01:32,410
Poniewa jeli zwrcisz tutaj prawd, aktualizacja bdzie kontynuowana, jeli

23
00:01:32,590 --> 00:01:37,380
zwrcisz fasz, aktualizacja zostanie zatrzymana. We wszystkich innych metodach nigdy

24
00:01:37,390 --> 00:01:39,040
niczego nie zwracasz.

25
00:01:39,040 --> 00:01:41,630
Ale tutaj moesz zwrci warto true lub false

26
00:01:41,650 --> 00:01:43,100
i to ma wpyw.

27
00:01:43,300 --> 00:01:49,000
Jeli zwrcisz fasz, w zasadzie zachowujesz wydajno, poniewa nie musisz przechodzi przez cay

28
00:01:49,000 --> 00:01:52,060
komponent trzeci i wywoywa renderowanie itd., Ale

29
00:01:52,270 --> 00:01:57,280
oczywicie moe to rwnie oznacza twoj aplikacj, ktra pokazuje niepoprawny stan

30
00:01:57,280 --> 00:01:59,780
lub w zasadzie niepoprawn reprezentacj Dom

31
00:01:59,950 --> 00:02:05,180
jeli uywasz tego w niewaciwy sposb. Teraz przyjrzymy si temu

32
00:02:05,200 --> 00:02:11,140
w nastpnych wykadach, bez zmartwie. Ostatecznie, co powiniene zrobi, to zdecydowa, czy kontynuowa,

33
00:02:11,140 --> 00:02:15,920
czy nie, aby kontynuowa aktualizacj, ale powiniene jak zawsze nie powodowa skutkw ubocznych.

34
00:02:16,910 --> 00:02:22,760
Teraz zamy, e pozwolie, aby proces aktualizacji by kontynuowany, jeli nie,

35
00:02:22,760 --> 00:02:29,600
skoczylimy, ale jeli pozwolie, osigasz componentWillUpdate, tutaj masz rwnie dostp do nadchodzcych rekwizytw

36
00:02:29,600 --> 00:02:31,260
i nadchodzcego stanu.

37
00:02:31,400 --> 00:02:36,990
Ponownie moesz zsynchronizowa swj stan z rekwizytami i nie powiniene powodowa efektw ubocznych.

38
00:02:37,100 --> 00:02:42,980
To moe by lepsze miejsce do zsynchronizowania twojego stanu z rekwizytami, poniewa w przeciwiestwie

39
00:02:42,980 --> 00:02:46,850
do componentWillReceiveProps, tutaj wiesz, e bdziesz kontynuowa aktualizacj, wic

40
00:02:46,880 --> 00:02:52,890
moesz nie wydawa wysiku i zasobw na co, co i tak nie ma znaczenia.

41
00:02:53,420 --> 00:03:00,890
Po pomylnym uruchomieniu, ponownie osigne metod renderowania, a zatem renderowanie jsx i

42
00:03:00,910 --> 00:03:01,960
mwienie reagowao

43
00:03:02,210 --> 00:03:06,880
na to, co bdzie faktycznie wynikiem zaktualizowanego komponentu.

44
00:03:07,340 --> 00:03:13,370
I tak jak zawsze, powiniene przygotowa i ustrukturyzowa swj kod jsx.

45
00:03:13,370 --> 00:03:19,770
Nastpnie reaguj dalej i zaktualizuj wszystkie komponenty podrzdne, wszystkie rekwizyty komponentw potomnych, aby byy

46
00:03:20,730 --> 00:03:26,040
precyzyjne i ktre oczywicie mog wyzwala aktualizacje skadnikw potomnych, tak jak

47
00:03:26,070 --> 00:03:32,030
wywoao to aktualizacj dla tego komponentu, a nastpnie na kocu wywoa skadnik componentDidUpdate.

48
00:03:32,270 --> 00:03:36,620
Nie moesz teraz powodowa efektw ubocznych, podobnie jak w DidMount,

49
00:03:36,830 --> 00:03:41,100
Nie musisz tutaj aktualizowa stanu, poniewa spowoduje to ponowne renderowanie,

50
00:03:41,150 --> 00:03:46,520
wic jest to w zasadzie porwnywalne do elementu componentDidMount tylko w przypadku aktualizacji.

51
00:03:46,520 --> 00:03:52,570
Teraz zaimplementuj te haki, aby zobaczy, kiedy to zostanie wykonane i jak si ono zachowuje.

