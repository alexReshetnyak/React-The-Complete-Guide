1
00:00:02,230 --> 00:00:07,720
Vamos agora dar uma olhada no ciclo de vida do componente para atualizar e, na verdade, precisamos

2
00:00:07,720 --> 00:00:09,810
diferenciar as atualizaes desencadeadas pelo pai.

3
00:00:09,940 --> 00:00:14,350
Ento alterando adereos e atualizaes ativadas internamente.

4
00:00:14,410 --> 00:00:21,040
Ento, mudando de estado aqui, teremos o caso de que os adereos mudaram para que a atualizao

5
00:00:21,040 --> 00:00:22,500
seja acionada pelo pai.

6
00:00:22,600 --> 00:00:28,600
O primeiro mtodo que ento  executado se implementarmos isso, pois o componente receber adereos e obteremos

7
00:00:28,600 --> 00:00:31,070
os adereos futuros como um argumento aqui.

8
00:00:31,330 --> 00:00:36,670
componente, mas obter o Baystate o pintando nos adereos externos se voc no precisa sincronizar isso.

9
00:00:36,670 --> 00:00:42,970
Agora, uma coisa que podemos fazer neste mtodo  que podemos sincronizar o nosso estado local do componente se

10
00:00:43,060 --> 00:00:49,470
tivermos um para os prompts para inicializar um estado com os adereos para que possamos depois mudar o estado

11
00:00:49,470 --> 00:00:49,750
desse

12
00:00:49,750 --> 00:00:52,210
Voc provavelmente no precisa implementar esse mtodo.

13
00:00:52,510 --> 00:00:58,360
O que voc no deve fazer aqui  causar efeitos colaterais para no chegar  Web e buscar dados

14
00:00:58,360 --> 00:01:04,380
ou algo assim porque isso levar a uma renderizao real do componente e, portanto, a dois problemas de desempenho.

15
00:01:04,510 --> 00:01:06,930
Agora, ofter receber suporte.

16
00:01:07,030 --> 00:01:10,980
Um esforo muito interessante  a atualizao do componente da camisa executada.

17
00:01:11,290 --> 00:01:13,460
E, na verdade, temos dois argumentos.

18
00:01:13,630 --> 00:01:16,690
Os prximos adereos e o prximo estado.

19
00:01:16,690 --> 00:01:21,350
Ento, basicamente, os adereos e o estado que desencadearam esta atualizao.

20
00:01:21,450 --> 00:01:25,960
Este  um mtodo que pode realmente cancelar o processo de atualizao.

21
00:01:25,960 --> 00:01:28,510
Voc pode decidir se mostra ou no.

22
00:01:28,510 --> 00:01:32,410
Porque se voc retornar verdadeiro aqui, a atualizao continua.

23
00:01:32,590 --> 00:01:37,380
Se voc retornar falso, a atualizao  interrompida em todos os outros mtodos.

24
00:01:37,390 --> 00:01:39,040
Voc nunca retorna nada.

25
00:01:39,040 --> 00:01:41,630
Mas aqui voc pode retornar verdadeiro ou falso.

26
00:01:41,650 --> 00:01:43,100
Isso tem um impacto.

27
00:01:43,300 --> 00:01:49,000
Se voc retornar falso, voc  um desempenho basicamente seguro porque o re-ato no precisa passar por todo

28
00:01:49,000 --> 00:01:52,060
o componente e chamar render e assim por diante.

29
00:01:52,270 --> 00:01:57,280
Mas, claro, isso tambm pode mostrar a sua aplicao mostrando um estado incorreto

30
00:01:57,280 --> 00:01:59,780
ou, basicamente, ter uma representao Dom incorreta.

31
00:01:59,950 --> 00:02:05,180
Se voc usar isso de maneira errada, agora vamos dar uma olhada nisso na prxima dcada.

32
00:02:05,200 --> 00:02:11,140
continuar ou no continuar com a atualizao, quero dizer, mas voc deve, como sempre, no causar efeitos colaterais.

33
00:02:11,140 --> 00:02:15,920
No h preocupaes no final o que voc deve fazer aqui  decidir se

34
00:02:16,910 --> 00:02:22,760
Agora vamos assumir que voc permitiu que o processo de atualizao continuasse se voc tivesse feito.

35
00:02:22,760 --> 00:02:29,600
Mas se voc permitiu que voc alcance o componente ser atualizado aqui, voc tambm ter acesso aos prximos

36
00:02:29,600 --> 00:02:31,260
eventos e futuros estados.

37
00:02:31,400 --> 00:02:36,990
L novamente, voc pode sincronizar seu estado com adereos e no deve causar efeitos colaterais.

38
00:02:37,100 --> 00:02:42,980
Pode ser um lugar melhor para sincronizar os seus estados com um suporte, porque o componente diferente

39
00:02:42,980 --> 00:02:46,850
receber adereos aqui, voc sabe que vai continuar com a atualizao.

40
00:02:46,880 --> 00:02:52,890
Ento, voc no pode gastar esforo e recursos para algo que, de qualquer forma, no importa.

41
00:02:53,420 --> 00:03:00,890
One Steere executou com xito voc alcanou um mtodo de renderizao novamente, portanto, tornando o J como o

42
00:03:00,910 --> 00:03:01,960
axent dizendo reagir.

43
00:03:02,210 --> 00:03:06,880
O que realmente ser o resultado do seu componente atualizado.

44
00:03:07,340 --> 00:03:13,370
E, novamente, sempre, voc deve preparar e estruturar seu cdigo GSX.

45
00:03:13,370 --> 00:03:19,770
Posteriormente, re-agir ir avanar e atualizar todos os componentes filho todos os adereos de componente filho para

46
00:03:20,730 --> 00:03:26,040
ser preciso e, claro, pode desencadear atualizaes para os componentes filho, assim como ele

47
00:03:26,070 --> 00:03:32,030
desencadeou uma atualizao para este componente e ento ele chamaria componente atualizou no Dnt .

48
00:03:32,270 --> 00:03:36,620
L voc pode agora causar efeitos colaterais, como no Mt. Voc no deve atualizar o estado aqui, pois isso ir desencadear um re renderizado.

49
00:03:36,830 --> 00:03:41,100
Portanto,  basicamente comparvel ao componente que foi montado apenas para o caso de atualizao.

50
00:03:41,150 --> 00:03:46,520
Agora vamos implementar esses ganchos para ver quando  executado e como isso se comporta.

51
00:03:46,520 --> 00:03:52,570
&nbsp;

