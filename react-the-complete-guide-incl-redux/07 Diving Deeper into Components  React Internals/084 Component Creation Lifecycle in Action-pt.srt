1
00:00:02,310 --> 00:00:06,260
Knouted ns obtemos componentes mais slidos e, portanto, podemos realmente ver ganchos do ciclo de vida.

2
00:00:06,360 --> 00:00:11,050
Vamos dar uma olhada nas pessoas do ciclo de vida que aprendemos sobre a criao de componentes 4-D.

3
00:00:11,070 --> 00:00:12,290
Vamos comear com a Apple.

4
00:00:12,300 --> 00:00:13,220
Sim.

5
00:00:13,470 --> 00:00:20,610
L, eu disse que voc tem esse construtor eo construtor recebe os adereos. Este componente obtm

6
00:00:21,060 --> 00:00:22,170
apenas o construtor.

7
00:00:22,170 --> 00:00:27,330
Ento, ainda no podemos chamar o prop em qualquer outro lugar nessa classe de componentes apenas em um construtor.

8
00:00:27,330 --> 00:00:30,720
Poderamos acessar o ttulo de suporte em qualquer outro lugar.

9
00:00:30,750 --> 00:00:33,990
Tem que ser o ttulo deste prop.

10
00:00:34,380 --> 00:00:40,150
Agora, para que isso funcione, ns realmente precisamos chamar os sper adereos Osterweis.

11
00:00:40,350 --> 00:00:42,710
Este processo no ter sucesso.

12
00:00:42,900 --> 00:00:47,030
Eu posso realmente provar isso para voc se eu comentar isso e salvar isso.

13
00:00:47,160 --> 00:00:50,610
Agora, voc v que temos um erro no super-construtor de chamadas.

14
00:00:50,670 --> 00:00:53,930
Ento, o erro j  bastante claro sobre o que est errado.

15
00:00:54,090 --> 00:01:00,630
Agora, antes de implementar o construtor, ele funcionou porque reagiu automaticamente para alcanar o

16
00:01:00,630 --> 00:01:01,470
super construtor.

17
00:01:01,590 --> 00:01:04,640
Ento, para o construtor do componente, estendemos.

18
00:01:04,980 --> 00:01:10,280
Mas se implementarmos o nosso prprio, substituimos o padro de rejeies e, portanto, precisamos fazer

19
00:01:10,400 --> 00:01:15,350
isso para chamar de super e passar no suporte,  um construtor intil agora.

20
00:01:15,420 --> 00:01:19,090
Como a Eastland nos avisa ainda porque no fazemos mais nada.

21
00:01:19,250 --> 00:01:25,980
Ento, deixe-me trancar algo e vou criar uma declarao de bloqueio, onde mais, digo o aplicativo Julias,

22
00:01:25,980 --> 00:01:30,460
para que possamos facilmente ver onde ele vem do interior do construtor.

23
00:01:30,570 --> 00:01:35,390
Isso faz sentido e deixe-me tambm passar adereos aqui.

24
00:01:35,470 --> 00:01:40,690
Agora, se salvarmos isso e as nossas cargas de aplicativos, voc v que recebemos este log de console aqui  direita.

25
00:01:40,720 --> 00:01:41,370
Na verdade sim.

26
00:01:41,410 --> 00:01:42,720
Nesse construtor.

27
00:01:42,820 --> 00:01:46,800
E vemos os adereos como um objeto em que temos esse ttulo.

28
00:01:46,840 --> 00:01:49,760
Agora vamos implementar os outros ganchos tambm.

29
00:01:50,040 --> 00:01:54,350
Isso seria componente ir montar l.

30
00:01:54,360 --> 00:02:06,340
Eu tambm consertarei o log e digo o ponto do aplicativo J. S. O componente interno ir montar assim.

31
00:02:06,530 --> 00:02:08,910
Agora com Dadley  seguro dizer novamente.

32
00:02:09,700 --> 00:02:15,490
E uma vez que isso recarrega voc v que primeiro estamos executando o construtor e o componente ser montado.

33
00:02:15,490 --> 00:02:20,980
Agora, mais uma palavra sobre o construtor pela forma como estamos inicializando o estado aqui.

34
00:02:21,010 --> 00:02:26,160
Agora, como mencionei, voc ainda pode ver fragmentos de cdigo onde o estado  inicializado aqui.

35
00:02:26,290 --> 00:02:28,780
Voc pode fazer isso chamando esse estado.

36
00:02:28,780 --> 00:02:36,430
Certifique-se de chamar a super floresta desse estado e depois inicialize-o assim como o fazemos l.

37
00:02:36,670 --> 00:02:39,190
Ento, esta  basicamente uma sintaxe alternativa.

38
00:02:39,520 --> 00:02:44,650
Eu no recomendo, necessariamente, usar o construtor porque  mais fcil implementar a inicializao do estado,

39
00:02:44,650 --> 00:02:47,680
como fizemos anteriormente, mas  que voc tem um construtor.

40
00:02:47,710 --> 00:02:49,160
Voc pode absolutamente fazer isso.

41
00:02:49,180 --> 00:02:53,040
Isso realmente no faz diferena. O bouffe est bem e o cdigo .

42
00:02:53,080 --> 00:02:59,760
Voc ainda pode ver em alguns outros tutoriais porque, em outras palavras, reagir ou ser preciso em todas

43
00:02:59,770 --> 00:03:03,270
as palavras do projeto criado criado para o ato.

44
00:03:03,460 --> 00:03:10,630
No tivemos acesso a esta maneira relativamente nova de inicializar propriedades em seis classes.

45
00:03:10,660 --> 00:03:16,570
Ento,  por isso que essa  a abordagem que funcionar na maioria dos projetos, pois isso s funcionar em

46
00:03:16,570 --> 00:03:19,750
configuraes modernas de projetos  medida que usamos isso aqui.

47
00:03:19,780 --> 00:03:21,110
Ento com isso voc ver.

48
00:03:21,160 --> 00:03:22,060
Ainda funciona bem.

49
00:03:22,060 --> 00:03:25,210
Ns recebemos o mesmo estado e comportamento do que antes.

50
00:03:25,210 --> 00:03:30,440
Agora a inicializao ficou no construtor de volta ao ciclo de vida de Deese.

51
00:03:30,460 --> 00:03:33,190
Embora tenhamos que processar um mtodo.

52
00:03:33,180 --> 00:03:39,520
Em seguida, se voc lembrar o nosso slide e j temos que implement-lo porque cada componente com estado

53
00:03:39,520 --> 00:03:40,490
precisa ter isso.

54
00:03:40,510 --> 00:03:44,340
 o nico obrigatrio porque precisamos saber o que renderizar.

55
00:03:44,470 --> 00:03:56,640
Ento, eu tambm vou agora consolar Larke the J. S. Dentro de renderizar, salvamos isso, ns tambm vemos o Dr.enthe

56
00:03:56,640 --> 00:04:01,490
que  chamado para posio exatamente como voc viu no slide.

57
00:04:01,820 --> 00:04:04,270
E agora vamos implementar componente foi montado.

58
00:04:04,440 --> 00:04:06,230
Agora vou implementar essa lgrima no topo.

59
00:04:06,230 --> 00:04:11,030
A ordem no importa, mas tipicamente ou muitas vezes voc ver ganchos do ciclo de vida

60
00:04:11,030 --> 00:04:12,530
serem implementados no componente superior.

61
00:04:12,560 --> 00:04:14,400
Monte aqui.

62
00:04:14,780 --> 00:04:18,310
Tambm ir bloquear algo.

63
00:04:18,360 --> 00:04:25,080
J. S. O componente interno montou assim.

64
00:04:25,130 --> 00:04:28,900
Agora, se salvarmos os recursos, tambm podemos ver que isso se chama Lost.

65
00:04:28,900 --> 00:04:30,460
Agora isso  interessante.

66
00:04:30,460 --> 00:04:36,910
Vamos agora adicionar esses ganchos do ciclo de vida ao estado Arbre para componentes tambm.

67
00:04:37,140 --> 00:04:44,150
Ento copie-os e mude para pessoas Cheesus l ou cole-os em um buffer e / ou mtodo.

68
00:04:44,440 --> 00:04:49,660
Eu no quero inicializar o estado aqui porque eu no uso o estado neste componente e preciso

69
00:04:49,690 --> 00:04:51,410
ajustar todos esses bloqueios Konsole agora.

70
00:04:51,550 --> 00:04:59,320
Ento, aqui temos pessoas J. S. e tambm temos isso l e esses dois bloqueios e o mtodo de renderizao.

71
00:04:59,420 --> 00:05:03,350
Eu tambm adicionarei uma declarao de bloqueio de console para a qual voc diz.

72
00:05:03,360 --> 00:05:06,610
J. S. dentro de renderizar.

73
00:05:06,760 --> 00:05:08,230
Agora est ficando interessante.

74
00:05:08,260 --> 00:05:14,380
Se agora salvar isso, vejamos quando todos esses ganchos de ciclo de vida de pessoas so executados.

75
00:05:15,130 --> 00:05:22,940
Ento, vamos como eu disse. Certifique-se de que voc nos salvou e recarregue a pgina e voc v que no as vemos em tudo.

76
00:05:22,980 --> 00:05:27,520
Isso faz sentido, porque ns apenas mostramos esta lista de pessoas condicionalmente.

77
00:05:27,840 --> 00:05:32,060
Assim que eu clicar em pessoas de alternncia, voc as v todas.

78
00:05:32,160 --> 00:05:39,720
Na verdade, o que voc pode ver  que a renderizao da abertura como um continer da raiz Safdar foi recuperada.

79
00:05:39,900 --> 00:05:42,420
O que faz sentido porque o estado mudou.

80
00:05:42,540 --> 00:05:45,800
Ento, lembre-se que ele realmente  executado.

81
00:05:46,140 --> 00:05:52,410
E ento, voc v que a pessoa que o construtor foi executado ir montar o rendimento das

82
00:05:52,440 --> 00:05:54,320
pessoas e o interior montou.

83
00:05:54,330 --> 00:06:03,930
Agora, tambm adicione mtodos Oldys  pessoa J, como acima, para garantir que voc ajuste o bloqueio para que voc possa identific-lo e implementar um log

84
00:06:03,930 --> 00:06:12,960
no mtodo de renderizao l para consertar a pessoa de bloqueio J. S.

85
00:06:13,650 --> 00:06:16,380
dentro de renderizar.

86
00:06:16,390 --> 00:06:19,110
Agora vamos salvar esse arquivo para voc.

87
00:06:19,230 --> 00:06:21,140
E agora vamos ver isso mais uma vez.

88
00:06:21,410 --> 00:06:25,520
Quando o app carrega, s vemos Abdias, mas agora vai ficar lotado.

89
00:06:25,520 --> 00:06:27,510
Uma vez que eu atinge a persistncia do alvo.

90
00:06:27,890 --> 00:06:34,300
Ento, vamos cavar o nosso caminho atravs do primeiro de tudo que ns temos que inicialmente, na verdade, como chamados at aqui o

91
00:06:34,290 --> 00:06:35,210
componente que monta.

92
00:06:35,360 --> 00:06:41,720
Ento, clicamos no boto e neste retiro, no nos rendamos porque, obviamente, o estado mudou, precisa

93
00:06:41,720 --> 00:06:44,680
se lembrar renderizar para ver o que mudou.

94
00:06:44,750 --> 00:06:52,130
Em seguida, executamos os mtodos da Jr da pessoa at renderizar no construtor onde recebemos os adereos

95
00:06:52,130 --> 00:06:53,110
por centavos.

96
00:06:53,120 --> 00:07:01,130
Ento, todo esse componente que renderiza a matriz dentro ir montar e renderizar dentro, mas isso  importante.

97
00:07:01,280 --> 00:07:05,670
Ns no vemos pessoas que perseguem o componente interno que montou.

98
00:07:05,720 --> 00:07:11,170
Em vez disso, continuamos com a pessoa J. S. componente e isso faz todo o sentido.

99
00:07:11,180 --> 00:07:17,160
Lembre-se que deslize este passo depois de renderizar os componentes filho.

100
00:07:17,530 --> 00:07:24,590
Esta  a razo pela qual no vemos o componente ainda montou, mas por que vemos a pessoa

101
00:07:24,600 --> 00:07:34,130
J dentro do construtor e assim por diante porque ns renderizamos a lista e a lista tem 3 por cento de componentes singulares, 

102
00:07:34,130 --> 00:07:44,390
por isso que vemos a pessoa geus todo o caminho at render trs vezes e, depois de vermos a pessoa, Jesus fez montar tempos livres seu

103
00:07:44,390 --> 00:07:46,440
tempo livre este ano.

104
00:07:46,970 --> 00:07:50,630
E h pessoas componentes da Chia que montam.

105
00:07:50,960 --> 00:07:53,960
E esta  exatamente a ordem que voc viu no slide.

106
00:07:53,960 --> 00:08:00,080
Desce o componente e processe o ystem e, neste Meffert, voc teria a chance de executar seu

107
00:08:00,080 --> 00:08:00,980
prprio cdigo.

108
00:08:01,160 --> 00:08:07,430
Mas mesmo com apenas registrar isso,  interessante ver como funciona o re-ato e como

109
00:08:07,430 --> 00:08:09,500
ele realmente cria esse componente.

110
00:08:09,500 --> 00:08:12,160
Agora, a criao  uma coisa interessante.

111
00:08:12,560 --> 00:08:15,890
E, claro, cria componentes funcionais da mesma maneira.

112
00:08:16,010 --> 00:08:18,680
L, simplesmente no podemos adicionar nossos ganchos do ciclo de vida.

113
00:08:18,800 --> 00:08:24,650
Mas se voc no precisa executar nenhuma lgica, no precisa delas, mas criar componentes  uma

114
00:08:24,650 --> 00:08:25,560
coisa interessante.

115
00:08:25,580 --> 00:08:29,900
Vamos agora dar uma olhada no que acontece quando realmente atualizamos os componentes.

116
00:08:29,900 --> 00:08:31,780
Como  que esse ciclo de vida se parece.

