1
00:00:02,320 --> 00:00:08,470
Ento, vamos implementar essas atualizaes relacionadas aos livros e no as implementarei em todos os componentes porque

2
00:00:08,470 --> 00:00:11,490
isso pode levar o registro do console a explodir.

3
00:00:11,590 --> 00:00:12,780
Ento, faa isso pessoalmente.

4
00:00:12,850 --> 00:00:17,470
Sim, todos os implementam abaixo dos relacionados  discreo.

5
00:00:17,530 --> 00:00:23,680
Mas, alm do mais, viabilize se voc est se perguntando por que implementei esses mtodos como este

6
00:00:23,740 --> 00:00:27,830
e no como propriedades com funes aero, voc poderia absolutamente fazer isso.

7
00:00:28,000 --> 00:00:34,870
esses mtodos no so chamados de eventos Dom e, portanto, nunca teremos que usar esse problema de palavra-chave, podemos tambm usar

8
00:00:35,020 --> 00:00:41,350
essa sintaxe, que voc pode saber de uma linguagem de programao para voltar ao aspecto do ciclo de vida.

9
00:00:41,350 --> 00:00:42,610
Mas, uma vez que

10
00:00:42,880 --> 00:00:50,540
Vamos comear com o componente receber adereos e depois receberemos os adereos futuros como argumento.

11
00:00:50,770 --> 00:00:56,850
Agora eu vou adicionar uma declarao de bloqueio do console onde eu imprimirei pessoas atualizadas.

12
00:00:56,890 --> 00:00:59,970
J. S. para que possamos facilmente ver isso.

13
00:01:00,400 --> 00:01:10,390
E todos dizem que o componente interno receber adereos e tambm imprimir os prximos adereos aqui para

14
00:01:10,390 --> 00:01:12,400
que possamos ver isso.

15
00:01:12,400 --> 00:01:15,940
Deixe-me salvar isso, vamos ver o Windass executar um aplicativo realty.

16
00:01:15,940 --> 00:01:20,050
Ns no o vemos aqui porque achamos isso no arquivo de xadrez da pessoa.

17
00:01:20,110 --> 00:01:29,140
Se eu clicar em pessoas de alternncia, vamos analisar o Cancellara aqui, ns conseguimos todos os mtodos relacionados da pessoa

18
00:01:29,140 --> 00:01:37,660
para que as pessoas perseguem o construtor iro montar cadeiras de pessoas, ento, nosso componente de pessoa nica.

19
00:01:37,660 --> 00:01:39,910
Portanto, estes so todos os componentes de pessoa solteira.

20
00:01:41,160 --> 00:01:45,440
E o MT no atualizou o estilo de vida relacionado ao estilo de vida.

21
00:01:45,440 --> 00:01:48,440
Ento deixe-me limpar muito, mas no recarregou a pgina.

22
00:01:48,570 --> 00:01:51,150
E agora vamos mudar algo.

23
00:01:51,480 --> 00:01:58,680
Vamos talvez remover um desses manuales de pessoas aqui para clicar nele, voc ver que o render  recuperado e

24
00:01:58,720 --> 00:02:01,080
na verdade  porque o estado mudou.

25
00:02:01,290 --> 00:02:07,530
E ento, ns vemos nossa atualizao receber um problema, como  chamado onde recebemos os adereos atualizados,

26
00:02:07,530 --> 00:02:13,980
onde temos pessoas que so apenas duas pessoas agora e ento estamos dentro de renderizar pessoas e dos

27
00:02:13,980 --> 00:02:18,390
componentes de duas pessoas que permaneceram porque o DS precisava renderizar .

28
00:02:18,420 --> 00:02:23,030
Voc viu que o mtodo renderizado tambm faz parte do ciclo de vida da atualizao.

29
00:02:23,520 --> 00:02:24,120
Ento  timo.

30
00:02:24,120 --> 00:02:25,570
Vamos adicionar um bairro.

31
00:02:25,680 --> 00:02:33,840
no  apenas um mtodo de convenincia, mas sim onde podemos realmente economizar algum desempenho se usarmos habilmente l, ns receberemos os props

32
00:02:33,840 --> 00:02:40,080
e o estado futuros e tambm adicionarei um bloqueio de console aqui onde digo atualizar pessoas J.

33
00:02:40,080 --> 00:02:51,940
Um mtodo muito importante realmente mostrou a atualizao do componente, que S. dentro da atualizao do componente shirred

34
00:02:52,570 --> 00:02:59,880
e ele ir imprimir os prximos adereos e prxima etapa aqui tambm.

35
00:02:59,890 --> 00:03:04,640
Agora, como eu disse, esse mtodo deve retornar verdadeiro ou falso se ele retornar verdadeiro.

36
00:03:04,840 --> 00:03:08,300
A atualizao continua se ele retorna falso.

37
00:03:08,320 --> 00:03:10,510
Paramos todo o processo.

38
00:03:10,510 --> 00:03:13,410
Agora vamos voltar falso aqui para ver como isso pareceria.

39
00:03:13,720 --> 00:03:18,680
Se eu salvar tudo agora e direciono pessoas que tudo funciona.

40
00:03:18,850 --> 00:03:20,850
Mas agora vamos remover manual novamente.

41
00:03:21,600 --> 00:03:24,870
Eu clico nele, mas voc v que no  atualizado.

42
00:03:24,870 --> 00:03:32,010
Voc pode clicar nele vrias vezes, at mesmo ver o mtodo de atualizao denominado deve atualizar o

43
00:03:32,370 --> 00:03:34,490
componente e degradar suas alteraes.

44
00:03:34,500 --> 00:03:41,280
As pessoas apenas mantm um elemento aqui, porque excluei duas pessoas, no se reflete no DOM, pois

45
00:03:41,610 --> 00:03:47,640
cancelamos o processo de atualizao, de modo que nunca alcanamos os mtodos de renderizao que

46
00:03:47,640 --> 00:03:52,880
seriam importantes para reagem para verificar se o Dom real precisa ser atualizado.

47
00:03:52,890 --> 00:03:55,930
Isso nos mostra o poder da atualizao do componente deve.

48
00:03:56,310 --> 00:04:03,870
Agora, voc pode se perguntar por que devemos retornar a Fallston porque aqui,  claro, quebra o aplicativo.

49
00:04:04,070 --> 00:04:07,960
Mas voc pode ter casos em que voc sabe que nenhuma atualizao  necessria.

50
00:04:08,150 --> 00:04:10,020
E, claro, voc normalmente no codifica.

51
00:04:10,040 --> 00:04:11,590
Verdadeiro ou falso aqui.

52
00:04:11,700 --> 00:04:17,120
Em vez disso, voc verifica isso com base nos prximos problemas e / ou estado.

53
00:04:17,120 --> 00:04:28,690
Ento, aqui, por exemplo, sabemos que s queremos continuar se as prximas pessoas no forem iguais a essas

54
00:04:28,760 --> 00:04:32,420
adereos pessoas que so pessoas idosas.

55
00:04:32,420 --> 00:04:36,050
Agora com este implemento que vamos voltar a pessoas com alternncia.

56
00:04:36,060 --> 00:04:41,890
clicar em uma pessoa, passamos com sucesso por todo o processo porque a matriz de pessoas mudou.

57
00:04:41,980 --> 00:04:42,840
Agora, se voc

58
00:04:43,220 --> 00:04:50,390
E, por sinal, isso s  verdade porque usamos uma abordagem imutvel para atualizar a matriz da pessoa, porque

59
00:04:50,630 --> 00:04:53,410
isso no verifica profundamente a matriz da pessoa.

60
00:04:53,510 --> 00:04:59,500
S v se so objetos diferentes, mas estes so objetos diferentes devido  forma

61
00:04:59,510 --> 00:05:03,620
como atualizamos pessoas aqui em nosso aplicativo como arquivo l.

62
00:05:03,620 --> 00:05:07,280
Quando dissemos pessoas, dissemos a uma nova matriz.

63
00:05:07,430 --> 00:05:10,570
Ento  um objeto totalmente diferente que  importante.

64
00:05:10,640 --> 00:05:14,130
Se uma atualizao de componente aqui no verificar profundamente isso.

65
00:05:14,270 --> 00:05:17,150
Ele apenas compara os objetos raiz.

66
00:05:17,150 --> 00:05:23,100
Os ponteiros para ser precisos, mas estes so diferentes porque recriamos uma nova matriz, mas

67
00:05:23,120 --> 00:05:29,330
isso fora do caminho, o que agora aconteceria se mudarmos alguma outra propriedade que talvez no

68
00:05:29,330 --> 00:05:31,430
seja relevante para este componente.

69
00:05:31,430 --> 00:05:35,450
Isso no provocar uma atualizao e podemos salvar o desempenho aqui.

70
00:05:36,110 --> 00:05:38,170
Portanto,  uma atualizao segura do componente.

71
00:05:38,180 --> 00:05:44,120
cada componente, porque isso significaria que voc deveria usar componentes com estado em todo o lugar e  um

72
00:05:44,120 --> 00:05:49,400
tipo de contra o que eu disse anteriormente sobre voc usando os componentes funcionais o mais rpido possvel.

73
00:05:49,400 --> 00:05:51,360
Voc no precisa necessariamente adicion-lo a

74
00:05:51,680 --> 00:05:58,580
Mas se voc tem um caso de uso em que voc conhece o disconto do ano e recebe muitos adereos, mas na

75
00:05:58,580 --> 00:06:02,050
verdade ele deve reorganizar ou apenas se um desses adereos mudar.

76
00:06:02,120 --> 00:06:08,810
Ento, voc pode transformar seu componente em um estado completo e implementar a atualizao do componente para verificar

77
00:06:08,960 --> 00:06:14,960
se esse nico suporte que  importante para voc mudou ou no e ignora todos os outros.

78
00:06:15,410 --> 00:06:21,870
Ento, com isso, recebemos essa verificao extra e podemos continuar implementando Lokes do ciclo de vida no prximo ciclo

79
00:06:22,040 --> 00:06:26,000
de vida aps a atualizao do componente deve ser atualizada pelo componente.

80
00:06:26,030 --> 00:06:28,650
Agora decidimos que estamos prestes a atualizar aqui.

81
00:06:28,690 --> 00:06:31,770
Eu tambm recebi o prximo estado e adereos.

82
00:06:31,910 --> 00:06:34,930
Ento agora vamos bloquear isso para o cnsul aqui tambm.

83
00:06:35,250 --> 00:06:37,910
So pessoas da atualizao de Lauck.

84
00:06:37,970 --> 00:06:51,480
J. S. O componente interno ir atualizar e registrar os prximos adereos e o prximo estado

85
00:06:51,480 --> 00:06:58,990
aqui com isso, digamos, se isso for deixar ver o tempo real falar sobre o dilogo claro de uma pessoa, excluir a pessoa

86
00:06:59,440 --> 00:07:06,070
que vemos realmente um componente de rendio receber adereos se a atualizao do componente for atualizada e depois O mapa

87
00:07:06,070 --> 00:07:09,100
de renderizao coloca todos os componentes relevantes perfeitos.

88
00:07:09,160 --> 00:07:13,000
Agora, o prximo mtodo do computador ser atualizado.

89
00:07:13,030 --> 00:07:14,540
Ns j conseguimos isso.

90
00:07:14,710 --> 00:07:20,870
O prximo mtodo que h depois  que o componente atualizou seus.

91
00:07:21,020 --> 00:07:31,370
Agora podemos causar efeitos colaterais, assim como qualquer componente foi montado e vou imprimir rapidamente estes dois.

92
00:07:31,550 --> 00:07:38,130
Aqui no temos prximo props no prximo estado, porque muitas vezes  a atualizao, s temos esses adereos

93
00:07:38,360 --> 00:07:44,360
e falsa os novos problemas e o novo estado deve ocorrer adereos e estado atual neste momento.

94
00:07:44,540 --> 00:07:50,690
Ento, isso nos salvou mais uma vez que as pessoas-alvo apagam o bloco eliminam a pessoa e o todo.

95
00:07:50,720 --> 00:07:53,540
O componente Bottom Usie atualizou.

96
00:07:53,630 --> 00:07:55,580
Ento esse  o ciclo de vida de atualizao.

97
00:07:55,660 --> 00:08:02,960
Se a atualizao for acionada de fora devido a problemas de mudana, como  o caso para pessoas, as pessoas

98
00:08:03,030 --> 00:08:03,920
foram alteradas.

