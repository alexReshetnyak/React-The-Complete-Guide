1
00:00:02,250 --> 00:00:07,680
Knouted ns tnhamos um olhar to prximo do estado completo e menos componentes do estado.

2
00:00:07,700 --> 00:00:13,100
Ns devemos ter uma olhada no ciclo de vida do componente, algo que mencionei, mas ns no examinamos mais

3
00:00:13,100 --> 00:00:13,550
de perto.

4
00:00:13,730 --> 00:00:15,990
Ento, qual  o ciclo de vida do componente?

5
00:00:16,280 --> 00:00:22,580
No final, quando reagir a Yates, um componente para ns, que significa instanciar e renderizadores

6
00:00:23,180 --> 00:00:31,840
que, para ns, executa vrias fases de ciclo de vida e podemos definir mtodos em um componente completo de estado somente

7
00:00:31,840 --> 00:00:38,840
em componentes de estado completo porque voc no pode definir mtodos e componentes funcionais podemos encontrar mtodos

8
00:00:39,110 --> 00:00:46,170
que reagem a execuo que nos permite executar algum cdigo durante algumas dessas fases do ciclo de vida.

9
00:00:46,490 --> 00:00:53,940
Vamos dar uma olhada em todos esses mtodos do ciclo de vida dos componentes e vamos ver quando o que  executado.

10
00:00:54,500 --> 00:01:01,790
Importante, como acabei de mencionar, estes so apenas os componentes completos do estado que no esto em menos componentes do estado.

11
00:01:01,930 --> 00:01:04,930
E ns conseguimos os seguintes mtodos.

12
00:01:04,930 --> 00:01:09,370
Agora, estes so muito, como voc pode ver, o componente do construtor ir montar.

13
00:01:09,370 --> 00:01:12,060
A atualizao ser feita pela montagem.

14
00:01:12,280 --> 00:01:18,640
Voc pode saber alguns destes, alguns desses podem ser um pouco intuitivos quando so executados,

15
00:01:18,640 --> 00:01:23,370
mas ainda assim  Analise quando qual desses mtodos  executado.

16
00:01:23,770 --> 00:01:27,280
E vamos dar uma olhada na criao do componente primeiro.

17
00:01:27,640 --> 00:01:34,540
Nem todos esses ganchos do ciclo de vida so executados. Eles no so todos esses mtodos so executados durante a criao.

18
00:01:34,660 --> 00:01:37,210
Somente esses mtodos so executados.

19
00:01:37,420 --> 00:01:42,400
Construtor ir montar o suporte e renderizar.

20
00:01:42,400 --> 00:01:47,520
Agora vamos dar uma olhada no processo do ciclo de vida do componente de criao.

21
00:01:47,590 --> 00:01:55,060
Primeiro, o construtor  executado e o construtor realmente  um padro cada recurso de seis

22
00:01:55,060 --> 00:01:55,600
classes.

23
00:01:55,600 --> 00:02:03,310
No  um mtodo definido por re-agir que o re-ato, no entanto,  que ele cria um componente no final.

24
00:02:03,310 --> 00:02:09,940
Ento, instancia-o e passa por qualquer problema que este componente receba ao construtor.

25
00:02:09,970 --> 00:02:15,790
Portanto, se implementarmos este mtodo de construtor e no precisamos at agora em nosso projeto de demonstrao, no

26
00:02:15,790 --> 00:02:16,580
o fizemos.

27
00:02:16,870 --> 00:02:24,290
Se implementarmos o mtodo do construtor, devemos chamar de super e passar as chamadas deste prop para o

28
00:02:24,290 --> 00:02:26,180
construtor da classe pai.

29
00:02:26,350 --> 00:02:33,310
E uma vez que s podemos implementar este mtodo em componentes com estado, a classe pai 

30
00:02:33,550 --> 00:02:41,680
esse objeto componente que importamos de reagir e chamando super e passando as coisas do prop, como esses adereos, que

31
00:02:41,680 --> 00:02:47,470
ento precisamos usar em qualquer outro lugar no componente, seja preenchido ou gerenciado por reagir.

32
00:02:47,500 --> 00:02:54,700
e passe no suporte se voc implementar o construtor o que mais voc pode fazer aqui e, claro,  opcional.

33
00:02:54,820 --> 00:02:56,430
Ento, sempre ligue para super

34
00:02:56,710 --> 00:03:00,040
Voc pode inicializar o estado no construtor.

35
00:03:00,040 --> 00:03:04,010
Fizemos isso simplesmente definindo uma propriedade do estado.

36
00:03:04,090 --> 00:03:10,390
Mas voc tambm pode definir esta propriedade aqui no construtor e em fragmentos de cdigo mais antigos que tiveram

37
00:03:10,390 --> 00:03:13,460
acesso aos novos recursos de javascript que estvamos usando.

38
00:03:13,570 --> 00:03:14,820
Voc viu esse comentrio.

39
00:03:14,890 --> 00:03:18,270
Inicializou o estado no construtor.

40
00:03:18,490 --> 00:03:22,950
O que voc nunca deve fazer  causar efeitos colaterais.

41
00:03:23,170 --> 00:03:27,600
Quais so os efeitos colaterais, por exemplo, alcanar um servidor web.

42
00:03:27,730 --> 00:03:34,540
Ento, solicita quais retornam e, em seguida, edite o estado dos dados do aplicativo. Veja o efeito colateral.

43
00:03:34,540 --> 00:03:40,180
Voc no deve fazer isso no construtor porque isso pode levar a uma renderizao real da sua aplicao e,

44
00:03:40,330 --> 00:03:42,310
portanto, a dois problemas de desempenho.

45
00:03:42,310 --> 00:03:50,240
Tambm pode levar a que seu estado se torne uma oferta imprevisvel ao construtor, uma srie de

46
00:03:50,240 --> 00:03:55,520
funes  executada, esta funo  o mtodo de montagem do componente.

47
00:03:55,670 --> 00:04:01,430
um mtodo definido por reagir e  uma maneira nica porque estendemos esse componente

48
00:04:01,430 --> 00:04:09,710
do componente da biblioteca de reao, o suporte existir por razes histricas, principalmente, voc realmente no o usa mais frequentemente.

49
00:04:09,710 --> 00:04:11,080
Agora, este 

50
00:04:11,330 --> 00:04:14,090
Se voc us-lo, no o usar para atualizar seu estado.

51
00:04:14,120 --> 00:04:19,840
Voc est fazendo algumas otimizaes do Lassman, mas ainda assim voc no deve causar efeitos colaterais aqui.

52
00:04:19,850 --> 00:04:21,580
Voc no deve chegar  web.

53
00:04:21,740 --> 00:04:25,110
Agora, como mencionei, voc realmente no usa isso muitas vezes.

54
00:04:25,160 --> 00:04:32,740
Ainda existe, mas  provvel que voc no implemente isso em seu aplicativo. O componente da oferta ir montar.

55
00:04:32,990 --> 00:04:34,880
O componente ir renderizar.

56
00:04:34,980 --> 00:04:41,980
Agora, executar o mtodo de renderizao no significa que ele acede ao Dom real.

57
00:04:42,050 --> 00:04:50,460
Eu voltarei para a forma como o re-agir torna o Real Dom e atualiza o Don neste mdulo novamente.

58
00:04:50,540 --> 00:04:56,960
Por enquanto, voc deve saber que renderizar a idia de reagente dos presentes do mtodo de renderizao sobre o

59
00:04:56,960 --> 00:04:58,780
que ele deve renderizar como seria.

60
00:04:58,880 --> 00:05:02,920
Se ele ento chegar ao Dom real e manipul-lo.

61
00:05:02,990 --> 00:05:06,590
Depende do que o Dom real j parece.

62
00:05:06,680 --> 00:05:11,290
Se nenhuma mudana precisa ser feita, ela no vai adiante e pr-processada de qualquer maneira.

63
00:05:11,600 --> 00:05:17,690
Mas o mtodo de renderizao  um passo importante porque ele define claramente como seu aplicativo ou como este componente deve ser

64
00:05:17,690 --> 00:05:21,380
parecido com um H. T. perspectiva masculina.

65
00:05:21,650 --> 00:05:28,400
Ento,  no mtodo de renderizao onde voc prepara e estrutura seu cdigo GSX que define

66
00:05:28,400 --> 00:05:30,800
o contedo obtido por esse componente.

67
00:05:30,890 --> 00:05:37,580
Agora eles esto reativados,  claro, tudo naqueles componentes filho desse componente, porque no final, uma vez

68
00:05:37,580 --> 00:05:44,150
que voc lida renderizar e encontrar seu cdigo GSX, tambm sabe quais componentes voc incluiu, como o

69
00:05:44,150 --> 00:05:47,340
componente da pessoa em nosso projeto de demonstrao .

70
00:05:47,480 --> 00:05:51,260
Ento, vamos seguir em frente e renderizar todos esses componentes filho.

71
00:05:51,260 --> 00:05:58,760
Basicamente, executando esse processo para cada componente filho e, posteriormente, ele chamar componente, o

72
00:05:58,760 --> 00:06:04,730
montante significava basicamente dizer que esse componente foi montado com sucesso.

73
00:06:04,730 --> 00:06:07,110
Agora, o componente foi montado.

74
00:06:07,280 --> 00:06:09,330
Voc pode causar efeitos colaterais.

75
00:06:09,390 --> 00:06:14,540
Este  o ponto de tempo em que voc deseja alcanar a Web, por exemplo, para buscar alguns dados.

76
00:06:14,810 --> 00:06:20,880
O que voc no deve fazer aqui  atualizar o estado, pois isso ir desencadear uma informao pr-renderizada, algo

77
00:06:20,900 --> 00:06:22,660
que voc deve ter em mente.

78
00:06:22,700 --> 00:06:26,480
No ligue para este estado definido no componente que  montado.

79
00:06:26,600 --> 00:06:32,390
desencadear uma renderizao real e se voc est se perguntando o quo exato pareceria chegar  Web e

80
00:06:32,390 --> 00:06:38,510
usar a soluo de que o acesso  Internet faz algo, ele tambm ter uma aparncia neste curso.

81
00:06:38,510 --> 00:06:39,140
Isso ir

82
00:06:39,140 --> 00:06:46,790
Uma vez que comeamos a adicionar acesso  web para nossos aplicativos agora  bom ver este diagrama aqui, mas

83
00:06:46,790 --> 00:06:48,390
ainda  muito abstrato.

84
00:06:48,460 --> 00:06:54,350
Ento, vamos voltar para o nosso projeto e vamos implementar esses ganchos e talvez bloquear algo no

85
00:06:54,620 --> 00:06:58,230
console para que possamos realmente ver o fluxo de nossa aplicao.

