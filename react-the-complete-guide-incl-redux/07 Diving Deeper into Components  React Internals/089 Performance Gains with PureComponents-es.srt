1
00:00:02,260 --> 00:00:07,840
Permtanme volver a la actualizacin del componente debe mostrar que es importante y por qu es posible

2
00:00:08,490 --> 00:00:15,450
que desee usarlo editemos nuestra aplicacin como nuestra plantilla un poco para que tengamos un caso de uso de demostracin o

3
00:00:15,460 --> 00:00:24,360
agreguemos un nuevo cachorro Leboeuf a la cabina este BOTTEN debera siempre muestra el tipo de diferencia de la persona al objetivo, pero luego una cabina

4
00:00:24,360 --> 00:00:26,190
es que no la enciende.

5
00:00:26,220 --> 00:00:27,730
Escndelos si son visibles.

6
00:00:27,750 --> 00:00:30,520
Muestre si no son utilizables, pero siempre mustreselos.

7
00:00:30,570 --> 00:00:35,620
Y si ya son risibles, no hace nada o es lo que pensaras.

8
00:00:36,060 --> 00:00:44,810
crear un nuevo handler de mtodos. Ejecanos todos aqu en lnea con la funcin de flecha que se ejecuta al hacer clic all.

9
00:00:44,810 --> 00:00:50,350
As que vamos a sumar unclick listener y, en aras de la brevedad, no

10
00:00:50,370 --> 00:00:56,760
Llamar a este estado establecido que, por supuesto, puedo hacer en lnea o dos y dije que las personas son verdaderas.

11
00:00:56,910 --> 00:00:58,140
Entonces siempre es verdad.

12
00:00:58,140 --> 00:01:05,560
Una vez ms, la orientacin no siempre es cierta, pero se ver fea pero funcionar aqu.

13
00:01:05,580 --> 00:01:09,930
Ahora djame subir todo el camino hasta que debas actualizar.

14
00:01:09,930 --> 00:01:13,410
Y all deberamos regresar verdad.

15
00:01:13,530 --> 00:01:15,270
Siempre cierto.

16
00:01:15,270 --> 00:01:22,820
Ahora vayamos a Pars y persigamos y tambin comencemos nuestro cheque aqu y en su lugar volvemos cierto aqu tambin.

17
00:01:22,920 --> 00:01:26,820
Que sera el doblez si no implementamos la actualizacin del componente.

18
00:01:27,000 --> 00:01:30,050
Ahora regresemos a nuestra aplicacin all.

19
00:01:30,130 --> 00:01:31,360
Si est cargado

20
00:01:31,730 --> 00:01:36,400
Hagamos clic en Mostrar personas, vemos a toda la persona y se comporta como antes.

21
00:01:36,470 --> 00:01:39,810
Ahora todo se borr para cancelar pero no volv a cargar la pgina.

22
00:01:40,060 --> 00:01:42,810
Djame hacer clic en Mostrar personas nuevamente.

23
00:01:42,940 --> 00:01:49,330
Ahora lo que ves es que pasamos por todos estos ciclos de vida de nuevo si el componente se

24
00:01:49,360 --> 00:01:56,770
actualiza para la apertura S, actualizaremos el renderizado que las personas recibirn, mostraron que la actualizacin se devuelve verdadera, por lo que continuar.

25
00:01:56,770 --> 00:02:04,600
Se actualizar el renderizado de render para todos los componentes de la persona que actan desde todos los componentes y todos

26
00:02:04,600 --> 00:02:07,870
los mtodos de renderizacin aunque no haya cambiado nada.

27
00:02:07,900 --> 00:02:10,150
Las carteras no cambiaron la matriz no cambi.

28
00:02:10,210 --> 00:02:12,070
Nada ha cambiado.

29
00:02:12,260 --> 00:02:19,220
Ahora no confundas esto para volver a actuar al volver a ingresar al dormitorio real del dormitorio del navegador.

30
00:02:19,270 --> 00:02:20,780
No hizo eso.

31
00:02:20,800 --> 00:02:29,140
Puede confirmarlo yendo a los elementos y all, si va a las opciones aqu a la

32
00:02:29,140 --> 00:02:33,050
derecha, vaya a ms herramientas y luego renderice.

33
00:02:33,190 --> 00:02:40,710
Puede activar el parpadeo de pintura para ver las reas que necesitan ser repintadas.

34
00:02:41,050 --> 00:02:47,030
Si haces eso y haces clic en Mostrar personas, vers que solo el botn debe ser repintado para la persona objetivo.

35
00:02:47,230 --> 00:02:54,540
Ver que se repintan muchas cosas, pero para mostrar a las personas esto no sucede, as que no toca el

36
00:02:54,540 --> 00:02:55,220
dormitorio real.

37
00:02:55,290 --> 00:02:57,930
Solo y eso simplemente sucedi porque se cerna sobre l.

38
00:02:57,930 --> 00:03:00,230
Por cierto y lo deshabilitar nuevamente.

39
00:03:00,300 --> 00:03:03,490
Solo lo toc pero eso no toc el dom real.

40
00:03:03,810 --> 00:03:08,690
Y volver a cmo reaccionamos en realidad si decide si tocar el dom real o no.

41
00:03:08,700 --> 00:03:15,150
En las prximas conferencias, pero por ahora podemos saber que no toca necesariamente la Dom real solo si

42
00:03:15,150 --> 00:03:18,960
detecta diferencias con lo que ve en los mtodos de renderizado.

43
00:03:19,080 --> 00:03:22,520
Pero para eso, por supuesto, necesita ejecutar para representar mtodos.

44
00:03:22,620 --> 00:03:25,330
Y como puede ver en la consola, s lo hizo.

45
00:03:25,380 --> 00:03:27,150
Ejecut todos los mtodos de renderizado.

46
00:03:27,390 --> 00:03:30,820
Esto, por supuesto, es un poco ineficiente, especialmente para aplicaciones ms grandes.

47
00:03:30,840 --> 00:03:37,090
Aqu no nos cost mucho, pero si tiene un montn de hijos no, es una lista muy larga de personas

48
00:03:37,530 --> 00:03:41,760
que pueden estar pasando por todos los mtodos de representacin aunque nada haya cambiado.

49
00:03:41,910 --> 00:03:44,820
Realmente puede ser un problema de rendimiento.

50
00:03:44,970 --> 00:03:46,830
Es por eso que una deuda privada.

51
00:03:46,950 --> 00:03:52,450
Tuvimos que registrarnos en caso de que el componente se actualizara y las personas volvieran a ser ciertas nuevamente y volvieran

52
00:03:52,450 --> 00:03:53,620
a presentar la deuda.

53
00:03:53,700 --> 00:03:59,880
Ahora aqu realmente se comprueba si hay una diferencia entre las personas y solo pre-renderizado

54
00:03:59,880 --> 00:04:01,790
si detecta esta diferencia.

55
00:04:01,830 --> 00:04:07,010
Por supuesto, puede agregar el cheque para todas las otras propiedades tambin.

56
00:04:07,260 --> 00:04:16,820
diferente o si la propiedad del nmero modificado del pro siguiente cambiamos la diferencia a la implementacin anterior del cambio.

57
00:04:16,860 --> 00:04:19,670
Entonces, si el properest siguiente es

58
00:04:19,890 --> 00:04:27,670
Entonces, si esto no es igual a este Propst cambiado y finalmente lo mismo para los prximos probs.

59
00:04:27,790 --> 00:04:30,980
Recopila si los datos no son iguales a los props de este accesorio.

60
00:04:30,990 --> 00:04:35,430
Entonces, si alguno de los cambios relevantes del puntal continuamos con la actualizacin.

61
00:04:35,670 --> 00:04:39,270
Pero si no cambia la propiedad, no vamos all.

62
00:04:39,540 --> 00:04:44,160
Como puede ver aqu, vuelva a cargar, haga clic en Mostrar personas.

63
00:04:44,310 --> 00:04:49,920
todos los mtodos de renderizado, por supuesto, que tiene mucho sentido, porque tenemos que renderizar toda

64
00:04:49,960 --> 00:04:55,920
la lista, pero si se borr de nuevo, mostrarn que estamos dentro si el componente se actualiza.

65
00:04:55,950 --> 00:04:56,420
Examinaremos

66
00:04:56,430 --> 00:04:59,820
En realidad s actualizar en realidad ha generado eps.

67
00:04:59,850 --> 00:05:06,630
S, porque siempre devolvemos la verdad y deberamos actualizar los componentes all, pero luego, para las personas

68
00:05:06,630 --> 00:05:10,950
perseguidas, recibiremos la actualizacin de los componentes de props y terminaremos.

69
00:05:10,950 --> 00:05:12,120
Nosotros no continuamos

70
00:05:12,120 --> 00:05:19,070
No llamamos a renderizar 4 personas y componentes de personas individuales porque detectamos en la actualizacin

71
00:05:19,080 --> 00:05:24,190
calculada de personas geus que el Propst no cambi en realidad.

72
00:05:24,540 --> 00:05:31,460
Entonces, nuestro clic aqu no activ una representacin real o una llamada de procesador para todos estos componentes.

73
00:05:31,500 --> 00:05:37,780
Los detuvo personas, por supuesto, puedes hacer lo mismo en Aperture Yes en lugar de volver siempre cierto.

74
00:05:37,980 --> 00:05:41,120
Podemos verificar si algo realmente cambi en nuestro estado.

75
00:05:41,400 --> 00:05:50,510
Entonces, si nuestro siguiente estado persona es uno de los estados que tenemos adems de nuestro estado y muestra personas.

76
00:05:50,710 --> 00:06:01,750
Entonces, si las prximas prisiones estatales no son iguales a las prisiones estatales o si el siguiente estado muestra prisiones no es igual a este

77
00:06:01,750 --> 00:06:11,460
estado muestra personas con este control en su lugar ahora deberamos ver que si hago clic en Mostrar personas pasamos por todos

78
00:06:11,460 --> 00:06:17,630
los pasos correctos l claro para cancelar y hacer clic en Mostrar persona de nuevo.

79
00:06:17,910 --> 00:06:23,640
Solo leemos si el componente se actualiza y eso es todo porque detectamos que no ha cambiado nada.

80
00:06:23,640 --> 00:06:25,210
No necesito continuar

81
00:06:25,770 --> 00:06:31,020
Si elimino a una persona aunque corrija para hacerlo y sigo todos estos pasos.

82
00:06:31,110 --> 00:06:37,740
As que esta es la mejor manera posible de manejar esto ahora porque nos aseguramos de que

83
00:06:37,740 --> 00:06:43,720
solo ejecutemos el proceso de actualizacin si necesitamos hacer eso y omitimos el trabajo innecesario.

84
00:06:43,980 --> 00:06:46,440
Y, por supuesto, son para xitos de rendimiento.

85
00:06:46,560 --> 00:06:52,710
Si realmente no necesitamos hacer actualizaciones porque sabemos lo que el Propst no cambi, no hay necesidad de

86
00:06:52,710 --> 00:06:53,830
hacer todo eso.

87
00:06:53,970 --> 00:06:58,200
Ahora para una verificacin de disco donde vemos las propiedades del estado.

88
00:06:58,320 --> 00:07:03,100
Entonces todas las propiedades en nuestro estado o las propiedades del puntal.

89
00:07:03,240 --> 00:07:07,850
Por lo tanto, cualquier propiedad en el objeto del accesorio si se verifica alguno de estos cambios.

90
00:07:07,860 --> 00:07:10,980
No tenemos que ir por nuestra cuenta si eso es lo que queremos hacer.

91
00:07:11,040 --> 00:07:17,880
Hazlo como una comparacin superficial y digo superficial porque no comprueba profundamente estos objetos.

92
00:07:18,000 --> 00:07:23,540
Solo detecta diferencias porque las actualizamos de manera inmutable, lo cual es importante.

93
00:07:23,910 --> 00:07:30,870
Entonces, si quiere hacer esta verificacin superficial, no tenemos que implementar la actualizacin del componente.

94
00:07:31,140 --> 00:07:38,740
En su lugar, podemos comentar esto y heredar de un tipo diferente de componente un componente puro.

95
00:07:39,030 --> 00:07:45,350
Este es un objeto diferente expuesto por la biblioteca de acciones y es exactamente el mismo que el

96
00:07:45,900 --> 00:07:50,880
componente normal, pero tiene este tipo de control de actualizacin de componentes shoat ya integrado.

97
00:07:50,970 --> 00:07:56,640
Bsicamente, pasar por todas las propiedades de los accesorios y los comparar con sus antiguos cultos

98
00:07:57,030 --> 00:08:02,320
y solo continuar actualizando si detecta diferencias y hace lo mismo con el estado.

99
00:08:02,430 --> 00:08:07,080
As que tambin podemos configurar su componente.

100
00:08:07,410 --> 00:08:13,450
As que vamos a importar su componente all en cierta medida su componente con eso.

101
00:08:13,620 --> 00:08:14,940
Intentemos esto.

102
00:08:16,400 --> 00:08:17,380
Y todava.

103
00:08:17,390 --> 00:08:18,890
Gracias por el mensaje de error

104
00:08:18,890 --> 00:08:22,400
Entonces deberamos eliminar la actualizacin del componente en un componente puro.

105
00:08:22,490 --> 00:08:24,910
Porque de nuevo esto se maneja por reaccin.

106
00:08:25,280 --> 00:08:28,490
Intentemos de nuevo este espectculo.

107
00:08:28,700 --> 00:08:33,110
Al hacer clic de nuevo, no vemos el bloqueo de la consola porque no tenemos nuestro propio mtodo

108
00:08:33,110 --> 00:08:39,040
de actualizacin del componente de la shell, pero veramos los registros de la consola de todas las actualizaciones, ya que puedo probar si cambiamos algo.

109
00:08:39,170 --> 00:08:45,290
Entonces obtenemos el mismo comportamiento que antes, pero ahora optimizado al reaccionar mediante esta implementacin automtica de

110
00:08:45,320 --> 00:08:47,300
la actualizacin del componente should.

111
00:08:47,300 --> 00:08:51,580
En caso de que siempre use componentes puros para toda su aplicacin.

112
00:08:51,800 --> 00:08:57,590
componentes funcionales tan a menudo como sea posible donde no puedas usar esto porque no extiendes nada?

113
00:08:57,590 --> 00:09:00,770
Y cmo tiene sentido si tambin te digo que uses

114
00:09:01,080 --> 00:09:05,540
Bueno, la respuesta es que no debe usar su componente en todas partes en su aplicacin.

115
00:09:05,720 --> 00:09:11,740
Solo debe usarlo si sabe que las actualizaciones pueden no ser necesarias.

116
00:09:11,810 --> 00:09:16,620
Por otro lado, tiene componentes que solo pueden depender de uno o dos accesorios.

117
00:09:16,790 --> 00:09:21,620
Y sabes que cada vez que se activan los actualizadores para este componente, quiero actualizarlo

118
00:09:21,620 --> 00:09:29,270
porque tal vez tenga un par de componentes puros en las primeras posiciones de este componente que impiden la actualizacin de cualquier componente secundario

119
00:09:29,270 --> 00:09:35,090
de todos modos, as que no conviertas todo en un componente puro porque tambin puedes obtener un golpe

120
00:09:35,150 --> 00:09:36,730
de rendimiento all al final.

121
00:09:36,770 --> 00:09:39,380
Esto implementado debe actualizar el componente para usted.

122
00:09:39,530 --> 00:09:43,880
Y compara todos los viejos accesorios y estados con los nuevos accesorios y estados.

123
00:09:43,880 --> 00:09:46,860
Por supuesto, tambin lleva un poco de rendimiento.

124
00:09:47,060 --> 00:09:52,850
Y si lo implementa en algn lugar donde siempre tendr xito porque ya hizo

125
00:09:52,840 --> 00:09:59,350
esta comprobacin en un punto ms alto de estos componentes, entonces realmente est perjudicando su aplicacin.

126
00:09:59,360 --> 00:10:01,730
Entonces, no todo debera ser un componente puro.

127
00:10:01,940 --> 00:10:06,300
Sin embargo, algunos componentes puros estratgicamente colocados tienen mucho sentido.

128
00:10:06,510 --> 00:10:09,010
Ahora para descubrir dnde colocarlos.

129
00:10:09,140 --> 00:10:15,860
Necesitamos comprender mejor cmo la repeticin camina a travs de nuestros componentes y cmo

130
00:10:15,860 --> 00:10:19,420
realmente decide actualizar realmente el verdadero amanecer.

131
00:10:19,430 --> 00:10:21,430
Echemos un vistazo a esto en la prxima conferencia.

