1
00:00:02,240 --> 00:00:06,710
So in the last lecture we created this new project structure,

2
00:00:06,800 --> 00:00:10,780
let's now start filling the cockpit and persons.js file with some life.

3
00:00:10,820 --> 00:00:17,180
I'll start with persons and persons can also be a functional component because I don't need to manage

4
00:00:17,180 --> 00:00:18,400
state in there.

5
00:00:18,680 --> 00:00:26,740
So what I will do is I will again create a constant, persons, which is just a function in the end, a function

6
00:00:26,760 --> 00:00:29,810
that will receive props though.

7
00:00:29,810 --> 00:00:35,740
Now here is the another way we can write this function body though.

8
00:00:35,870 --> 00:00:38,800
Thus far, we always simply return something there,

9
00:00:38,810 --> 00:00:40,630
now we can definitely do that.

10
00:00:40,970 --> 00:00:48,800
But if we only want to return something in that function body due to our project set up and all the ES6 features

11
00:00:48,800 --> 00:00:49,620
we can use

12
00:00:49,670 --> 00:00:57,090
or the next gen features in general, we can use we can shorten this to just return parentheses.

13
00:00:57,350 --> 00:01:00,370
Now this is simply due to the way arrow functions work,

14
00:01:00,530 --> 00:01:08,330
if you write them in one line and this by way does not mean that you can't split the path inside the parentheses

15
00:01:08,330 --> 00:01:09,610
across multiple lines

16
00:01:09,770 --> 00:01:12,610
but you start with that in the same line.

17
00:01:12,740 --> 00:01:18,980
If you only have that one line and not multiple lines as a function body, you can simply start with the

18
00:01:18,980 --> 00:01:23,260
return statement and if you return parentheses, this is what we got here

19
00:01:23,270 --> 00:01:26,750
since you omit the return statement in this one line notation.

20
00:01:26,840 --> 00:01:29,460
So that's the default ES6 arrow function notation,

21
00:01:29,480 --> 00:01:35,280
if it's in one line, this automatically gets returned and you can hence omit the return statement.

22
00:01:35,300 --> 00:01:37,460
Now in here, you directly put your jsx

23
00:01:37,470 --> 00:01:39,200
code.

24
00:01:39,200 --> 00:01:40,940
Now this is not everything,

25
00:01:40,970 --> 00:01:44,900
we of course also have to import react as before

26
00:01:45,410 --> 00:01:52,130
and now we know that props will contain an array of persons which we want to transform into an array

27
00:01:52,130 --> 00:01:56,040
of jsx elements just as we did in app.js

28
00:01:56,300 --> 00:02:04,460
So we can basically copy the code from there, the persons map code here where we map our array into an array

29
00:02:04,550 --> 00:02:07,550
of persons, I'll copy this code,

30
00:02:07,550 --> 00:02:09,490
we still will need to adjust it though

31
00:02:09,650 --> 00:02:12,850
but this will be relatively easy. So in persons.js

32
00:02:12,890 --> 00:02:16,460
here inside my parentheses,

33
00:02:16,460 --> 00:02:21,790
I will call persons map though on the props, props.persons.map

34
00:02:22,130 --> 00:02:29,750
And now here keep in mind, we're already writing jsx. So we can even omit the parentheses here because

35
00:02:29,750 --> 00:02:33,210
we're not having a jsx expression here,

36
00:02:33,230 --> 00:02:38,170
this this normal javascript after all, it will contain jsx in the inside

37
00:02:38,330 --> 00:02:43,410
but that doesn't change the fact that props.persons.map is normal javascript code we're calling.

38
00:02:43,790 --> 00:02:50,750
So with that, we're now returning person here and we need to import that person component, so import person

39
00:02:50,750 --> 00:02:56,870
from ./Person/Person pointing to the person.js file.

40
00:02:56,870 --> 00:03:01,600
With that, we get a very short and concise way of writing this,

41
00:03:01,610 --> 00:03:10,460
We got our persons which we expect to receive on our props and that we still map persons, this array into

42
00:03:10,460 --> 00:03:13,270
an array of jsx elements.

43
00:03:13,280 --> 00:03:19,730
Now one thing we still need to do is we need to adjust our clicked and changed handler because this

44
00:03:19,730 --> 00:03:22,220
deletePersonHandler and this nameChangedHandler,

45
00:03:22,340 --> 00:03:26,760
that won't work anymore because we no longer have these methods here,

46
00:03:26,780 --> 00:03:28,550
we no longer have a class here

47
00:03:28,550 --> 00:03:33,770
this is just a function. Of course you could create a class here and handle the deletions on here

48
00:03:33,950 --> 00:03:40,040
but keep in mind that this should typically be handled in a couple of or very few containers and not

49
00:03:40,040 --> 00:03:41,470
in all your components.

50
00:03:41,720 --> 00:03:47,600
So the way to handle this would be to not call this but props.deletePersonHandler

51
00:03:47,730 --> 00:03:55,310
and props, though again not deletePersonHandler but more likely the name of the property we want to

52
00:03:55,310 --> 00:03:55,840
use

53
00:03:56,000 --> 00:04:06,850
Like props.clicked and maybe props.changed. With these changes in place, let's export our persons function

54
00:04:06,850 --> 00:04:07,480
here,

55
00:04:07,900 --> 00:04:15,450
so export default persons and make sure to save all files.

56
00:04:15,450 --> 00:04:20,570
Now let's go back to the app.js file, there we no longer need this code of course,

57
00:04:20,580 --> 00:04:26,920
instead what we do need here is we simply need to reach out to our persons component.

58
00:04:27,180 --> 00:04:33,600
So let's add this import, import persons from Persons/Persons,

59
00:04:33,600 --> 00:04:39,330
this is our new import path pointing to the persons.js file in the persons folder.

60
00:04:39,900 --> 00:04:43,230
With that we can use persons like this here

61
00:04:43,470 --> 00:04:50,390
and now, we need to pass three pieces of information to that component, the three props we're using, the

62
00:04:50,390 --> 00:04:55,020
persons prop, the click prop and the change prop,

63
00:04:55,190 --> 00:04:59,780
these are the three props we're accessing. Person, name, age and key,

64
00:04:59,780 --> 00:05:04,160
that doesn't really matter because that is the individual person from that persons array we are looping

65
00:05:04,160 --> 00:05:05,330
through

66
00:05:05,330 --> 00:05:13,640
so we only need props persons, clicked and changed. Back in app.js, we should parse that persons

67
00:05:13,910 --> 00:05:19,110
simply is this.state.persons, let me

68
00:05:19,120 --> 00:05:26,570
split these over multiple lines to make it easier to read, clicked should pass a reference to the function you want

69
00:05:26,570 --> 00:05:29,860
to execute when this is fired from the persons component.

70
00:05:30,080 --> 00:05:43,010
So here this will be this.deletePersonHandler and changed, that will be this.nameChangedHandler,

71
00:05:43,020 --> 00:05:45,480
now let's see if that works as it should.

72
00:05:45,480 --> 00:05:48,290
We can now remove that old code down there,

73
00:05:48,300 --> 00:05:53,400
all we have here is our persons component which will render the list and we still conditionally show

74
00:05:53,400 --> 00:05:55,100
it or don't show it.

75
00:05:55,110 --> 00:05:57,090
Make sure all files are saved

76
00:05:57,480 --> 00:06:04,080
and let's reload our application, make sure npm start is still running and toggle the persons,

77
00:06:04,320 --> 00:06:05,870
it does looks pretty good,

78
00:06:06,030 --> 00:06:12,780
we can still work with it as we did before but now if we use the react developer tools and dive into

79
00:06:12,780 --> 00:06:20,670
that, you'll see we did get our persons component here with our individual person or if we reload of course

80
00:06:21,000 --> 00:06:24,180
with all our persons, these three.

81
00:06:24,540 --> 00:06:26,040
So it's working as before

82
00:06:26,160 --> 00:06:31,380
but we improved the structure a little bit because now in the app container, we don't have to worry about

83
00:06:31,380 --> 00:06:33,310
the logic of creating that list,

84
00:06:33,330 --> 00:06:39,660
We outsource this to the persons.js file and it is the best practice to create regular pieces where

85
00:06:39,660 --> 00:06:42,580
each component has a clear focus.

86
00:06:42,600 --> 00:06:45,860
Now the same goes for the cockpit, there

87
00:06:45,870 --> 00:06:49,990
we also want to outsource the logic to the cockpit.js file

88
00:06:50,190 --> 00:06:57,430
and for the cockpit, we basically need to put the h1 tag, the paragraph and the button into its own component.

89
00:06:58,290 --> 00:07:04,530
So we can simply do that by going into the cockpit.js file and there again, this will be a functional

90
00:07:04,530 --> 00:07:07,500
component because it doesn't need to manage its own state,

91
00:07:07,500 --> 00:07:13,010
still following that best practice of using as many functional components as possible.

92
00:07:13,320 --> 00:07:20,640
So here, this will be the cockpit constant which is just an arrow function where we simply returns some jsx

93
00:07:20,660 --> 00:07:29,340
maybe, though there I will probably need more logic due to this the styling of the button, so we can return

94
00:07:29,340 --> 00:07:33,910
a normal function body inside of which we returned our jsx.

95
00:07:34,170 --> 00:07:36,200
We will also receive props here

96
00:07:36,450 --> 00:07:42,800
and as always, we need to import react from react to be able to really render jsx

97
00:07:43,020 --> 00:07:48,170
and finally, we will export our cockpit as the default.

98
00:07:48,330 --> 00:07:49,980
Now what should go in there?

99
00:07:50,070 --> 00:07:52,250
Let's go back to that app.js file,

100
00:07:52,440 --> 00:07:56,960
I already mentioned it's basically this jsx code which should go into our cockpit.

101
00:07:57,180 --> 00:08:03,230
So let's cut it here and let's move it into this return statement here in the cockpit,

102
00:08:03,270 --> 00:08:10,830
now as you see, this of course throws an error because here we return multiple elements without a root

103
00:08:10,890 --> 00:08:11,470
node

104
00:08:11,700 --> 00:08:14,110
and this is not supported here.

105
00:08:14,400 --> 00:08:17,700
Now we will dive into ways of supporting this in the next lectures,

106
00:08:17,700 --> 00:08:20,480
For now, let's simply wrap it into a div

107
00:08:20,580 --> 00:08:27,570
but again we will find our ways of not having to use this div of over the next lectures because react

108
00:08:27,570 --> 00:08:29,820
16 offer us alternatives.

109
00:08:30,060 --> 00:08:33,690
By the way we already see one alternative in persons, there

110
00:08:33,690 --> 00:08:39,440
we return a list and of course this means that we have multiple person object sitting next to each other.,

111
00:08:39,450 --> 00:08:41,080
there is no wrapping div.

112
00:08:41,310 --> 00:08:49,370
But this is okay for react 16, this is a feature which is supported if you return a list, that is ok, you

113
00:08:49,380 --> 00:08:52,830
just may not hard code elements next to each other.

114
00:08:53,100 --> 00:08:55,280
So we'll fix this too in the next lecture

115
00:08:55,320 --> 00:08:56,890
but for now let's go with that,

116
00:08:57,150 --> 00:09:02,780
and of course, we got these assigned classes thing you're in the cockpit where we manage the css classes

117
00:09:02,800 --> 00:09:04,120
the paragraphs should have

118
00:09:04,320 --> 00:09:08,760
and the css class this button should have. We get the code for this in the app.js

119
00:09:08,810 --> 00:09:09,540
file,

120
00:09:09,930 --> 00:09:10,700
there

121
00:09:10,830 --> 00:09:18,900
we now need to grab the code, like const assigned classes where we take the persons length into account.

122
00:09:19,110 --> 00:09:23,430
Let's cut it from app.js and move it into our cockpit function here,

123
00:09:24,190 --> 00:09:28,480
there we of course access the state and this won't work.

124
00:09:28,750 --> 00:09:39,130
So we should expect to get persons as props on our cockpit element, now classes here needs to be imported,

125
00:09:39,210 --> 00:09:43,080
so we need a cockpit.css file

126
00:09:43,550 --> 00:09:54,190
and in there, I will simply store the classes I'm using, red, bold and my app button classes here.

127
00:09:54,390 --> 00:09:56,480
I will move them into the cockpit

128
00:09:56,860 --> 00:10:01,390
but this app class here no longer is correct

129
00:10:01,410 --> 00:10:08,880
instead this should be cockpit probably because we no longer will nest this below this app class, the

130
00:10:08,880 --> 00:10:13,320
app class belongs to the app container and due to component scoping,

131
00:10:13,380 --> 00:10:19,560
if we were to reference app you're in a different component, this would not be the same automatically

132
00:10:19,560 --> 00:10:22,830
created unique identifier so it wouldn't work,

133
00:10:22,830 --> 00:10:26,850
we need to create a custom class for this component which we use.

134
00:10:27,360 --> 00:10:30,380
So with that we get the css classes added here,

135
00:10:30,390 --> 00:10:33,330
we of course need to add that import to the file too.

136
00:10:33,600 --> 00:10:38,270
So import classes from ./cockpit.css

137
00:10:38,760 --> 00:10:41,580
and with that, we can use classes here again.

138
00:10:41,670 --> 00:10:49,970
We also should create a root class here, class name which can be classes.cockpit

139
00:10:50,130 --> 00:10:55,530
and with that we should get scoping of our classes in the cockpit component again.

140
00:10:56,010 --> 00:10:58,850
We still need to set up this button class here,

141
00:10:58,950 --> 00:11:08,490
so back in the app.js file here, we're switching button class conditionally depending on whether we show persons

142
00:11:08,490 --> 00:11:15,810
or not. We'll have to put this logic into our cockpit component and also put the declaration of the button

143
00:11:15,810 --> 00:11:16,960
class there,

144
00:11:17,030 --> 00:11:21,270
so let's remove it from the app.js file and let's move it in there.

145
00:11:21,450 --> 00:11:33,880
Here I will store my red class assignment temporarily and set up a class to be empty at the beginning.

146
00:11:33,920 --> 00:11:39,880
Now this will become important again for switching or for adding this red class to the button and

147
00:11:39,910 --> 00:11:42,360
setting the appropriate styling.

148
00:11:42,360 --> 00:11:49,860
Now with that, we have to add this check where ever we want to add the red class to the button. So we can simply

149
00:11:49,860 --> 00:11:53,000
do this by checking if props

150
00:11:53,100 --> 00:11:57,520
and then we should expect to get this show persons information.

151
00:11:57,840 --> 00:12:07,940
So if props.showPerson, if that's the case then we should execute this class or add this class basically,

152
00:12:07,960 --> 00:12:09,570
set this class.

153
00:12:10,080 --> 00:12:17,000
So now if we analyze this, we expect to get properties defining whether we're showing persons and the

154
00:12:17,040 --> 00:12:17,970
persons.

155
00:12:18,180 --> 00:12:21,960
Maybe we could even just get the persons length but that's totally up to you

156
00:12:22,170 --> 00:12:29,970
so for now I will simply go with the whole person's array which I expect. We should implement a cockpit

157
00:12:29,970 --> 00:12:37,440
component in the app.js file appropriately, so in app.js which got a lot leaner,

158
00:12:37,590 --> 00:12:43,430
we now want to use our cockpit component cockpit. For that

159
00:12:43,440 --> 00:12:46,120
first of all we need to add the import,

160
00:12:46,140 --> 00:12:52,530
So let's quickly do that. Let's import Cockpit with a capital C as for all custom components from the

161
00:12:52,530 --> 00:12:53,890
components folder

162
00:12:53,970 --> 00:12:59,150
and there from the cockpit subfolder and from the cockpit.js file without the file extension

163
00:12:59,160 --> 00:13:07,120
as always. Now we can use cockpit and we're doing so down here and now I mentioned we expect two props

164
00:13:07,120 --> 00:13:16,450
there, showPersons is one and this should simply be this.state.showpersons and the other one is the

165
00:13:16,450 --> 00:13:17,970
persons array itself,

166
00:13:18,190 --> 00:13:24,220
let me split this over multiple lines to make it easier to read, the persons properties should be this.

167
00:13:24,580 --> 00:13:27,110
state.persons.

168
00:13:27,250 --> 00:13:35,740
Now with that, we got a clearly focused app.js file with the cockpit and our persons array, we can

169
00:13:35,980 --> 00:13:40,850
now even clean it up a bit more by removing this wrapping div around the persons array,

170
00:13:40,870 --> 00:13:41,620
wee don't need that,

171
00:13:41,650 --> 00:13:44,770
we can just return persons like this,

172
00:13:44,800 --> 00:13:46,990
it's one component which renders the list,

173
00:13:47,050 --> 00:13:48,990
so we clean this up even a bit more.

174
00:13:49,210 --> 00:13:55,240
And beyond that we only get our handlers, our functions here which manipulate the state and that's exactly

175
00:13:55,240 --> 00:13:57,280
the idea behind such a container.

176
00:13:57,280 --> 00:14:03,310
It matches the state, it manipulates the state. Make sure all files are saved

177
00:14:03,380 --> 00:14:05,360
and let's now see if this still works.

178
00:14:06,160 --> 00:14:08,730
If we reload, we got the toggle persons button

179
00:14:09,510 --> 00:14:10,980
but it's not working.

180
00:14:10,980 --> 00:14:12,180
I know why

181
00:14:12,180 --> 00:14:18,950
because one prop was forgotten, when we click this button, onClick, we try to execute this.togglePersons

182
00:14:18,950 --> 00:14:20,100
Handler.

183
00:14:20,130 --> 00:14:22,770
This of course doesn't work, we don't have this method here,

184
00:14:22,770 --> 00:14:25,500
we're not in a class here, we're in a function.

185
00:14:25,500 --> 00:14:36,690
So here we probably want to execute props clicked and then in our app.js file on our cockpit component

186
00:14:37,230 --> 00:14:44,400
we want to provide this prop clicked which we just defined and there execute togglePersonsHandler.

187
00:14:44,400 --> 00:14:49,590
Now with that, we should have working button again and we do, we can toggle this, you see it gets the

188
00:14:49,590 --> 00:14:52,580
right styling and everything works ask before

189
00:14:52,740 --> 00:14:54,610
but now we get a much better structure

190
00:14:54,630 --> 00:14:59,850
with clearly focused components and this is actually how you should compose and create your react

191
00:14:59,850 --> 00:15:00,900
application.

192
00:15:00,900 --> 00:15:06,960
You should have clear responsibilities of your components, have them narrowly focused, create granular

193
00:15:06,960 --> 00:15:07,830
components,

194
00:15:08,070 --> 00:15:14,940
use as many functional components as possible and have your containers be as lean as possible

195
00:15:14,940 --> 00:15:21,810
when it comes to jsx and styling, some containers may not even have a style file because they only

196
00:15:21,810 --> 00:15:25,040
import other components which then do the styling.

197
00:15:25,050 --> 00:15:31,170
So this is a very lean set up here which allows us to have a flexible and maintainable application.

