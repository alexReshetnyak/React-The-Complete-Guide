1
00:00:02,750 --> 00:00:06,420
Ora, ultimo ma non meno importante, c' un altro cambiamento che voglio mostrarvi.

2
00:00:06,620 --> 00:00:12,770
E in realt cadiamo, otteniamo tutti questi metodi del ciclo di vita che ti spiego da questo

3
00:00:12,820 --> 00:00:19,500
modulo ora che re-act 16 sono gratuiti, in realt scoraggia l'uso di questi e li aggiunge a quelli nuovi.

4
00:00:19,520 --> 00:00:24,470
Ma passo dopo passo quali dovresti provare ad un bianco.

5
00:00:24,590 --> 00:00:32,330
Questi sono i componenti che verranno montati mentre il componente verr aggiornato e il componente ricever gli oggetti di scena.

6
00:00:32,330 --> 00:00:38,370
Ora perch questi sono scoraggiati gratuitamente sono scoraggiati perch spesso sono stati usati in modo errato.

7
00:00:38,720 --> 00:00:45,380
Potresti chiamare lo stato impostato l e probabilmente il primo il primo rendering che potresti fare cose

8
00:00:45,380 --> 00:00:45,980
cattive.

9
00:00:45,980 --> 00:00:51,270
Questo  anche il motivo per cui raramente li utilizziamo gratuitamente in questo corso, come vedrai nel progetto del corso

10
00:00:51,290 --> 00:00:52,510
che stiamo per costruire.

11
00:00:52,520 --> 00:00:56,130
Non sono cos utili e sono facili da usare in modo errato.

12
00:00:56,300 --> 00:00:57,670
Quindi puoi ancora usarli.

13
00:00:57,680 --> 00:01:03,620
Funzioner comunque non  insicuro, ma  scoraggiato riadattare le offerte a quelli nuovi per.

14
00:01:03,850 --> 00:01:14,750
Il primo nuovo hook del ciclo di vita che aggiunge  ottenere lo stato derivato da oggetti di scena e questo otterr i prossimi

15
00:01:15,110 --> 00:01:18,080
oggetti di scena e lo stato precedente.

16
00:01:18,110 --> 00:01:26,310
Ora questo hook del ciclo di vita viene eseguito ogni volta che i tuoi oggetti di scena sono aggiornati e ti d la possibilit di aggiornare il

17
00:01:26,310 --> 00:01:27,970
tuo stato tra di loro.

18
00:01:28,230 --> 00:01:30,150
Ora spesso non vuoi questo.

19
00:01:30,210 --> 00:01:34,100
Il tuo stato dovrebbe raramente essere abbinato ai tuoi oggetti di scena.

20
00:01:34,140 --> 00:01:39,540
Questi dovrebbero essere due cose indipendenti, ma a volte si ottengono casi in cui si ricevono nuovi oggetti di scena

21
00:01:39,540 --> 00:01:44,130
e si desidera aggiornare il proprio stato locale perch forse si vuole lavorare con quello stato che

22
00:01:44,160 --> 00:01:50,880
si desidera modificare in quel componente prima che un utente faccia clic su un pulsante sicuro e tu commesso lo stato tre componenti nella tua

23
00:01:50,880 --> 00:01:55,560
app e poi lo cambi da qualche altra parte e sono liberi cambier o prop di nuovo.

24
00:01:55,890 --> 00:02:00,150
Quindi lascia semplicemente aggiungere un'istruzione di blocco della console qui.

25
00:02:01,280 --> 00:02:07,770
E siamo dentro per ottenere lo stato derivato dagli oggetti di scena e possiamo produrre qui lo stato precedente.

26
00:02:09,400 --> 00:02:16,120
E ora come ho detto ogni anno dovresti tornare e tu dichiari che questo pu essere oggetto che si unir

27
00:02:16,120 --> 00:02:21,580
al vecchio stato proprio come le chiamate dello stato, ma puoi anche naturalmente restituire il vecchio

28
00:02:21,610 --> 00:02:24,800
stato, nel qual caso mai aggiornato perch prendi sempre l'ultimo.

29
00:02:24,910 --> 00:02:30,070
Ma potresti fare in modo che gli oggetti di scena facciano qualcosa con loro e restituire un nuovo oggetto di stato

30
00:02:30,100 --> 00:02:31,110
che verrebbe invece usato.

31
00:02:31,600 --> 00:02:34,020
Quindi ora abbiamo questo set up.

32
00:02:34,030 --> 00:02:39,820
Una cosa per far funzionare questo  che in realt dobbiamo usare la parola chiave static di fronte a questo perch

33
00:02:39,820 --> 00:02:41,060
 un metodo statico.

34
00:02:41,080 --> 00:02:47,400
Quindi, fondamentalmente un metodo che non  collegato a una singola istanza vorrebbe che se adesso ricarichiamo la nostra app riceviamo

35
00:02:47,470 --> 00:02:52,060
questo avviso perch stiamo usando un nuovo ciclo di vita mentre usiamo anche due vecchi.

36
00:02:52,080 --> 00:02:53,100
Ma va bene.

37
00:02:54,030 --> 00:02:59,520
Pi interessante  che qui vediamo che ottenere lo stato derivato dalla chiamata di prop quando abbiamo

38
00:02:59,520 --> 00:03:03,860
effettivamente caricato la nostra app e questo  ovviamente molto utile da vedere.

39
00:03:03,930 --> 00:03:06,950
Si chiama prima che lo stia effettivamente rendendo.

40
00:03:07,020 --> 00:03:12,870
E prima di montare questo ci d la possibilit di aggiornare il nostro stato proprio prima che passi i testicoli

41
00:03:13,260 --> 00:03:16,860
e legger esecuzione ogni volta che i nostri oggetti di scena cambiano.

42
00:03:16,860 --> 00:03:22,260
Ancora una volta non qualcosa che dovresti usare eccessivamente ma sicuramente bello se hai un componente che ha bisogno di portare

43
00:03:22,260 --> 00:03:24,750
lo stato e gli oggetti di scena in sincronia.

44
00:03:24,750 --> 00:03:31,510
Il secondo nuovo ciclo di vita che  stato aggiunto  ottenere l'istantanea prima dell'aggiornamento.

45
00:03:31,920 --> 00:03:37,790
Ora questo ti permette di ottenere un'istantanea del tuo dormitorio proprio prima che stia per cambiare.

46
00:03:37,800 --> 00:03:44,550
Pertanto, se si apportano alcune modifiche al componente che devono essere modificate in un Dom, l'hook del

47
00:03:44,550 --> 00:03:47,910
ciclo di vita verr eseguito immediatamente prima dell'aggiornamento.

48
00:03:47,910 --> 00:03:53,070
Quindi qui possiamo anche registrare il log su qualcosa che possiamo cancellare con quel nome.

49
00:03:53,460 --> 00:03:59,670
E se lo salviamo e ricarichiamo la nostra app in realt non vediamo nulla qui, ma se

50
00:04:00,780 --> 00:04:08,850
faccio clic su Mostra persone lo vediamo qui ottenere lo snapshot prima dell'aggiornamento e questo viene eseguito subito prima che un componente

51
00:04:09,030 --> 00:04:11,410
eseguisse l'aggiornamento per il componente di acquisizione.

52
00:04:11,430 --> 00:04:17,460
Quindi questo  un ottimo posto per esempio per salvare la posizione corrente di scorrimento di un utente.

53
00:04:17,460 --> 00:04:20,640
Questo pu essere molto utile perch ottiene snapchat prima dell'aggiornamento.

54
00:04:20,670 --> 00:04:27,540
Puoi salvarlo prima delle modifiche all'alba e nel componente di aggiornamento potresti riportare l'utente alla posizione salvata in precedenza,

55
00:04:27,570 --> 00:04:33,030
ad esempio diciamo che hai un elenco di elementi che aggiungi e qui elenchi elementi

56
00:04:33,330 --> 00:04:36,270
puoi salvare posizioni di scorrimento prima che vengano aggiunti.

57
00:04:36,270 --> 00:04:40,710
E qui puoi impostare lo scorrimento dell'utente su quella posizione dopo che sono stati aggiunti.

58
00:04:40,950 --> 00:04:46,020
C' anche questo esatto esempio che vedi nei documenti ufficiali nei post dei blocchi ufficiali

59
00:04:46,020 --> 00:04:48,200
sulla nuova versione per essere precisi l.

60
00:04:48,270 --> 00:04:52,810
Se si fa clic su quello ottiene snapshot prima del collegamento di aggiornamento si ottiene la documentazione dettagliata.

61
00:04:52,920 --> 00:04:56,960
E l vedi quell'esempio con la posizione di scorrimento che viene salvata.

62
00:04:56,970 --> 00:05:00,290
Quindi questa  una bella utility che ora puoi usare anche.

63
00:05:00,480 --> 00:05:01,330
E questo  tutto.

64
00:05:01,440 --> 00:05:04,850
Queste sono grandi novit introdotte da re-act 16 non gratis.

65
00:05:04,950 --> 00:05:10,140
Se stai usando quella parola, per favore gioca con loro e sentiti libero di usarli nel tuo prossimo progetto.

