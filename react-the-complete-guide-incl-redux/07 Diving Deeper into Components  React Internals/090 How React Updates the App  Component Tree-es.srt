1
00:00:02,200 --> 00:00:07,840
Echemos un vistazo a este proceso de renderizado y actualizacin y dnde ubicar nuestros componentes puros.

2
00:00:07,900 --> 00:00:10,180
Considere esta aplicacin de reactivacin.

3
00:00:10,180 --> 00:00:16,060
Tenemos un componente de aplicacin de ruta y luego podramos tener una tienda, un componente de usuario y una

4
00:00:16,060 --> 00:00:18,070
tienda, y los usuarios podran ser contenedores.

5
00:00:18,070 --> 00:00:24,010
Cada uno administrando su estado relevante, estos componentes probablemente tambin tengan componentes secundarios.

6
00:00:24,700 --> 00:00:30,910
Lista y tarjeta para la tienda y usuarios una gratis en el caso de los usuarios.

7
00:00:30,950 --> 00:00:38,420
Ahora la actualizacin que aprender pasa de arriba hacia abajo y solo cuando el estado o Propst cambian.

8
00:00:38,420 --> 00:00:44,840
estado y el componente de la tienda cambian, la lista y la tarjeta probablemente recibirn nuevos accesorios y tambin se actualizarn.

9
00:00:44,840 --> 00:00:46,370
Por lo tanto, si el

10
00:00:46,370 --> 00:00:52,730
Y esto tambin nos da una idea sobre lo que podran ser componentes puros y dnde simplemente no

11
00:00:52,730 --> 00:00:53,660
tiene demasiado sentido.

12
00:00:54,200 --> 00:01:02,150
Si tenemos listas y el carrito dependen de los accesorios que se distribuyen por tienda, quizs tenga sentido implementar la

13
00:01:02,150 --> 00:01:07,500
actualizacin del componente en el caso de la tienda y dejar de actualizar.

14
00:01:07,640 --> 00:01:13,790
Si el estado en realidad no cambi, se nos puede llamar estado, pero las propiedades en el estado siguen siendo las

15
00:01:13,790 --> 00:01:19,940
mismas que antes y, por lo tanto, la lista y la tarjeta no se alcanzarn, por lo que no es necesario.

16
00:01:19,940 --> 00:01:26,330
de nuestra tienda y obviamente lo mismo ocurrira con los usuarios o cualquier otra parte de su aplicacin.

17
00:01:26,330 --> 00:01:33,200
Y convertir una lista y un carro en componentes puros porque tenemos un buen nivel de verificacin en el contenedor

18
00:01:33,260 --> 00:01:40,940
Por lo tanto, tener algunos contenedores donde tenga estos controles podra tener mucho sentido y an podra encontrar casos en los

19
00:01:40,940 --> 00:01:46,940
que sus contenedores no necesiten ese control porque usted sabe que solo llama a dicho estado o

20
00:01:47,150 --> 00:01:53,660
que solo recibe accesorios nuevos si realmente cambiaron entonces. tambin puede dejar fuera la actualizacin del componente o

21
00:01:53,660 --> 00:01:54,750
un componente puro.

22
00:01:54,830 --> 00:01:57,440
Pero muchas veces puede tener sentido.

23
00:01:57,470 --> 00:02:00,470
As es como funciona el renderizado y la actualizacin.

24
00:02:00,470 --> 00:02:07,320
Cmo se actualiza y maneja el rbol de componentes? Reaccione y cmo puede optimizarlo.

25
00:02:07,340 --> 00:02:13,700
Ahora comprendamos cmo reaccionamos para optimizar este proceso de actualizacin para nosotros desde el primer momento, sin golpear la

26
00:02:13,700 --> 00:02:19,730
Dom real todo el tiempo porque, como pudieron ver, hay una gran diferencia entre el mtodo de renderizacin

27
00:02:19,730 --> 00:02:22,940
que se llama y la Dom real que se cambia.

28
00:02:23,150 --> 00:02:25,460
El segundo vistazo a esto en la prxima conferencia.

