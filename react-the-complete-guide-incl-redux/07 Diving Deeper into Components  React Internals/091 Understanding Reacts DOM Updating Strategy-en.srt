1
00:00:02,190 --> 00:00:06,240
How does react update the real dom, the dom and the browser

2
00:00:06,240 --> 00:00:13,950
I mean with that? The render method being called does not immediately also render this to the real dom

3
00:00:14,040 --> 00:00:15,740
the name can be misleading.

4
00:00:15,750 --> 00:00:23,070
This does not mean that it renders it to the dom, render is more a suggestion of what the html should

5
00:00:23,070 --> 00:00:31,170
look like in the end but render can very well be called and lead to the same result as is already displayed,

6
00:00:31,770 --> 00:00:38,770
and that is part of the reason why we use shouldComponentUpdate to prevent unnecessary render calls.

7
00:00:39,120 --> 00:00:46,440
But even if we don't catch an unnecessary render call, maybe a prop did change and still we would render

8
00:00:46,440 --> 00:00:49,370
the same result for whatever reason.

9
00:00:49,650 --> 00:00:57,600
Even then, this does not mean that it immediately hits the real dom and starts rendering it, instead it

10
00:00:57,600 --> 00:01:00,490
first of all does something else.

11
00:01:00,660 --> 00:01:03,460
It compares virtual doms,

12
00:01:03,750 --> 00:01:11,930
it has an old virtual dom and a re-rendered or a future virtual dom. React takes this virtual dom

13
00:01:11,970 --> 00:01:14,920
approach because it's faster than the real dom.

14
00:01:14,940 --> 00:01:20,250
Now a virtual dom simply is a dom representation in javascript,

15
00:01:20,280 --> 00:01:29,580
you can of course represent all html and therefore dom elements and objects in pure javascript, so without

16
00:01:29,580 --> 00:01:31,810
rendering anything to the browser.

17
00:01:32,040 --> 00:01:37,620
And this is what happens here and react basically keeps two copies of the dom,

18
00:01:37,650 --> 00:01:43,860
it has the old virtual dom and then the re-rendered one, the re-rendered one is the one which gets created

19
00:01:43,860 --> 00:01:45,710
when the render method is called.

20
00:01:45,720 --> 00:01:50,760
Now as I mentioned though re-rendering or calling render doesn't immediately update the real dom,

21
00:01:50,940 --> 00:01:52,910
instead react makes a comparison.

22
00:01:53,130 --> 00:01:58,650
It compares the old virtual dom to the new one and it checks if there are any differences.

23
00:01:59,010 --> 00:02:06,300
If it can detect differences it reaches out to the real dom and updates it and even then, it doesn't

24
00:02:06,300 --> 00:02:09,090
re-render the real dom entirely.

25
00:02:09,090 --> 00:02:13,510
It only changes it in the places where differences were detected,

26
00:02:13,560 --> 00:02:19,890
for example if a button text changed, it would only update that text and not re-rendered the whole button

27
00:02:20,020 --> 00:02:26,960
leave alone the whole dom. If no differences were found, then it doesn't touch the real dom, render

28
00:02:26,970 --> 00:02:28,210
did execute,

29
00:02:28,260 --> 00:02:34,020
the comparison was made and that is why shouldComponentUpdate might make sense to prevent this if

30
00:02:34,020 --> 00:02:34,740
it's not needed

31
00:02:34,760 --> 00:02:39,990
because this already of course also cost some resources but nonetheless the real dom is never touched,

32
00:02:39,990 --> 00:02:41,250
you can rely on that.

33
00:02:41,350 --> 00:02:45,110
The real dom will only be touched if there are real differences

34
00:02:45,270 --> 00:02:51,400
and this of course is important because as you might know accessing the dom is really slow,

35
00:02:51,420 --> 00:02:58,650
this is something you want to do as little as possible and hence react has this virtual doms idea, compares

36
00:02:58,650 --> 00:03:04,860
the virtual dons and makes sure that the real dom is only touched if needed.

37
00:03:04,860 --> 00:03:10,350
This is what happens behind the scenes and this is what we can see in our application too. Back in this

38
00:03:10,350 --> 00:03:11,840
application,

39
00:03:11,850 --> 00:03:17,880
we of course have all our checks in place now where shouldComponentUpdate

40
00:03:18,450 --> 00:03:25,680
but what we can still see is that if we inspect anything here and I've clicked toggle persons, clearly

41
00:03:25,690 --> 00:03:27,020
these divs were added,

42
00:03:27,090 --> 00:03:28,980
you saw them flash

43
00:03:28,980 --> 00:03:37,060
but if you watch closely the button and the cockpit div, if I click here, this never flashes because

44
00:03:37,060 --> 00:03:38,650
it's not re-rendered,

45
00:03:38,800 --> 00:03:40,050
this is what I meant.

46
00:03:40,060 --> 00:03:46,840
It doesn't really change yet but the styling changed but the part above the button like this paragraph

47
00:03:46,850 --> 00:03:52,060
here, you see the class of the button changed but the paragraph and the h1 tag on the right,

48
00:03:52,060 --> 00:03:55,050
these never flashed because they never changed.

49
00:03:55,120 --> 00:03:59,080
So they aren't re-rendered, they aren't touched by react at all.

50
00:03:59,080 --> 00:04:00,380
This is what I mean,

51
00:04:00,640 --> 00:04:07,510
the render method for the cockpit was executed otherwise the button class wouldn't be updated.

52
00:04:07,510 --> 00:04:13,720
But still this didn't re-rendered everything, it did do so in the future virtual dom but it didn't

53
00:04:13,720 --> 00:04:21,840
do so in the actual dom because react compared to future virtual dom to the old one and only touched

54
00:04:21,840 --> 00:04:25,170
the real dom in the places where differences were found.

