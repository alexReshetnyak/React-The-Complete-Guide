1
00:00:02,180 --> 00:00:05,820
In the last lecture, you learned how to call set state correctly

2
00:00:05,910 --> 00:00:12,300
if your new state depends on your old state and there is a danger of editing this old state at the same

3
00:00:12,300 --> 00:00:18,430
point of time anywhere else in the application because set state actually runs asynchronously.

4
00:00:18,440 --> 00:00:25,920
Now as we have a good way for setting the state in such cases, we also have a better way of handling

5
00:00:25,920 --> 00:00:29,950
props at least in some use cases this might be better,

6
00:00:29,970 --> 00:00:35,820
mostly if you write components which might be used by other developers during their development process.

7
00:00:36,450 --> 00:00:43,520
You can restrict the types and values you receive for your props, like for person.js,

8
00:00:43,530 --> 00:00:47,290
there we receive four important props,

9
00:00:47,310 --> 00:00:52,500
click, name, age and changed.

10
00:00:52,500 --> 00:01:00,030
Now since it's our application and we test it regularly, we have no danger of passing the wrong values probably

11
00:01:00,600 --> 00:01:08,640
but we can still enforce certain values to really ensure that age always is a string or a number and

12
00:01:08,640 --> 00:01:12,560
the name always is a string or a number, like in our case,

13
00:01:12,610 --> 00:01:14,570
app.js age is a number.

14
00:01:14,700 --> 00:01:19,710
Now if we were to pass a string, our app would still work correctly but maybe we do some calculations

15
00:01:19,710 --> 00:01:23,370
with that and therefore we definitely need a number.

16
00:01:23,520 --> 00:01:29,050
Then we want to make sure that a warning or an error is thrown during development

17
00:01:29,250 --> 00:01:37,050
if a developer uses our component incorrectly. Put in other words, we want to check the types of the incoming

18
00:01:37,050 --> 00:01:40,770
properties to make sure that they are getting used correctly.

19
00:01:40,950 --> 00:01:45,930
And for that there is an extra library or extra package you can add to your react app

20
00:01:45,960 --> 00:01:53,270
so let's do that. I'll do this with the built-in terminal and there I'll run npm install --save to save

21
00:01:53,270 --> 00:01:58,770
the entry in the package.json file and then it's simply called prop types.

22
00:01:58,810 --> 00:02:06,180
This is by the react team just outsourced into its own package and gives us access to some utility

23
00:02:06,180 --> 00:02:09,710
features to check the type of our property.

24
00:02:10,200 --> 00:02:11,780
So here in the person.js file,

25
00:02:11,790 --> 00:02:13,240
we can use it by

26
00:02:13,280 --> 00:02:17,020
first of all importing prop types from that package.

27
00:02:17,100 --> 00:02:19,280
So import prop types.

28
00:02:19,440 --> 00:02:25,380
That's the default export of this package from prop types, like this.

29
00:02:25,380 --> 00:02:33,060
Now how do we use prop types then? You simply use it by going below your class definition then taking

30
00:02:33,060 --> 00:02:34,120
your class,

31
00:02:34,350 --> 00:02:43,070
so person that is the name of this class in the end and there, you now simply add the prop's type

32
00:02:43,070 --> 00:02:44,220
property,

33
00:02:44,240 --> 00:02:51,920
you're basically editing this class after it was defined. Prop types is a javascript object and there you

34
00:02:51,920 --> 00:02:58,180
can now have key value pairs where your keys or properties are the names of the props,

35
00:02:58,220 --> 00:03:05,710
so click name and so on and the values are the conditions, the rules. So here, you could say we have a click

36
00:03:05,720 --> 00:03:09,100
property, conditions about to follow,

37
00:03:09,290 --> 00:03:14,380
we have a name property, an age property and a change property.

38
00:03:14,450 --> 00:03:22,610
Now all the conditions are missing and after this lecture, you'll find an article where I list all available

39
00:03:22,670 --> 00:03:23,290
conditions

40
00:03:23,300 --> 00:03:32,300
you may add and you may use for defining your rulesets. Now for example you could say that click should

41
00:03:32,300 --> 00:03:36,440
be a function, so you can access prop types,

42
00:03:36,440 --> 00:03:45,690
that's this object you're importing from the prop types library and that exposes a couple of different rules

43
00:03:45,720 --> 00:03:47,590
or types you can enforce.

44
00:03:47,700 --> 00:03:55,590
For example func and with that you are saying the value I get passed into my click property has

45
00:03:55,590 --> 00:04:00,750
to be a function which of course makes a lot of sense because we're trying to execute it as a function.

46
00:04:01,920 --> 00:04:03,570
For name,

47
00:04:03,720 --> 00:04:13,320
we might say prop type should be a string and for age, prop types might be a number.

48
00:04:13,610 --> 00:04:19,190
And by the way, there are even more advanced types you could even to define the exact shape of an object

49
00:04:19,200 --> 00:04:20,050
you're receiving,

50
00:04:20,120 --> 00:04:24,850
so which properties it should have and which types the properties of that object should have.

51
00:04:25,040 --> 00:04:26,580
You can get really detailed

52
00:04:26,750 --> 00:04:31,880
and again I strongly recommend having a look at the article after his lecture to learn about all the

53
00:04:31,880 --> 00:04:32,890
possibilities

54
00:04:33,020 --> 00:04:35,960
as there are a lot. So here, changed

55
00:04:35,960 --> 00:04:41,810
maaybe should also be a function and that is a very basic prop type setup.

56
00:04:41,810 --> 00:04:47,750
Now if we go back to the application and reload, go to the console to see any potential error messages,

57
00:04:49,730 --> 00:04:51,410
you'll see everything works.

58
00:04:51,420 --> 00:04:57,870
Now if we try to pass a wrong property though for example by going to the app.js file and setting the

59
00:04:57,930 --> 00:05:06,940
age of Max to 28 as a string, now you see if I click toggle persons, we get an error here,

60
00:05:07,200 --> 00:05:11,810
failed prop type, invalid prop age of type string,

61
00:05:11,880 --> 00:05:13,550
expect that number.

62
00:05:13,620 --> 00:05:15,450
This is exactly what we get there

63
00:05:15,690 --> 00:05:16,980
and why is this helpful to us,

64
00:05:16,980 --> 00:05:20,110
we ensure that we're not receiving wrong props.

65
00:05:20,160 --> 00:05:25,880
And again this is mostly useful if you're working in team, if we are building components which get used by other persons,

66
00:05:25,890 --> 00:05:32,310
by other people and where it's crucial that you get the right props, because maybe sometimes you have props

67
00:05:32,310 --> 00:05:37,680
where it doesn't really matter if it's a string or a number because you're just printing it to the screen

68
00:05:37,700 --> 00:05:38,400
anyways,

69
00:05:38,530 --> 00:05:40,330
In other cases, it might matter.

70
00:05:40,530 --> 00:05:44,200
So you don't have to use prop types in every component you define,

71
00:05:44,340 --> 00:05:49,410
again one reason that speaks against it is that it doesn't work in functional components which you

72
00:05:49,410 --> 00:05:51,650
should use as often as possible though.

73
00:05:51,990 --> 00:05:59,940
But in some root level components, you might want to control which property enters it and which property

74
00:05:59,940 --> 00:06:01,050
you pass on

75
00:06:01,200 --> 00:06:05,200
and again especially important if you work with or for other people.

