1
00:00:02,250 --> 00:00:07,680
Teraz, gdy przyjrzelimy si uwanie komponentom stanowym i bezpastwowcowym, powinnimy spojrze

2
00:00:07,700 --> 00:00:13,100
na cykl ycia komponentw, o czym wspomniaem, ale nie przyjrzelimy si

3
00:00:13,100 --> 00:00:13,550
bliej.

4
00:00:13,730 --> 00:00:15,990
Jaki jest cykl ycia komponentu?

5
00:00:16,280 --> 00:00:22,580
W kocu, gdy reakcja tworzy dla nas komponent, oznacza to tworzenie instancji i

6
00:00:23,180 --> 00:00:31,840
renderers, ktre dla nas przebiega przez wiele faz cyklu ycia i moemy definiowa metody w komponencie stanowym, tylko

7
00:00:31,840 --> 00:00:38,840
w komponentach stanowych, poniewa nie mona definiowa metod i skadnikw funkcjonalnych moemy zdefiniowa metody, ktre

8
00:00:39,110 --> 00:00:46,170
bd reagowa, co pozwoli nam uruchomi jaki kod podczas niektrych z tych faz cyklu ycia.

9
00:00:46,490 --> 00:00:53,940
Rzumy okiem na wszystkie te metody cyklu ycia komponentw i zobaczmy, ktre z nich zostan wykonane.

10
00:00:54,500 --> 00:01:01,790
Wane, jak ju wspomniaem, s one dostpne tylko dla skadnikw stanowych, ktre nie s

11
00:01:01,930 --> 00:01:04,930
elementami bezpastwowymi, i otrzymalimy nastpujce metody.

12
00:01:04,930 --> 00:01:09,370
Teraz to duo, jak wida, konstruktor

13
00:01:09,370 --> 00:01:12,060
componentWillMount, WillUpdate, DidMount, render.

14
00:01:12,280 --> 00:01:18,640
By moe znasz niektre z nich, niektre z nich mog by troch intuicyjne,

15
00:01:18,640 --> 00:01:23,370
gdy zostan wykonane, ale przeanalizujmy jeszcze, ktra z tych metod

16
00:01:23,770 --> 00:01:27,280
jest wykonywana, i najpierw przyjrzyjmy si komponowaniu.

17
00:01:27,640 --> 00:01:34,540
Nie wszystkie te haki cyklu ycia s tam wykonywane, nie wszystkie te metody

18
00:01:34,660 --> 00:01:37,210
s wykonywane podczas tworzenia, tylko

19
00:01:37,420 --> 00:01:42,400
te metody s wykonywane, Konstruktor, WillMount, DidMount i render.

20
00:01:42,400 --> 00:01:47,520
Teraz przyjrzyjmy si bliej procesowi cyklu ycia komponentu kreacji, najpierw

21
00:01:47,590 --> 00:01:55,060
konstruktor zostaje wykonany, a konstruktor faktycznie jest domyln cech klasy ES6, to nie jest

22
00:01:55,060 --> 00:01:55,600
metoda

23
00:01:55,600 --> 00:02:03,310
zdefiniowana przez reakcj, ale reakcja jest taka, e tworzy komponent w end, wic tworzy

24
00:02:03,310 --> 00:02:09,940
go i parsuje na wszelkich rekwizytach, ktre ten komponent otrzymuje do konstruktora.

25
00:02:09,970 --> 00:02:15,790
Jeli wic zaimplementujemy t metod konstruktora i nie bdziemy musieli, do tej

26
00:02:15,790 --> 00:02:16,580
pory w

27
00:02:16,870 --> 00:02:24,290
naszym projekcie demonstracyjnym, ktrego nie zrobilimy, jeli zastosujemy metod konstruktora, musimy wywoa super i przekaza rekwizyty,

28
00:02:24,290 --> 00:02:26,180
to wywouje konstruktora parent

29
00:02:26,350 --> 00:02:33,310
class, a poniewa moemy wdroy t metod jedynie w komponentach stanowych, klasa nadrzdna jest obiektem,

30
00:02:33,550 --> 00:02:41,680
ktry importowalimy z obiektu komponentu. I dzwonic super i przekazujc rekwizyty, takie rzeczy. rekwizyty, ktre nastpnie bdziemy potrzebowali

31
00:02:41,680 --> 00:02:47,470
uywa gdziekolwiek indziej w komponencie, ktre zostan zaludnione lub zarzdzane przez reakcj.

32
00:02:47,500 --> 00:02:54,700
Dlatego zawsze wzywaj super i przekazywaj rekwizyty, jeli implementujesz konstruktora. Co jeszcze moesz tutaj zrobi i oczywicie

33
00:02:54,820 --> 00:02:56,430
jest to opcjonalne,

34
00:02:56,710 --> 00:03:00,040
moesz zainicjowa stan w konstruktorze, zrobilimy to

35
00:03:00,040 --> 00:03:04,010
po prostu definiujc waciwo stanu, ale moesz rwnie

36
00:03:04,090 --> 00:03:10,390
zdefiniowa t waciwo tutaj w konstruktorze i w starszych fragmentach kodu, ktre miay

37
00:03:10,390 --> 00:03:13,460
dostp do nowych funkcji javascript, ktrych

38
00:03:13,570 --> 00:03:14,820
uywalimy, Widzielicie,

39
00:03:14,890 --> 00:03:18,270
e wasz komentarz zainicjowa stan w konstruktorze.

40
00:03:18,490 --> 00:03:22,950
To, co nigdy nie powinno si tam robi, jest przyczyn efektw ubocznych.

41
00:03:23,170 --> 00:03:27,600
Jakie s skutki uboczne? Na przykad docieranie do

42
00:03:27,730 --> 00:03:34,540
serwera WWW, wic dania, ktre powracaj, a nastpnie edytuj stan aplikacji, s efektem ubocznym.

43
00:03:34,540 --> 00:03:40,180
Nie powiniene tego robi w konstruktorze, poniewa moe to doprowadzi do ponownego renderowania aplikacji, a

44
00:03:40,330 --> 00:03:42,310
co za tym idzie problemw

45
00:03:42,310 --> 00:03:50,240
z wydajnoci, moe to rwnie spowodowa, e stan stanie si nieprzewidywalny. Po konstruktorze wykonywana jest inna

46
00:03:50,240 --> 00:03:55,520
funkcja, ta funkcja jest metod componentWillMount.

47
00:03:55,670 --> 00:04:01,430
Teraz jest to metoda zdefiniowana przez reakcj i jest dostpna,

48
00:04:01,430 --> 00:04:09,710
poniewa rozszerzamy ten komponent z biblioteki reagowania. componentWillMount istnieje z powodw historycznych, gwnie nie uywasz

49
00:04:09,710 --> 00:04:11,080
go tak czsto.

50
00:04:11,330 --> 00:04:14,090
Jeli go uywasz, chcesz go uy do aktualizacji

51
00:04:14,120 --> 00:04:19,840
swojego stanu tutaj, zrb kilka optymalizacji w ostatniej chwili, ale nadal nie powiniene powodowa efektw ubocznych tutaj,

52
00:04:19,850 --> 00:04:21,580
nie powiniene kontaktowa si z internetem.

53
00:04:21,740 --> 00:04:25,110
Teraz, jak ju wspomniaem, nie uywasz tego tak czsto, wci

54
00:04:25,160 --> 00:04:32,740
istnieje, ale s szanse, e nie zastosujesz go w swojej aplikacji. Po componentWillMount komponent

55
00:04:32,990 --> 00:04:34,880
wyrenderuje.

56
00:04:34,980 --> 00:04:41,980
Teraz wykonanie metody renderowania nie oznacza, e uzyskuje dostp do prawdziwej dom, powrc

57
00:04:42,050 --> 00:04:50,460
do tego, jak dokadnie reaguje ponownie renderuje dom i aktualizacje do dom w tym module.

58
00:04:50,540 --> 00:04:56,960
Na razie powiniene wiedzie, e render, realizujc metod renderowania, reaguje na ide tego, co powinien

59
00:04:56,960 --> 00:04:58,780
renderowa, jak by wygldao,

60
00:04:58,880 --> 00:05:02,920
gdyby nastpnie dociera do prawdziwego domu i manipulowa nim,

61
00:05:02,990 --> 00:05:06,590
zaley od tego, jak wyglda domena prawdziwa .

62
00:05:06,680 --> 00:05:11,290
Jeli nie trzeba wprowadza adnych zmian, to i tak nie jest kontynuowane.

63
00:05:11,600 --> 00:05:17,690
Ale metoda renderowania jest wanym krokiem, poniewa jasno okrela, w jaki sposb aplikacja lub

64
00:05:17,690 --> 00:05:21,380
jak powinien wyglda ten komponent z perspektywy html.

65
00:05:21,650 --> 00:05:28,400
Tak wic jest to metoda renderowania, w ktrej przygotowuje si i tworzy struktur kodu jsx, okrelajc, ktre

66
00:05:28,400 --> 00:05:30,800
treci zostan wyrenderowane dla tego komponentu.

67
00:05:30,890 --> 00:05:37,580
Od tego momentu reagowanie oczywicie wie rwnie, jakie skadniki podrzdne tego komponentu maj, poniewa w kocu,

68
00:05:37,580 --> 00:05:44,150
gdy wywoasz render i zdefiniujesz swj kod jsx, wie rwnie, ktre komponenty zostay w nim zawarte,

69
00:05:44,150 --> 00:05:47,340
podobnie jak komponent osoby w naszym projekcie demonstracyjnym.

70
00:05:47,480 --> 00:05:51,260
Tak wic bdzie kontynuowa i wyrenderuje wszystkie

71
00:05:51,260 --> 00:05:58,760
te komponenty potomne, zasadniczo wykonujc ten proces dla kadego komponentu potomnego, a nastpnie wywoa

72
00:05:58,760 --> 00:06:04,730
skadnik componentDidMount, aby zasadniczo powiedzie, e ten komponent zosta pomylnie zamontowany.

73
00:06:04,730 --> 00:06:07,110
Teraz w componentDidMount moesz wywoywa efekty

74
00:06:07,280 --> 00:06:09,330
uboczne, jest to moment, w

75
00:06:09,390 --> 00:06:14,540
ktrym chcesz dotrze do sieci, na przykad w celu pobrania niektrych danych.

76
00:06:14,810 --> 00:06:20,880
Nie powiniene tu jednak aktualizowa stanu, poniewa spowoduje to ponowne renderowanie, wic jest to

77
00:06:20,900 --> 00:06:22,660
co, o czym musisz

78
00:06:22,700 --> 00:06:26,480
pamita, nie nazywaj tego. setState w componentDidMount, spowoduje to

79
00:06:26,600 --> 00:06:32,390
ponowne renderowanie i jeli zastanawiasz si, jak dokadne byoby dotarcie do sieci i wykorzystanie wyniku

80
00:06:32,390 --> 00:06:38,510
z tego dostpu do sieci, to jest to co, na co mamy rwnie rzuci okiem na

81
00:06:38,510 --> 00:06:39,140
ten kurs

82
00:06:39,140 --> 00:06:46,790
gdy zaczniemy dodawa dostp do naszych aplikacji przez Internet. Mio jest zobaczy ten diagram tutaj, ale nadal jest

83
00:06:46,790 --> 00:06:48,390
on bardzo abstrakcyjny, wic

84
00:06:48,460 --> 00:06:54,350
wrmy do naszego projektu i zaimplementujmy te haki i moe co zaloguj do

85
00:06:54,620 --> 00:06:58,230
konsoli, abymy mogli naprawd zobaczy przepyw naszej aplikacji.

