1
00:00:02,750 --> 00:00:06,420
Now last but not least there's one other change I want to show you.

2
00:00:06,620 --> 00:00:12,770
In the app.js file, we get all these lifecycle methods which I explain to you throughout this module. Now

3
00:00:12,820 --> 00:00:19,500
react 16.3 actually discourages the usage of three of them and adds two new ones

4
00:00:19,520 --> 00:00:24,470
but step by step. Which ones should you try to avoid?

5
00:00:24,590 --> 00:00:32,330
These are componentWillMount, componentWillUpdate and componentWillReceive props.

6
00:00:32,330 --> 00:00:38,370
Now why are these three discouraged? They are discouraged because they often were used incorrectly.

7
00:00:38,720 --> 00:00:45,380
You could call set state in there and possibly the first the first render you could do bad things in

8
00:00:45,380 --> 00:00:45,980
there.

9
00:00:45,980 --> 00:00:51,270
This is also the reason why we rarely use these three in this course as you will see in the course project

10
00:00:51,290 --> 00:00:52,510
we're about to build,

11
00:00:52,520 --> 00:00:56,130
they're not that useful and they're easy to be used incorrectly.

12
00:00:56,300 --> 00:00:57,670
So you can still use them,

13
00:00:57,680 --> 00:01:03,620
it will still work, it's not insecure but it's discouraged, react offers two new ones though.

14
00:01:03,850 --> 00:01:14,750
The first new lifecycle hook it adds is getDerivedStateFromProps and this will get the next props

15
00:01:15,110 --> 00:01:18,080
and the previous state.

16
00:01:18,110 --> 00:01:26,310
Now this lifecycle hook is executed whenever your props are updated and it gives you a chance of updating

17
00:01:26,310 --> 00:01:27,970
your state amongst with them.

18
00:01:28,230 --> 00:01:30,150
Now often you don't want this,

19
00:01:30,210 --> 00:01:34,100
your state should rarely be coupled to your props,

20
00:01:34,140 --> 00:01:39,540
these should be two independent things. But sometimes you get cases where you receive new props and you

21
00:01:39,540 --> 00:01:44,130
want to update your local state because maybe you want to work with that state, you want to change it

22
00:01:44,160 --> 00:01:50,880
in that component before a user clicks a save button and you commit it up the state tree, the component tree

23
00:01:50,880 --> 00:01:55,560
in your app and then you change it somewhere else and therefore you will change your props again.

24
00:01:55,890 --> 00:02:00,150
So lets simply add a console log statement in here

25
00:02:01,280 --> 00:02:07,770
and we're inside at getDerivedStateFromProps and we can output the previous state here

26
00:02:09,400 --> 00:02:16,120
and now as I said, in here, you also should return a new state so this can be object which will be merged

27
00:02:16,120 --> 00:02:21,580
with the old state, just like set state calls to it but you can also of course return the old state

28
00:02:21,610 --> 00:02:24,800
in which case you'll never update it because you always take the last one.

29
00:02:24,910 --> 00:02:30,070
But you could take the props, do something with them and return a new state object which would be used

30
00:02:30,100 --> 00:02:31,110
instead.

31
00:02:31,600 --> 00:02:34,020
So now we have this set up,

32
00:02:34,030 --> 00:02:39,820
one thing to make this work is we actually have to use the static keyword in front of this because it's

33
00:02:39,820 --> 00:02:41,060
a static method,

34
00:02:41,080 --> 00:02:47,400
so basically a method which is not attached to a single instance. With that, if we now reload our app

35
00:02:47,470 --> 00:02:52,060
we get that warning because we're using a new lifecycle hook whilst also using two old ones

36
00:02:52,080 --> 00:02:53,100
but that's fine.

37
00:02:54,030 --> 00:02:59,520
More interesting is that here we see that getDerivedStateFromProps call when we actually loaded

38
00:02:59,520 --> 00:03:03,860
our app and this of course is well very useful to see.

39
00:03:03,930 --> 00:03:06,950
It's called before it's actually rendering this

40
00:03:07,020 --> 00:03:12,870
and before it's mounting this, it gives us a chance of updating our state right before it does these steps

41
00:03:13,260 --> 00:03:16,860
and it will re-execute whenever our props change.

42
00:03:16,860 --> 00:03:22,260
Again not something you should overuse but definitely nice if you've got a component that needs to bring

43
00:03:22,260 --> 00:03:24,750
state and props in sync.

44
00:03:24,750 --> 00:03:31,510
The second new lifecycle which was added is getSnapshotBeforeUpdate.

45
00:03:31,920 --> 00:03:37,790
Now this allows you to get a snapshot of your dom right before it's about to change,

46
00:03:37,800 --> 00:03:44,550
so if you got some changes in your component which need to change to the dom, this lifecycle hook will

47
00:03:44,550 --> 00:03:47,910
be executed right before the dom does update.

48
00:03:47,910 --> 00:03:53,070
So here we can also console log something, we can console log that name

49
00:03:53,460 --> 00:03:59,670
and if we save that and we reload our app, we don't actually see anything here but if I click show persons,

50
00:04:00,780 --> 00:04:08,850
we see it here, getSnapshotBeforeUpdate and this executes right before componentDidUpdate is done

51
00:04:09,030 --> 00:04:11,410
for the app.js component.

52
00:04:11,430 --> 00:04:17,460
So this is a great place to for example save the current scrolling position of your user.

53
00:04:17,460 --> 00:04:20,640
This can be very useful because in getSnapshotBeforeUpdate,

54
00:04:20,670 --> 00:04:27,540
you can save it before the dom changes and in componentDidUpdate, you could scroll the user back to the

55
00:04:27,570 --> 00:04:33,030
previously saved position for example. Let's say you have a list of items, you add new list items

56
00:04:33,330 --> 00:04:36,270
here you can save scrolling positions before they are added

57
00:04:36,270 --> 00:04:40,710
and here you can set the users scrolling to that position after they have been added.

58
00:04:40,950 --> 00:04:46,020
This also is the exact example you see in the official docs in the official blog posts on the new

59
00:04:46,020 --> 00:04:48,200
version to be precise. There,

60
00:04:48,270 --> 00:04:52,810
if you click on that getSnapshotBeforeUpdate link, you get the detailed documentation

61
00:04:52,920 --> 00:04:56,960
and there you see that example with the scrolling position that is saved.

62
00:04:56,970 --> 00:05:00,290
So this is a nice utility you can now also use

63
00:05:00,480 --> 00:05:01,330
and that's about it.

64
00:05:01,440 --> 00:05:04,850
These are great new features introduced by react 16.3

65
00:05:04,950 --> 00:05:10,140
If you're using the version, please play around with them and feel three to use them in your next project.

