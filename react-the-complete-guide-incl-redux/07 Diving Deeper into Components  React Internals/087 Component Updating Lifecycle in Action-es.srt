1
00:00:02,320 --> 00:00:08,470
As que implementemos estos libros relacionados con las actualizaciones y no los implementaremos en todos los componentes porque eso

2
00:00:08,470 --> 00:00:11,490
podra hacer que nuestro registro de la consola explote.

3
00:00:11,590 --> 00:00:12,780
Entonces hazlo en persona.

4
00:00:12,850 --> 00:00:17,470
S, todos los componentes los implementan por debajo de los relacionados con la discresin.

5
00:00:17,530 --> 00:00:23,680
Pero, por encima de todo, presntenlo si se preguntan por qu implement estos mtodos de esta

6
00:00:23,740 --> 00:00:27,830
manera y no como propiedades con funciones aerodinmicas. Podra hacerlo.

7
00:00:28,000 --> 00:00:34,870
mtodos no son llamados para los eventos Dom y, por lo tanto, nunca tendremos que usar este tema de palabra clave, tambin

8
00:00:35,020 --> 00:00:41,350
podemos usar esta sintaxis que, aunque sepamos de un lenguaje de programacin, es posible volver al aspecto del ciclo de vida.

9
00:00:41,350 --> 00:00:42,610
Pero dado que estos

10
00:00:42,880 --> 00:00:50,540
Comencemos con el componente que recibir accesorios y luego obtendremos los prximos accesorios como argumento.

11
00:00:50,770 --> 00:00:56,850
Ahora all agregar una declaracin de bloqueo de consola donde imprimir personas de actualizacin.

12
00:00:56,890 --> 00:00:59,970
J. S. para que podamos ver esto fcilmente

13
00:01:00,400 --> 00:01:10,390
Y todos dicen que el componente interno recibir accesorios y tambin imprimir los prximos accesorios aqu para

14
00:01:10,390 --> 00:01:12,400
que podamos ver esto.

15
00:01:12,400 --> 00:01:15,940
Djame guardar esto, veamos que Windass ejecuta una aplicacin de bienes races.

16
00:01:15,940 --> 00:01:20,050
No lo vemos aqu porque lo encontramos en el archivo de ajedrez de la persona.

17
00:01:20,110 --> 00:01:29,140
Si hago clic en Alternar personas vamos a analizar el Cancellara aqu tenemos todos los mtodos relacionados de la persona para que

18
00:01:29,140 --> 00:01:37,660
las personas persigan en el constructor montarn las sillas de las personas y luego renderizarn nuestro componente de una sola persona.

19
00:01:37,660 --> 00:01:39,910
Entonces estos son todos componentes de una sola persona.

20
00:01:41,160 --> 00:01:45,440
Y MT no se actualiz look estilo de vida relacionado.

21
00:01:45,440 --> 00:01:48,440
As que permtanme limpiar mucho pero no recarg la pgina.

22
00:01:48,570 --> 00:01:51,150
Y ahora cambiemos algo.

23
00:01:51,480 --> 00:01:58,680
Vamos a eliminar un manual de estas personas aqu para hacer clic en l, vers que se recupera el renderizado y

24
00:01:58,720 --> 00:02:01,080
en realidad es porque el estado cambi.

25
00:02:01,290 --> 00:02:07,530
Y luego vemos que nuestra actualizacin recibir un problema como se llama donde obtenemos los accesorios actualizados donde

26
00:02:07,530 --> 00:02:13,980
tenemos personas que son solo dos personas ahora y luego estamos dentro del renderizado de personas y de

27
00:02:13,980 --> 00:02:18,390
los componentes de dos personas que permanecieron porque DS necesitaba renderizar .

28
00:02:18,420 --> 00:02:23,030
Usted vio que el mtodo representado tambin forma parte del ciclo de vida de la actualizacin.

29
00:02:23,520 --> 00:02:24,120
As que eso es genial.

30
00:02:24,120 --> 00:02:25,570
Agreguemos un vecindario.

31
00:02:25,680 --> 00:02:33,840
es solo un mtodo de conveniencia, sino uno en el que realmente podemos ahorrar algo de rendimiento si lo usamos inteligentemente. Obtenemos los

32
00:02:33,840 --> 00:02:40,080
prximos accesorios y estado y tambin agregar un bloqueo de consola aqu donde dir actualizar personas J.

33
00:02:40,080 --> 00:02:51,940
Un mtodo muy importante mostr la actualizacin de componentes, que no S. dentro de la actualizacin del componente fruncido

34
00:02:52,570 --> 00:02:59,880
y se imprimirn los prximos accesorios y la prxima etapa aqu tambin.

35
00:02:59,890 --> 00:03:04,640
Ahora, como dije, este mtodo debera devolver verdadero o falso si devuelve verdadero.

36
00:03:04,840 --> 00:03:08,300
La actualizacin contina si devuelve falso.

37
00:03:08,320 --> 00:03:10,510
Detuvimos todo el proceso.

38
00:03:10,510 --> 00:03:13,410
Ahora volvamos falso aqu para ver cmo se vera eso.

39
00:03:13,720 --> 00:03:18,680
Si guardo todo ahora y apunto a personas, todo funciona.

40
00:03:18,850 --> 00:03:20,850
Pero ahora vamos a eliminar el manual nuevamente.

41
00:03:21,600 --> 00:03:24,870
Hago clic en l pero ves que no se actualiza.

42
00:03:24,870 --> 00:03:32,010
Puede hacer clic en l varias veces, incluso ver que se llama al mtodo de actualizacin. Debera el componente

43
00:03:32,370 --> 00:03:34,490
actualizar y degradar sus cambios?

44
00:03:34,500 --> 00:03:41,280
Las personas solo tienen un elemento aqu porque elimin dos personas, pero no se refleja en el DOM

45
00:03:41,610 --> 00:03:47,640
porque cancelamos el proceso de actualizacin, por lo que nunca llegamos a los mtodos de renderizacin

46
00:03:47,640 --> 00:03:52,880
que seran importantes para decir reaccionar para verificar si el Dom real necesita ser actualizado.

47
00:03:52,890 --> 00:03:55,930
Esto nos muestra el poder de la actualizacin del componente debe.

48
00:03:56,310 --> 00:04:03,870
Ahora puede que se pregunte por qu volveremos Fallston porque aqu, por supuesto, rompe la aplicacin.

49
00:04:04,070 --> 00:04:07,960
Pero es posible que tenga casos en los que sepa que no se requiere ninguna actualizacin.

50
00:04:08,150 --> 00:04:10,020
Y por supuesto, normalmente no codificas.

51
00:04:10,040 --> 00:04:11,590
Verdadero o falso aqu.

52
00:04:11,700 --> 00:04:17,120
En su lugar, comprueba que en funcin de los prximos problemas o estado.

53
00:04:17,120 --> 00:04:28,690
Entonces aqu, por ejemplo, sabemos que solo queremos continuar si las siguientes personas no son iguales a estas

54
00:04:28,760 --> 00:04:32,420
personas que son las personas mayores.

55
00:04:32,420 --> 00:04:36,050
Ahora con este implemento, volvamos atrs.

56
00:04:36,060 --> 00:04:41,890
clic en una persona, pasamos por todo el proceso con xito porque la matriz de personas ha cambiado.

57
00:04:41,980 --> 00:04:42,840
Ahora, si haces

58
00:04:43,220 --> 00:04:50,390
Y, por cierto, esto solo es cierto porque utilizamos un enfoque inmutable para actualizar la matriz de la persona porque esto

59
00:04:50,630 --> 00:04:53,410
no comprueba profundamente la matriz de la persona.

60
00:04:53,510 --> 00:04:59,500
Solo se ve si se trata de objetos diferentes, pero estos son objetos diferentes debido a la

61
00:04:59,510 --> 00:05:03,620
forma en que actualizamos personas aqu en nuestra aplicacin como archivo all.

62
00:05:03,620 --> 00:05:07,280
Cuando dijimos personas, dijimos a un nuevo conjunto.

63
00:05:07,430 --> 00:05:10,570
Entonces, es un objeto totalmente diferente lo que es importante.

64
00:05:10,640 --> 00:05:14,130
Si una actualizacin de componente aqu no comprueba esto profundamente.

65
00:05:14,270 --> 00:05:17,150
Solo compara los objetos raz.

66
00:05:17,150 --> 00:05:23,100
Los indicadores para ser precisos, pero estos son diferentes porque recreamos una nueva matriz, pero eso fuera

67
00:05:23,120 --> 00:05:29,330
del camino, lo que sucedera ahora es si de alguna manera cambiamos alguna otra propiedad que podra

68
00:05:29,330 --> 00:05:31,430
no ser relevante para este componente.

69
00:05:31,430 --> 00:05:35,450
Esto no activar una actualizacin y podemos guardar el rendimiento aqu.

70
00:05:36,110 --> 00:05:38,170
Por lo tanto, es una actualizacin segura del componente.

71
00:05:38,180 --> 00:05:44,120
todos los componentes, porque eso significa que debe usar componentes con estado en todo el lugar y est en contra

72
00:05:44,120 --> 00:05:49,400
de lo que dije antes sobre usted al usar componentes funcionales tan a menudo como sea posible.

73
00:05:49,400 --> 00:05:51,360
No es necesario que lo agregue a

74
00:05:51,680 --> 00:05:58,580
Pero si tiene un caso de uso donde sabe que el ao se descompone y recibe muchos accesorios, en realidad

75
00:05:58,580 --> 00:06:02,050
debera reorganizarse o solo si uno de estos accesorios cambia.

76
00:06:02,120 --> 00:06:08,810
Luego, puede convertir su componente en uno completo e implementar la actualizacin del componente para verificar si

77
00:06:08,960 --> 00:06:14,960
este accesorio nico que es importante para usted cambi o no e ignorar todos los dems.

78
00:06:15,410 --> 00:06:21,870
As que con eso obtenemos este control adicional y podemos seguir implementando Life Life Lokes en el

79
00:06:22,040 --> 00:06:26,000
prximo ciclo de vida despus de la actualizacin del componente Should.

80
00:06:26,030 --> 00:06:28,650
Ahora decidimos que estamos a punto de actualizar aqu.

81
00:06:28,690 --> 00:06:31,770
Tambin recib el prximo estado y accesorios.

82
00:06:31,910 --> 00:06:34,930
As que ahora vamos a cerrar esto al cnsul aqu tambin.

83
00:06:35,250 --> 00:06:37,910
Esa es la actualizacin de Lauck personas.

84
00:06:37,970 --> 00:06:51,480
J. S. componente interno actualizar y registrar los prximos apoyos y el prximo estado aqu con

85
00:06:51,480 --> 00:06:58,990
eso digamos si esto es, veamos la conversacin de tiempo real del dilogo claro de una persona elimine a la persona que vemos

86
00:06:59,440 --> 00:07:06,070
en realidad un componente de entrega recibir accesorios si la actualizacin del componente se actualizara y luego el mapa de

87
00:07:06,070 --> 00:07:09,100
renderizado hace que todos los componentes relevantes sean perfectos.

88
00:07:09,160 --> 00:07:13,000
Ahora el siguiente mtodo de la computadora se actualizar fue render.

89
00:07:13,030 --> 00:07:14,540
Ya lo tenemos.

90
00:07:14,710 --> 00:07:20,870
El siguiente mtodo que hay despus de que el componente actualiz su.

91
00:07:21,020 --> 00:07:31,370
Ahora podemos causar efectos secundarios de la misma manera que se mont cualquier componente y rpidamente imprimir estos dos.

92
00:07:31,550 --> 00:07:38,130
Aqu no tendremos el siguiente estado en los prximos apoyos, ya que a menudo es la actualizacin, tenemos estos accesorios y contamos los nuevos

93
00:07:38,360 --> 00:07:44,360
problemas y el nuevo estado en el que se presentarn los accesorios y el estado actual en este punto del tiempo.

94
00:07:44,540 --> 00:07:50,690
Entonces eso nos ahorr una vez ms que las personas objetivo bloquearan borrar a la persona y todo el camino.

95
00:07:50,720 --> 00:07:53,540
El componente inferior Usie se actualiz.

96
00:07:53,630 --> 00:07:55,580
Entonces ese es el ciclo de vida de actualizacin.

97
00:07:55,660 --> 00:08:02,960
Si la actualizacin se desencadena desde el exterior debido a cambios en los problemas, como ocurre con las personas que las

98
00:08:03,030 --> 00:08:03,920
personas cambiaron.

