1
00:00:02,270 --> 00:00:04,960
Ento leia, na verdade, resgate o acesso de leitura ou escreva.

2
00:00:05,090 --> 00:00:08,780
Isso nos permite resolver todos os nossos problemas, no.

3
00:00:08,780 --> 00:00:10,340
Como o relogio relaxa.

4
00:00:10,640 --> 00:00:16,200
Bem, lembre-se da idia de ter um lugar central onde voc gerenciou todo o estado.

5
00:00:16,280 --> 00:00:20,120
Eu disse que no podemos usar uma varivel global para a dvida e no podemos.

6
00:00:20,450 --> 00:00:28,190
Mas o redox nos d um certo fluxo de dados, uma certa maneira de gerenciar dados que, ento, podemos integrar

7
00:00:28,340 --> 00:00:31,190
bem com o pacote numrico no reator.

8
00:00:31,460 --> 00:00:35,310
Ento, o reagente reage s mudanas de dados.

9
00:00:35,450 --> 00:00:37,480
Agora, vamos mostrar-lhe como essa integrao funciona.

10
00:00:37,610 --> 00:00:40,260
Mas primeiro deixe-me descrever suas obras redux.

11
00:00:40,310 --> 00:00:44,720
Como gerenciar dados e como ele atualiza no final.

12
00:00:44,720 --> 00:00:49,440
 tudo sobre uma loja central que temos em cada aplicao redox.

13
00:00:49,670 --> 00:00:56,280
E eu quero destacar que redox  uma biblioteca de terceiros que eram atos totalmente independentes de reagir.

14
00:00:56,330 --> 00:01:02,160
 mais frequentemente visto em conjunto com a reao, mas, teoricamente,  independente.

15
00:01:02,450 --> 00:01:04,310
Ento  tudo sobre uma loja central.

16
00:01:04,310 --> 00:01:07,370
Esta loja armazena todo o estado do aplicativo.

17
00:01:07,370 --> 00:01:08,290
 simples assim.

18
00:01:08,330 --> 00:01:12,800
Voc pode pensar sobre isso como um objeto javascript gigante.

19
00:01:13,070 --> 00:01:18,860
Agora, em um aplicativo de re-ao e novamente, ler X  independente de reagir, mas  o caso de uso mais comum

20
00:01:18,860 --> 00:01:21,350
e  um curso de reao aqui no final.

21
00:01:21,530 --> 00:01:29,630
Ns temos componentes e um componente provavelmente quer manipular ou obter o estado da aplicao dickered.

22
00:01:29,630 --> 00:01:34,990
Agora, no faz isso manipulando diretamente esse objeto javascript central.

23
00:01:35,090 --> 00:01:42,320
sistema de reatividade reaes e, pior ainda, tornaria nossa loja bastante imprevisvel se editarmos de qualquer

24
00:01:42,380 --> 00:01:50,450
lugar em nossa aplicao, que nunca podemos ver onde fizemos uma certa mudana que quebrou nosso aplicativo, por exemplo.

25
00:01:50,450 --> 00:01:52,790
Isso no seria absorvido pelo

26
00:01:52,790 --> 00:01:59,180
Ento, temos um processo previsvel e previsvel de atualizao do estado em que podemos confiar e qual 

27
00:01:59,180 --> 00:02:02,210
o nico processo que pode mudar nosso estado.

28
00:02:02,510 --> 00:02:09,310
Isso  realmente o que a Rydex  sobre ter um processo claramente definido de como seu estado pode mudar.

29
00:02:09,650 --> 00:02:16,430
O primeiro bloco de construo, alm da loja central, so aes que so despachadas do seu cdigo javascript

30
00:02:16,430 --> 00:02:23,540
em um reator, so enviadas a partir de seus componentes e a ao  apenas um pacote de informaes

31
00:02:23,540 --> 00:02:28,740
e voc termina com um tipo de algo como adicionar ingrediente ou remover ingrediente.

32
00:02:28,790 --> 00:02:31,960
Ento, uma descrio que voc poderia dizer possivelmente.

33
00:02:32,060 --> 00:02:33,950
Ele tambm possui uma carga til.

34
00:02:33,950 --> 00:02:41,360
Por exemplo, se a ao  um ingrediente, precisamos de toda a informao passada, qual ingrediente e que

35
00:02:41,360 --> 00:02:43,360
tambm seria parte da ao.

36
00:02:43,370 --> 00:02:49,070
Ento,  um pacote de informaes que estamos enviando para o mundo ou para ler X para ser preciso.

37
00:02:49,580 --> 00:02:52,730
Essa ao no atingiu diretamente uma loja.

38
00:02:52,760 --> 00:02:57,290
Essa ao no possui nenhuma lgica, no sabe como operar a loja.

39
00:02:57,290 --> 00:03:00,240
 apenas uma coisa de mensageiro.

40
00:03:00,290 --> 00:03:03,160
Alterar a loja  um redutor.

41
00:03:03,170 --> 00:03:09,010
Agora, eu escrevi redutores porque realmente podemos combinar vrios redutores em um.

42
00:03:09,230 --> 00:03:14,590
Mas, no final, voc acabar com um redutor de rotas que est diretamente conectado  sua loja

43
00:03:14,590 --> 00:03:15,160
no final.

44
00:03:15,170 --> 00:03:21,440
Portanto, a ao atinge o produtor e, como a ao contm um tipo, o redutor pode verificar o

45
00:03:21,440 --> 00:03:22,420
tipo de ao.

46
00:03:22,430 --> 00:03:30,600
Por exemplo, se  um ingrediente e no encontramos um cdigo para o tipo de ao de dados no

47
00:03:30,740 --> 00:03:39,020
redutor, o redutor no final  apenas uma funo pura que recebe a ao e o estado antigo como entrada

48
00:03:39,020 --> 00:03:42,340
e que ento escreve um estado atualizado .

49
00:03:42,350 --> 00:03:50,210
O importante  que o produtor precisa executar o cdigo sncrono apenas sem cdigo assncrono, sem efeitos

50
00:03:50,210 --> 00:03:53,650
colaterais, nenhum HTP no solicita nada disso.

51
00:03:53,720 --> 00:03:59,970
Voc aprender mais tarde como voc ainda pode implementar cdigo assncrono, mas em redutores  apenas entrada e

52
00:04:00,110 --> 00:04:02,020
sada de nada no meio.

53
00:04:02,150 --> 00:04:03,320
Sem demora.

54
00:04:03,770 --> 00:04:09,890
Ento, este  o seu douceur e os redutores reduzem o estado atualizado, que depois  armazenado na

55
00:04:09,890 --> 00:04:12,050
loja novamente e substitui o estado antigo.

56
00:04:12,050 --> 00:04:15,120
E isso deve ser feito de forma imutvel.

57
00:04:15,170 --> 00:04:20,930
Ento, sempre devolvemos um novo estado que pode ser baseado no antigo, mas que  tecnicamente um

58
00:04:20,960 --> 00:04:26,840
novo objeto javascript porque os objetos so tipos de referncia e Javascript e queremos garantir que no

59
00:04:26,840 --> 00:04:28,280
alteremos acidentalmente o antigo.

60
00:04:28,520 --> 00:04:31,890
Ento  assim que o redutor lida com a ao.

61
00:04:31,910 --> 00:04:33,800
Agora, a loja est atualizada.

62
00:04:33,830 --> 00:04:40,610
Como podemos obter o estado atualizado de volta ao nosso componente, ento, para que usemos o modelo

63
00:04:41,270 --> 00:04:48,920
de assinatura, distorcer dispara todas as assinaturas sempre que o estado muda sempre que um estado  atualizado na loja.

64
00:04:49,190 --> 00:04:56,340
E  claro que nosso componente pode se inscrever para armazenar atualizaes e, em seguida, recebe essa atualizao automaticamente.

65
00:04:56,360 --> 00:04:57,630
 assim que  simples.

66
00:04:57,650 --> 00:05:03,450
Isso funciona atravs de um modelo de assinatura e simplesmente damos pagamento. Eu quero ser notificado sempre que o

67
00:05:03,450 --> 00:05:04,130
estado mudar.

68
00:05:04,260 --> 00:05:06,830
Assim como dizemos, eu quero mudar o estado.

69
00:05:06,840 --> 00:05:09,390
Aqui est uma ao descrevendo meus planos.

70
00:05:09,410 --> 00:05:10,680
O redux flui.

71
00:05:10,730 --> 00:05:12,060
Isso funciona com redux.

72
00:05:12,060 --> 00:05:15,650
Muito poucos radicais embora vejamos isso em ao sobre os prximos Electra's.

