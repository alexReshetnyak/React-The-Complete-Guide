1
00:00:02,270 --> 00:00:04,960
Wic czytaj waciwie ocali dostp do odczytu lub pisa.

2
00:00:05,090 --> 00:00:08,780
Pozwala nam to rozwiza wszystkie nasze problemy, prawda?

3
00:00:08,780 --> 00:00:10,340
Jak dziaa relax?

4
00:00:10,640 --> 00:00:16,200
Zapamitajcie ten pomys posiadania centralnego miejsca, w ktrym zarzdzali pastwo.

5
00:00:16,280 --> 00:00:20,120
Powiedziaem, e nie moemy uy zmiennej globalnej dla zaduenia, a nie moemy.

6
00:00:20,450 --> 00:00:28,190
Ale redoks daje nam pewien przepyw danych w pewien sposb zarzdzania danymi, ktre moemy nastpnie adnie

7
00:00:28,340 --> 00:00:31,190
zintegrowa z pakietem liczbowym do reaktora.

8
00:00:31,460 --> 00:00:35,310
Reac reaguje na zmiany danych.

9
00:00:35,450 --> 00:00:37,480
Teraz pokaemy, jak dziaa ta integracja.

10
00:00:37,610 --> 00:00:40,260
Ale najpierw pozwl mi opisa jej dziaania redux.

11
00:00:40,310 --> 00:00:44,720
W jaki sposb zarzdza danymi i jak jest aktualizowany na kocu.

12
00:00:44,720 --> 00:00:49,440
Chodzi o centralny sklep, ktry mamy w kadej aplikacji redoks.

13
00:00:49,670 --> 00:00:56,280
Chc podkreli, e redox jest bibliotek stron trzecich, ktra dziaaa zupenie niezalenie od reakcji.

14
00:00:56,330 --> 00:01:02,160
Najczciej pojawia si w poczeniu z reakcj, ale teoretycznie jest niezalena.

15
00:01:02,450 --> 00:01:04,310
A wic chodzi o sklep centralny.

16
00:01:04,310 --> 00:01:07,370
Ten sklep przechowuje cay stan aplikacji.

17
00:01:07,370 --> 00:01:08,290
To takie proste.

18
00:01:08,330 --> 00:01:12,800
Moesz myle o tym jak o gigantycznym obiekcie javascript.

19
00:01:13,070 --> 00:01:18,860
Teraz w aplikacji do ponownego uycia i ponownie odczytaj X jest niezaleny od reakcji, ale jest to najczstszy przypadek uycia

20
00:01:18,860 --> 00:01:21,350
i na tym etapie jest to kurs powtrkowy.

21
00:01:21,530 --> 00:01:29,630
Mamy komponenty i komponent prawdopodobnie chce manipulowa lub uzyska stan aplikacji w stanie dickered.

22
00:01:29,630 --> 00:01:34,990
Teraz tego nie robi, bezporednio manipulujc tym centralnym obiektem javascript.

23
00:01:35,090 --> 00:01:42,320
Nie zareagowaoby to na reakcj systemu reagowania, a nawet gorzej, gdyby nasz sklep by do nieprzewidywalny,

24
00:01:42,380 --> 00:01:50,450
gdybymy edytowali z dowolnego miejsca w naszej aplikacji, e nigdy nie zobaczymy, gdzie dokonalimy pewnej zmiany, ktra

25
00:01:50,450 --> 00:01:52,790
na przykad zamaa nasz aplikacj.

26
00:01:52,790 --> 00:01:59,180
Mamy wic jasny, przewidywalny proces aktualizacji stanu, na ktrym moemy polega i ktry jest

27
00:01:59,180 --> 00:02:02,210
jedynym procesem, ktry moe zmieni nasz stan.

28
00:02:02,510 --> 00:02:09,310
Tak wanie Rydex polega na jasno okrelonym procesie zmiany pastwa.

29
00:02:09,650 --> 00:02:16,430
Pierwszym blokiem konstrukcyjnym poza centralnym magazynem s akcje, ktre s wywoywane z kodu javascript

30
00:02:16,430 --> 00:02:23,540
w reaktorze, z ktrego s wysyane z twoich komponentw, a akcja jest po prostu pakietem

31
00:02:23,540 --> 00:02:28,740
informacyjnym i koczysz typem takim jak dodawanie skadnika lub usuwanie skadnika.

32
00:02:28,790 --> 00:02:31,960
A wic opis, ktry mgby powiedzie.

33
00:02:32,060 --> 00:02:33,950
Ma take adunek.

34
00:02:33,950 --> 00:02:41,360
Na przykad, jeli dziaanie jest skadnikiem, potrzebujemy wszystkich informacji z przeszoci, ktry skadnik i ktry

35
00:02:41,360 --> 00:02:43,360
rwnie byby czci dziaania.

36
00:02:43,370 --> 00:02:49,070
Jest to pakiet informacyjny, ktry wysyamy do wiata lub czytamy X, aby by precyzyjnym.

37
00:02:49,580 --> 00:02:52,730
Ta czynno nie dotara bezporednio do sklepu.

38
00:02:52,760 --> 00:02:57,290
Ta akcja nie ma adnej logiki, ktra nie umiaaby obsugiwa sklepu.

39
00:02:57,290 --> 00:03:00,240
To tylko posaniec.

40
00:03:00,290 --> 00:03:03,160
Zmiana sklepu to reduktor.

41
00:03:03,170 --> 00:03:09,010
Teraz tutaj napisaem reduktory, poniewa faktycznie moemy czy wiele reduktorw w jeden.

42
00:03:09,230 --> 00:03:14,590
Ale w kocu skoczysz z jednym reduktorem trasy, ktry jest bezporednio podczony do twojego

43
00:03:14,590 --> 00:03:15,160
sklepu.

44
00:03:15,170 --> 00:03:21,440
Akcja dociera do producenta, a poniewa akcja zawiera typ, reduktor moe sprawdzi

45
00:03:21,440 --> 00:03:22,420
typ akcji.

46
00:03:22,430 --> 00:03:30,600
Na przykad, jeli jest to skadnik i nie znalelimy kodu dla typu danych akcji w reduktorze, to

47
00:03:30,740 --> 00:03:39,020
reduktor na kocu jest po prostu czyst funkcj, ktra odbiera akcj i stary stan jako dane wejciowe,

48
00:03:39,020 --> 00:03:42,340
a nastpnie wypluwa zaktualizowany stan .

49
00:03:42,350 --> 00:03:50,210
Wan rzecz jest to, e producent musi wykona kod synchroniczny tylko bez asynchronicznego kodu bez efektw ubocznych,

50
00:03:50,210 --> 00:03:53,650
aden HTP nie da niczego z tego.

51
00:03:53,720 --> 00:03:59,970
Dowiesz si pniej, jak wci moesz zaimplementowa kod asynchroniczny, ale w reduktorach jest to tylko

52
00:04:00,110 --> 00:04:02,020
wejcie i wyjcie poza niczym.

53
00:04:02,150 --> 00:04:03,320
Bez opnie.

54
00:04:03,770 --> 00:04:09,890
Wic to jest ich douceur i reduktory bij zaktualizowany stan, ktry nastpnie jest ponownie przechowywany w

55
00:04:09,890 --> 00:04:12,050
magazynie i zastpuje stary stan.

56
00:04:12,050 --> 00:04:15,120
I to musi by zrobione w niezmienny sposb.

57
00:04:15,170 --> 00:04:20,930
Dlatego zawsze zwracamy nowy stan, ktry moe by oparty na starym, ale ktry jest technicznie

58
00:04:20,960 --> 00:04:26,840
nowym obiektem javascript, poniewa obiekty s typami referencyjnymi i Javascriptem i chcemy si upewni, e nie

59
00:04:26,840 --> 00:04:28,280
zmieniamy przypadkowo starej wersji.

60
00:04:28,520 --> 00:04:31,890
Tak wanie reduktor radzi sobie z dziaaniem.

61
00:04:31,910 --> 00:04:33,800
Teraz sklep jest aktualny.

62
00:04:33,830 --> 00:04:40,610
W jaki sposb otrzymamy zaktualizowany stan z powrotem do naszego komponentu, a to, e uywamy modelu

63
00:04:41,270 --> 00:04:48,920
subskrypcji, powoduje uruchomienie wszystkich subskrypcji za kadym razem, gdy stan zmienia si, gdy stan jest aktualizowany w sklepie.

64
00:04:49,190 --> 00:04:56,340
Oczywicie nasz komponent moe subskrybowa aktualizacje sklepu, a nastpnie automatycznie otrzymuje t aktualizacj.

65
00:04:56,360 --> 00:04:57,630
Oto, jakie to proste.

66
00:04:57,650 --> 00:05:03,450
Dziaa poprzez model subskrypcji, a my po prostu mwimy, e chc otrzymywa powiadomienia o kadej

67
00:05:03,450 --> 00:05:04,130
zmianie stanu.

68
00:05:04,260 --> 00:05:06,830
Tak jak mwimy, hej chc zmieni stan.

69
00:05:06,840 --> 00:05:09,390
Oto akcja opisujca moje plany.

70
00:05:09,410 --> 00:05:10,680
Czy redux pynie.

71
00:05:10,730 --> 00:05:12,060
Czy to dziaa redux?

72
00:05:12,060 --> 00:05:15,650
Bardzo mao radykaw, zobaczmy to w akcji nad kolejnymi Elektra.

