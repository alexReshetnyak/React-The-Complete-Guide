1
00:00:02,210 --> 00:00:08,400
Nell'ultima lezione impariamo come passare tutti i dati con l'azione come recuperarlo.

2
00:00:08,400 --> 00:00:13,880
Ora con ci impariamo alcuni dei concetti fondamentali dell'uso di read x.

3
00:00:14,100 --> 00:00:21,450
Ora se diamo un'occhiata al nostro riduttore qui c' qualcosa che probabilmente noterete che ha gi

4
00:00:21,450 --> 00:00:25,200
molte repliche di codice in molte dichiarazioni if.

5
00:00:25,260 --> 00:00:30,200
Ora non c' niente di sbagliato nell'usare le istruzioni IF se ti piace che usi questo approccio.

6
00:00:30,660 --> 00:00:36,500
Ma potremmo anche usare un diverso tipo di espressione di dichiarazione in javascript.

7
00:00:36,500 --> 00:00:45,630
L'istruzione switch potremmo passare al tipo di azione e quindi definire pi casi come il

8
00:00:45,630 --> 00:00:46,680
caso Inkerman.

9
00:00:47,070 --> 00:00:48,250
Allora abbiamo due punti.

10
00:00:48,270 --> 00:00:56,820
Quindi normale sintassi javascript e che qui potremmo restituire questo stato aggiornato per il caso incrementale e ora possiamo

11
00:00:57,140 --> 00:00:59,240
sbarazzarci di quella istruzione if.

12
00:00:59,430 --> 00:01:01,830
E ora possiamo naturalmente aggiungere altri casi qui.

13
00:01:01,830 --> 00:01:08,220
Quindi un caso per Decora significava e non ho bisogno di aggiungere una dichiarazione di interruzione perch il ritorno

14
00:01:08,430 --> 00:01:14,340
esce automaticamente dalla disfunzione non abbiamo mai raggiunto questa linea e solo naturalmente se entriamo in questo caso

15
00:01:14,340 --> 00:01:15,450
in primo luogo.

16
00:01:15,750 --> 00:01:19,380
Quindi, a discapito, faremo tutto il record per trasformare uno stato qui.

17
00:01:19,440 --> 00:01:26,820
Vorremmo restituire questo stato e ora possiamo ripeterlo naturalmente per tutti i casi aggiungendo cos rapidamente

18
00:01:26,820 --> 00:01:31,130
un caso per l'aggiunta di un caso per la sottrazione.

19
00:01:31,380 --> 00:01:36,620
E naturalmente questi identificatori devono ancora corrispondere agli identificatori che si usano durante le operazioni di dispacciamento.

20
00:01:36,810 --> 00:01:45,810
Quindi l'identificatore che hai detto qui sul tipo nel contenitore contatore e ora tutti estraggono il codice da queste

21
00:01:45,810 --> 00:01:46,870
istruzioni if.

22
00:01:46,920 --> 00:01:54,990
Aggiungili al codice nei rispettivi casi in cui riformatterai il codice e sbarazzati di queste istruzioni if.

23
00:01:54,990 --> 00:02:01,560
E ora il nostro produttore  un po 'pi snello e un po' pi facile da leggere perch  molto

24
00:02:01,560 --> 00:02:06,170
chiaro che stiamo guardando il tipo di direzione e quindi gestiamo solo casi diversi.

25
00:02:06,420 --> 00:02:12,000
E se non lo facciamo in nessuno di questi casi, abbiamo sempre la dichiarazione di ritorno

26
00:02:12,000 --> 00:02:15,620
predefinita qui alla fine che restituisce il nostro stato iniziale.

27
00:02:15,840 --> 00:02:21,810
O se questo era gi impostato, lo stato corrente  particolarmente importante in quanto devi

28
00:02:21,810 --> 00:02:28,590
tenere presente che se dovessimo inviare un'azione che ha un tipo che non  coperto qui continueremmo a

29
00:02:28,590 --> 00:02:34,740
correre su quel riduttore perch, quando mai lo spedisci qualcosa va da quel singolo riduttore che

30
00:02:34,800 --> 00:02:36,390
hai nella tua applicazione.

31
00:02:36,590 --> 00:02:42,050
Quindi se pap ha usato Besant ha gestito quel tipo di azione che hai inviato.

32
00:02:42,180 --> 00:02:45,780
Devi restituire lo stato corrente per non interrompere la tua applicazione.

33
00:02:45,780 --> 00:02:52,550
Quindi con questo salviamo tutti questi file e vedrai che se torni indietro funziona ancora come prima.

34
00:02:52,650 --> 00:02:58,760
Ma ora con questo riduttore centrale ancora ma con l'istruzione switch.

