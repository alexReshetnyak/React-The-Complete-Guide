1
00:00:02,210 --> 00:00:08,400
En la ltima conferencia aprendemos cmo pasar todos los datos con la accin de cmo recuperarlos.

2
00:00:08,400 --> 00:00:13,880
Ahora con eso aprendemos algunos de los conceptos bsicos de usar read x.

3
00:00:14,100 --> 00:00:21,450
Ahora, si echamos un vistazo a nuestro reductor aqu, hay algo que probablemente notar

4
00:00:21,450 --> 00:00:25,200
que ya tiene muchas repeticiones de cdigo.

5
00:00:25,260 --> 00:00:30,200
Ahora no hay nada de malo con el uso de las declaraciones IF si te gusta que utilices ese enfoque.

6
00:00:30,660 --> 00:00:36,500
Pero tambin podramos usar un tipo diferente de expresin de declaracin en javascript.

7
00:00:36,500 --> 00:00:45,630
La declaracin de cambio podra cambiar al tipo de accin y luego definir casos mltiples como el caso

8
00:00:45,630 --> 00:00:46,680
de Inkerman.

9
00:00:47,070 --> 00:00:48,250
Entonces tenemos dos puntos.

10
00:00:48,270 --> 00:00:56,820
As que la sintaxis normal de JavaScript y que aqu podramos devolver este estado actualizado para el caso de incremento y ahora

11
00:00:57,140 --> 00:00:59,240
podemos deshacernos de esa declaracin if.

12
00:00:59,430 --> 00:01:01,830
Y ahora podemos, por supuesto, agregar ms casos aqu.

13
00:01:01,830 --> 00:01:08,220
Entonces, un caso para Decora significaba y no necesito agregar una declaracin de interrupcin porque el retorno sale automticamente

14
00:01:08,430 --> 00:01:14,340
de la disfuncin, nunca llegamos a esta lnea y solo, por supuesto, si entramos en este caso

15
00:01:14,340 --> 00:01:15,450
en primer lugar.

16
00:01:15,750 --> 00:01:19,380
Entonces, para detrimento, haramos todo el registro para convertir un estado aqu.

17
00:01:19,440 --> 00:01:26,820
Devolveremos este estado y ahora podemos repetir esto, por supuesto, para todos los casos, as que

18
00:01:26,820 --> 00:01:31,130
agregue rpidamente un caso para agregar un caso para restar.

19
00:01:31,380 --> 00:01:36,620
Y, por supuesto, estos identificadores an tienen que coincidir con los identificadores que utiliza al despachar las acciones.

20
00:01:36,810 --> 00:01:45,810
Entonces, el identificador que dijo aqu en el tipo en el contenedor del contador y ahora todos extraen el cdigo de

21
00:01:45,810 --> 00:01:46,870
estas sentencias if.

22
00:01:46,920 --> 00:01:54,990
Agrguelos al cdigo para sus respectivos casos, reformatee el cdigo y elimine estas declaraciones if.

23
00:01:54,990 --> 00:02:01,560
Y ahora nuestro productor es un poco ms gil y un poco ms fcil de leer porque est muy claro

24
00:02:01,560 --> 00:02:06,170
que estamos viendo el tipo de direccin y luego solo estamos manejando casos diferentes.

25
00:02:06,420 --> 00:02:12,000
Y si no lo hacemos en ninguno de estos casos, siempre tenemos la declaracin de

26
00:02:12,000 --> 00:02:15,620
devolucin predeterminada aqu al final que devuelve nuestro estado inicial.

27
00:02:15,840 --> 00:02:21,810
O si esto ya fue establecido el estado actual, esto es especialmente importante ya que debes

28
00:02:21,810 --> 00:02:28,590
tener en cuenta que si tuviramos que despachar acciones que tienen un tipo que no est cubierto aqu,

29
00:02:28,590 --> 00:02:34,740
an correramos por ese reductor porque cuando alguna vez despachas algo va desde ese nico reductor que

30
00:02:34,800 --> 00:02:36,390
tiene en su aplicacin.

31
00:02:36,590 --> 00:02:42,050
Por lo tanto, si pap us Besant, manej ese tipo de accin que haba despachado.

32
00:02:42,180 --> 00:02:45,780
Debe devolver el estado actual para no interrumpir su aplicacin.

33
00:02:45,780 --> 00:02:52,550
As que con eso guardemos todos estos archivos y vers que si vuelves funcionar igual que antes.

34
00:02:52,650 --> 00:02:58,760
Pero ahora con estos reductores centrales an est ah pero con la declaracin de cambio.

