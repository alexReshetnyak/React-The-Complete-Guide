1
00:00:02,270 --> 00:00:04,960
Entonces, lea realmente rescatar el acceso de lectura o escribir.

2
00:00:05,090 --> 00:00:08,780
Nos permite resolver todos nuestros problemas, no?

3
00:00:08,780 --> 00:00:10,340
Cmo funciona el relax en

4
00:00:10,640 --> 00:00:16,200
Bien, recuerda la idea de tener un lugar central donde administraste el estado completo.

5
00:00:16,280 --> 00:00:20,120
Dije que no podemos usar una variable global para la deuda y no podemos.

6
00:00:20,450 --> 00:00:28,190
Pero redox nos da un cierto flujo de datos de cierta manera de manejar los datos que luego podemos integrar

7
00:00:28,340 --> 00:00:31,190
con el paquete de nmeros en el reactor.

8
00:00:31,460 --> 00:00:35,310
Entonces reac reacciona a los cambios de datos.

9
00:00:35,450 --> 00:00:37,480
Ahora le mostraremos cmo funciona esa integracin.

10
00:00:37,610 --> 00:00:40,260
Pero primero djame describir sus trabajos de reduccin.

11
00:00:40,310 --> 00:00:44,720
Cmo gestiona los datos y cmo se actualiza al final?

12
00:00:44,720 --> 00:00:49,440
Se trata de una tienda central que tenemos en cada aplicacin redox.

13
00:00:49,670 --> 00:00:56,280
Y quiero resaltar que redox es una biblioteca de terceros que fueron actos totalmente independientes de la reaccin.

14
00:00:56,330 --> 00:01:02,160
Se ve ms a menudo junto con reaccionar, pero tericamente es independiente.

15
00:01:02,450 --> 00:01:04,310
Entonces, todo se trata de una tienda central.

16
00:01:04,310 --> 00:01:07,370
Esta tienda almacena todo el estado de la aplicacin.

17
00:01:07,370 --> 00:01:08,290
Es as de simple.

18
00:01:08,330 --> 00:01:12,800
Puedes pensarlo como un objeto javascript gigante.

19
00:01:13,070 --> 00:01:18,860
Ahora en una aplicacin de reactivacin y de nuevo la lectura X es independiente de la reaccin, pero es el caso de uso

20
00:01:18,860 --> 00:01:21,350
ms comn y, al final, es un curso de reactivacin.

21
00:01:21,530 --> 00:01:29,630
Tenemos componentes y un componente probablemente quiera manipular u obtener el estado de aplicacin dictado.

22
00:01:29,630 --> 00:01:34,990
Ahora no hace eso manipulando directamente ese objeto javascript central.

23
00:01:35,090 --> 00:01:42,320
sistema de reactividad de reaccin y, lo que es peor, hara que nuestra tienda fuera bastante impredecible si editamos

24
00:01:42,380 --> 00:01:50,450
desde cualquier lugar de nuestra aplicacin que nunca podemos ver dnde realizamos un cambio concreto que rompi nuestra aplicacin, por ejemplo.

25
00:01:50,450 --> 00:01:52,790
Eso no sera recogido por el

26
00:01:52,790 --> 00:01:59,180
Por lo tanto, tenemos un proceso claramente predecible de actualizacin del estado en el que podemos confiar y que

27
00:01:59,180 --> 00:02:02,210
es el nico proceso que puede cambiar nuestro estado.

28
00:02:02,510 --> 00:02:09,310
De hecho, Rydex se trata de tener un proceso claramente definido de cmo puede cambiar su estado.

29
00:02:09,650 --> 00:02:16,430
El primer bloque de construccin adems de la tienda central son las acciones que se envan desde su

30
00:02:16,430 --> 00:02:23,540
cdigo de JavaScript en un reactor que se envan desde sus componentes y la accin es solo un paquete

31
00:02:23,540 --> 00:02:28,740
de informacin y finaliza con un tipo algo como agregar ingrediente o eliminar ingrediente.

32
00:02:28,790 --> 00:02:31,960
Entonces una descripcin que podras decir posiblemente.

33
00:02:32,060 --> 00:02:33,950
Tambin tiene una carga til.

34
00:02:33,950 --> 00:02:41,360
Por ejemplo, si la accin es un ingrediente que necesitamos para toda la informacin pasada, qu ingrediente y eso tambin

35
00:02:41,360 --> 00:02:43,360
sera parte de la accin.

36
00:02:43,370 --> 00:02:49,070
Entonces, es un paquete de informacin que estamos enviando al mundo o para leer X para ser precisos.

37
00:02:49,580 --> 00:02:52,730
Esa accin no llega directamente a una tienda.

38
00:02:52,760 --> 00:02:57,290
Esa accin no tiene lgica, no sabe cmo operar la tienda.

39
00:02:57,290 --> 00:03:00,240
Es solo una cosa de messenger.

40
00:03:00,290 --> 00:03:03,160
Cambiar la tienda es un reductor.

41
00:03:03,170 --> 00:03:09,010
Ahora aqu he escrito los reductores porque en realidad podemos combinar mltiples reductores en uno.

42
00:03:09,230 --> 00:03:14,590
Pero al final terminars con un reductor de ruta que est conectado directamente a tu tienda

43
00:03:14,590 --> 00:03:15,160
al final.

44
00:03:15,170 --> 00:03:21,440
Entonces la accin llega al productor y dado que la accin contiene un tipo, el reductor puede verificar el

45
00:03:21,440 --> 00:03:22,420
tipo de accin.

46
00:03:22,430 --> 00:03:30,600
Por ejemplo, si es un ingrediente y no encontramos un cdigo para el tipo de datos de accin en el

47
00:03:30,740 --> 00:03:39,020
reductor, el reductor al final es solo una funcin pura que recibe la accin y el estado anterior como entrada

48
00:03:39,020 --> 00:03:42,340
y que luego arroja un estado actualizado .

49
00:03:42,350 --> 00:03:50,210
Lo importante es que el productor debe ejecutar cdigo sncrono solo sin cdigo asncrono, sin efectos

50
00:03:50,210 --> 00:03:53,650
secundarios, HTP no solicita nada de eso.

51
00:03:53,720 --> 00:03:59,970
Ms adelante aprender cmo puede implementar el cdigo asncrono, pero en los reductores solo ingresa y

52
00:04:00,110 --> 00:04:02,020
no genera nada entre medio.

53
00:04:02,150 --> 00:04:03,320
Sin demora.

54
00:04:03,770 --> 00:04:09,890
As que este es su douceur y los reductores recortan el estado actualizado que luego se almacena en la

55
00:04:09,890 --> 00:04:12,050
tienda nuevamente y reemplaza el estado anterior.

56
00:04:12,050 --> 00:04:15,120
Y eso tiene que hacerse de una manera inmutable.

57
00:04:15,170 --> 00:04:20,930
Por lo tanto, siempre devolvemos un nuevo estado que puede basarse en el anterior, pero que tcnicamente es

58
00:04:20,960 --> 00:04:26,840
un nuevo objeto javascript porque los objetos son tipos de referencia y Javascript, y queremos asegurarnos de que

59
00:04:26,840 --> 00:04:28,280
no cambiemos accidentalmente el anterior.

60
00:04:28,520 --> 00:04:31,890
Entonces, as es como el reductor maneja la accin.

61
00:04:31,910 --> 00:04:33,800
Ahora la tienda est actualizada.

62
00:04:33,830 --> 00:04:40,610
Cmo volvemos a poner el estado actualizado en nuestro componente, para eso usamos el modelo de suscripcin,

63
00:04:41,270 --> 00:04:48,920
distorsiona todas las suscripciones cada vez que el estado cambia cada vez que se actualiza un estado en la tienda.

64
00:04:49,190 --> 00:04:56,340
Y, por supuesto, nuestro componente puede suscribirse a las actualizaciones de la tienda y luego recibe esa actualizacin automticamente.

65
00:04:56,360 --> 00:04:57,630
Esto es lo simple que es.

66
00:04:57,650 --> 00:05:03,450
Funciona a travs de un modelo de suscripcin y simplemente decimos pago. Quiero recibir notificaciones cada vez que cambia

67
00:05:03,450 --> 00:05:04,130
el estado.

68
00:05:04,260 --> 00:05:06,830
As como decimos hola, quiero cambiar el estado.

69
00:05:06,840 --> 00:05:09,390
Aqu hay una accin que describe mis planes.

70
00:05:09,410 --> 00:05:10,680
Fluye el redux?

71
00:05:10,730 --> 00:05:12,060
Esto tiene redux funciona.

72
00:05:12,060 --> 00:05:15,650
Muy pocos radicales, aunque vamos a verlo en accin en el prximo Electra.

