1
00:00:02,180 --> 00:00:07,940
Estou de volta ao projeto de hambrguer e agora quero adicionar alguns testes. Para isso, devemos primeiro ter certeza de

2
00:00:07,940 --> 00:00:13,600
que o npm start no est rodando porque precisamos instalar alguns pacotes adicionais, afinal

3
00:00:13,670 --> 00:00:16,870
no estamos apenas usando jest mas tambm enzimas.

4
00:00:16,940 --> 00:00:22,700
Agora, se tivermos uma olhada no nosso pacote. json e rolamos um pouco para cima, vemos que a piada

5
00:00:22,760 --> 00:00:26,620
est de fato instalada, voc pode ter uma verso diferente, mas ela deve ser instalada,

6
00:00:26,780 --> 00:00:27,930
mas a enzima no .

7
00:00:28,100 --> 00:00:33,320
Ento, vamos primeiro instalar tudo isso com o npm install --save enzyme, agora

8
00:00:33,380 --> 00:00:35,430
que sozinho no vai dar

9
00:00:35,510 --> 00:00:41,830
certo, precisamos instalar dois pacotes adicionais para que ele funcione corretamente com o jest e reaja.

10
00:00:41,870 --> 00:00:48,820
A primeira  que precisamos instalar o pacote de renderizao de teste de

11
00:00:48,980 --> 00:00:55,430
reao, que  uma dependncia da enzima que precisamos instalar separadamente e

12
00:00:55,440 --> 00:00:58,130
precisamos instalar um adaptador do

13
00:00:58,130 --> 00:01:07,310
pacote de enzima para nossa verso de reao atual. Ento, aqui est a enzima adapter-react-16 verso 4 e reage 16.

14
00:01:07,320 --> 00:01:10,160
Todos estes agora so adicionados ao pacote. json e, claro, instalado

15
00:01:10,200 --> 00:01:16,650
na pasta de mdulos de n e uma vez que isso terminar, estamos prontos para seguir em frente e

16
00:01:16,650 --> 00:01:17,920
escrever nosso primeiro teste.

17
00:01:17,970 --> 00:01:19,350
Ento aqui terminou, agora

18
00:01:19,350 --> 00:01:26,180
vamos escrever nosso primeiro teste e eu quero comear a escrever um teste para um componente porque obviamente

19
00:01:26,190 --> 00:01:26,870
em reagir,

20
00:01:26,970 --> 00:01:29,630
ns falamos constantemente sobre componentes, ento por

21
00:01:29,670 --> 00:01:32,400
que no comeamos a testar um.

22
00:01:32,400 --> 00:01:38,640
Agora, deixe-me comear com um componente funcional aqui, porque  claro que  uma maneira super fcil de testar e

23
00:01:38,790 --> 00:01:42,840
depois tambm passamos para os contineres e, a partir da, para o redux.

24
00:01:42,840 --> 00:01:48,450
Agora eu quero comear com o meu componente de itens de navegao aqui, na pasta de navegao na

25
00:01:48,450 --> 00:01:51,480
pasta de componentes, que  o componente de itens de

26
00:01:51,480 --> 00:01:58,440
navegao, agora tenha em mente que a maioria dos seus componentes reagentes so apenas funes e, portanto, eles dependem apenas dos adereos

27
00:01:58,440 --> 00:01:59,810
que recebem isso 

28
00:01:59,850 --> 00:02:02,800
algo que voc deve ter em mente para testar.

29
00:02:02,820 --> 00:02:05,950
Agora vamos criar um arquivo de teste para este componente, portanto, prximo a ele na

30
00:02:05,950 --> 00:02:13,200
mesma pasta, eu adicionarei um novo arquivo que eu chamarei NavigationItems. teste. js

31
00:02:13,350 --> 00:02:21,300
o. teste. js  importante porque  automaticamente captado pelo

32
00:02:21,340 --> 00:02:22,110
aplicativo create

33
00:02:22,110 --> 00:02:28,260
react, uma vez que executamos um comando especial e, ento, seremos includos no teste e, portanto, sero testados.

34
00:02:28,260 --> 00:02:36,750
Agora dentro deste arquivo de teste, agora posso comear a escrever meu teste e um teste usa apenas por padro e,

35
00:02:36,750 --> 00:02:41,040
por outro lado, nos fornece alguns mtodos para definir o teste.

36
00:02:41,280 --> 00:02:44,800
O primeiro mtodo importante  o mtodo de descrio,

37
00:02:44,850 --> 00:02:47,130
voc no precisa import-lo nesse arquivo,

38
00:02:47,130 --> 00:02:51,870
ele ser disponibilizado automaticamente em nosso projeto de criao de aplicativos de

39
00:02:51,870 --> 00:02:59,070
resposta assim que executarmos o comando de teste. Descrever  uma funo que leva dois argumentos, o primeiro 

40
00:02:59,070 --> 00:03:01,740
apenas uma descrio do pacote de teste que

41
00:03:01,740 --> 00:03:03,110
este arquivo contm, ento

42
00:03:03,300 --> 00:03:09,630
aqui eu simplesmente nomeei esse NavigationItems e estou escrevendo como um elemento jsx, mas isso no  necessrio.

43
00:03:09,840 --> 00:03:13,040
Isto  apenas o que voc ver mais tarde na sada

44
00:03:13,080 --> 00:03:17,790
do console, ento deve ser algo que permita identificar quais tipos de testes rodaremos aqui.

45
00:03:17,850 --> 00:03:22,980
A parte mais interessante vem em um segundo argumento, que  sua funo de teste.

46
00:03:22,980 --> 00:03:28,620
 uma funo javascript normal e eu vou usar uma funo de seta ES6 aqui, aqui voc vai

47
00:03:28,620 --> 00:03:32,850
descrever, voc vai escrever seus testes reais. Agora, para fazer isso, voc

48
00:03:32,880 --> 00:03:35,470
escreve um teste escrevendo, essa 

49
00:03:35,580 --> 00:03:38,760
outra funo que estar disponvel apenas.

50
00:03:38,880 --> 00:03:43,590
Ele descreve ou permite que voc escreva um teste individual, ele

51
00:03:43,620 --> 00:03:45,630
tambm leva dois argumentos.

52
00:03:45,750 --> 00:03:50,960
O primeiro  novamente apenas uma string, uma descrio que aparecer no console e tipicamente

53
00:03:51,240 --> 00:03:56,270
voc apenas completa a sentena para que ela possa descrever o que deve ser feito.

54
00:03:56,280 --> 00:03:59,030
Por isso, e agora vamos olhar

55
00:03:59,040 --> 00:04:01,580
para o nosso componente NavigationItems, digamos

56
00:04:01,770 --> 00:04:09,660
por padro se ns no estivermos autenticados, este componente deve renderizar um item de navegao, o segundo no

57
00:04:10,290 --> 00:04:15,590
deve ser renderizado e que aqui ele deve render mais um /

58
00:04:15,810 --> 00:04:18,560
auth, por isso, deve renderizar itens

59
00:04:18,630 --> 00:04:20,830
de navegao se no formos autenticados.

60
00:04:21,240 --> 00:04:24,240
Ento  isso que queremos testar,

61
00:04:24,240 --> 00:04:32,700
ento vamos escrever a sentena, ela deve renderizar para elementos de item de navegao se no for autenticada.

62
00:04:33,090 --> 00:04:36,510
Portanto, esta  apenas a minha descrio e no importa o que

63
00:04:36,510 --> 00:04:41,870
voc escreve aqui, isso no  analisado ou algo assim, deve ser algo significativo que voc reconhece em

64
00:04:41,860 --> 00:04:46,140
um console, porque se o teste falhar, voc quer saber qual teste falhou .

65
00:04:46,590 --> 00:04:49,070
Ento esse  o primeiro argumento para

66
00:04:49,080 --> 00:04:56,610
a funo, o segundo argumento  agora novamente uma funo de teste descrevendo o teste real, aqui que  apenas uma

67
00:04:56,610 --> 00:04:57,660
funo javascript normal

68
00:04:57,660 --> 00:05:03,130
Eu vou novamente usar uma funo de seta e aqui, ns escrevemos nosso lgica de teste.

69
00:05:03,390 --> 00:05:10,620
Agora, o que queremos fazer  criar uma instncia desse componente, como seria renderizado para o dom, para

70
00:05:10,620 --> 00:05:17,250
o real por meio de reagir e, em seguida, dar uma olhada no componente processado e ver

71
00:05:17,250 --> 00:05:22,920
o que foi processado para o caso em que o isAutenticated prop  falsa.

72
00:05:22,920 --> 00:05:28,770
Agora voc pode pensar que, para isso, obviamente precisamos renderizar todo o aplicativo reagente,

73
00:05:28,770 --> 00:05:35,520
porque os itens de navegao so apenas uma pequena pea em todo o aplicativo de reao,

74
00:05:35,520 --> 00:05:43,800
que  onde entra uma enzima, este pacote de testes. Enzima nos permite apenas tornar este componente de itens de navegao

75
00:05:43,800 --> 00:05:46,210
independente de todo o outro aplicativo de

76
00:05:46,320 --> 00:05:52,980
reao, essa  a idia por trs do pacote de enzimas, que podemos realmente escrever testes unitrios, testes

77
00:05:52,980 --> 00:05:56,350
isolados, testes em que no precisamos renderizar reagir app.

78
00:05:56,580 --> 00:06:04,120
Ento, vamos importar a enzima ento, eu preciso importar algo da enzima, agora eu vou voltar para aquela coisa, mas primeiro eu

79
00:06:04,150 --> 00:06:04,970
tambm precisarei

80
00:06:04,970 --> 00:06:12,040
configurar a enzima e conect-la  minha verso de reao. Para isso, eu preciso importar o adaptador

81
00:06:12,050 --> 00:06:17,950
e  uma exportao padro para que voc possa nomear o que quiser.

82
00:06:18,050 --> 00:06:25,820
O adaptador do adaptador de enzima reage 16, este pacote e do pacote de enzima, agora s precisamos importar algo

83
00:06:25,820 --> 00:06:27,220
especfico, esta  uma

84
00:06:27,230 --> 00:06:28,580
exportao nomeada, ento

85
00:06:28,580 --> 00:06:34,260
precisamos de chaves, a funo de configurao. Com essas duas importaes adicionadas aqui

86
00:06:34,260 --> 00:06:41,120
acima da funo descrita, agora podemos executar configurar e passar um objeto javascript para configurar.

87
00:06:41,270 --> 00:06:47,990
L devemos configurar uma propriedade de adaptador e designar um novo adaptador como uma funo de construtor, de

88
00:06:47,990 --> 00:06:54,820
modo que este adaptador seja instanciado com um novo adaptador e isso  tudo, com essa enzima conectada.

89
00:06:55,250 --> 00:07:01,760
Agora, queremos renderizar um componente de itens de navegao e, em seguida, analis-lo, pois essa

90
00:07:01,760 --> 00:07:04,660
enzima nos fornece um mtodo auxiliar especfico

91
00:07:04,840 --> 00:07:06,140
que podemos usar,

92
00:07:06,290 --> 00:07:12,820
importamos isso tambm,  a funo superficial. Rasa  a forma mais popular ou melhor de

93
00:07:12,830 --> 00:07:14,860
renderizar componentes reagentes em muitas circunstncias,

94
00:07:14,970 --> 00:07:20,510
a enzima oferece duas alternativas para as quais eu tambm o indicarei mais tarde, mas

95
00:07:20,510 --> 00:07:28,210
superficial  o que voc deve usar sempre que possvel, porque uma coisa superficial  o componente com todo o seu

96
00:07:28,640 --> 00:07:31,750
contedo, mas o contedo no  profundamente renderizado.

97
00:07:31,850 --> 00:07:39,860
Portanto, o componente de itens de navegao aqui tem componentes de itens de navegao, mas eles so renderizados apenas como espaos reservados,

98
00:07:39,860 --> 00:07:40,840
o contedo deles

99
00:07:40,970 --> 00:07:46,430
no  renderizado e isso,  claro,  importante para criar testes isolados nos quais

100
00:07:46,490 --> 00:07:50,080
no renderizamos uma subrvore inteira de componentes , ns apenas

101
00:07:50,180 --> 00:07:55,520
queremos renderizar este componente e saber o que est dentro dele sem renderizar tudo o

102
00:07:55,520 --> 00:07:58,460
que est aninhado dentro de seus componentes includos.

103
00:07:58,700 --> 00:08:01,540
To superficial  o mtodo para usar

104
00:08:01,880 --> 00:08:06,970
aqui e agora, queremos renderizar isso. Ento, eu vou criar uma constante que eu vou

105
00:08:06,990 --> 00:08:09,590
nomear wrapper, o nome  com voc, mas wrapper

106
00:08:09,830 --> 00:08:16,020
 usado frequentemente, onde vou chamar um raso e agora vou passar itens de navegao como um elemento de reagir.

107
00:08:16,460 --> 00:08:23,510
Ento, para isso, primeiro de tudo preciso importar isso, eu preciso para importar itens de navegao e que  a

108
00:08:23,510 --> 00:08:29,360
partir do arquivo javascript de itens de navegao que est vivendo ao lado de nosso navigationstest.

109
00:08:29,390 --> 00:08:30,660
viagem de javascript.

110
00:08:30,910 --> 00:08:34,240
Com isso podemos renderizar isso aqui como jsx e isso 

111
00:08:34,250 --> 00:08:35,110
importante, ns passamos

112
00:08:35,110 --> 00:08:39,360
o jsx para o mtodo superficial. Para que isso funcione, como

113
00:08:39,380 --> 00:08:46,070
sempre,  claro que precisamos importar reagir, pois, no importa se  um teste ou no, o

114
00:08:46,070 --> 00:08:51,270
cdigo jsx precisa ser convertido em sua alternativa de criar elemento de reativao.

115
00:08:51,290 --> 00:08:56,780
Ento, agora estamos processando superficialmente isso e estamos armazenando o resultado nesta constante de wrapper, agora

116
00:08:56,780 --> 00:09:02,770
podemos dar uma olhada no wrapper neste teste. E essa  a ltima parte do

117
00:09:02,810 --> 00:09:10,880
teste, agora nossa expectativa, para que usemos outro mtodo que seja disponibilizado globalmente por brincadeira, o mtodo expect.

118
00:09:10,880 --> 00:09:15,370
Dentro espere, ns definimos o nosso, a coisa que queremos verificar ento

119
00:09:15,650 --> 00:09:19,890
aqui eu quero verificar se o wrapper contm um determinado elemento.

120
00:09:20,210 --> 00:09:27,180
Agora no wrapper, podemos usar novamente uma funo de utilidade fornecida pelo mtodo definido por enzima, isso nos permite

121
00:09:27,400 --> 00:09:31,790
examinar o wrapper e ver se ele contm um determinado contedo e

122
00:09:31,790 --> 00:09:34,580
aqui eu quero encontrar um item de navegao.

123
00:09:34,760 --> 00:09:43,250
Ento, precisamos importar isso tambm, eu importarei o item de navegao. / item de navegao item de navegao, assim e, portanto, aqui

124
00:09:43,340 --> 00:09:50,830
no mtodo find, agora quero encontrar o item de navegao. Importante, isso agora no  um

125
00:09:50,930 --> 00:09:58,260
elemento jsx,  essa funo exportada normal do arquivo de item de navegao.

126
00:09:59,290 --> 00:10:00,220
Agora com isso

127
00:10:00,250 --> 00:10:02,390
importado, esperamos que no esperemos nada

128
00:10:02,410 --> 00:10:04,270
agora, apenas dizemos qual 

129
00:10:04,420 --> 00:10:08,250
a nossa coisa que queremos verificar, queremos verificar se encontramos isso,

130
00:10:08,250 --> 00:10:13,360
mas qual  a nossa expectativa ento? Voc poderia dizer que a expectativa  que ns o

131
00:10:13,360 --> 00:10:14,360
encontramos, mas os testes

132
00:10:14,470 --> 00:10:16,750
so um pouco mais flexveis do que isso.

133
00:10:16,900 --> 00:10:21,820
Voc poderia esperar que voc o encontrasse apenas uma ou duas vezes ou que voc

134
00:10:21,820 --> 00:10:23,530
no o encontrasse, talvez voc

135
00:10:23,530 --> 00:10:26,750
queira testar o contrrio, ento aqui temos que mudar alguma

136
00:10:26,980 --> 00:10:34,840
coisa para a chamada esperada, estes so mtodos utilitrios disponibilizados por brincadeira. . Portanto, podemos esperar encontrar o item de navegao como dissemos anteriormente,

137
00:10:34,840 --> 00:10:42,250
duas vezes, se no formos autenticados, ento o item de navegao para metade do comprimento  o que podemos chamar agora

138
00:10:42,250 --> 00:10:43,170
e voc ver

139
00:10:43,390 --> 00:10:45,540
que h alguns mtodos auxiliares.

140
00:10:45,670 --> 00:10:47,870
O comprimento que esperamos encontrar  dois,

141
00:10:47,890 --> 00:10:49,210
queremos encontrar dois, ento

142
00:10:49,360 --> 00:10:51,420
isso  automaticamente adicionado em uma matriz

143
00:10:51,520 --> 00:10:54,260
e queremos que isso tenha um comprimento de 2.

144
00:10:54,460 --> 00:11:02,070
Agora ele vai ter Autenticado configurado como falso porque no estamos passando este suporte, lembra? Estamos apenas renderizando itens de navegao

145
00:11:02,060 --> 00:11:06,400
superficialmente, no estamos enviando nenhum acessrio aqui.

146
00:11:06,430 --> 00:11:12,670
Agora, se ns renderiz-lo assim, isAuthenticated no  passado e, portanto, ser tratado como falso.

147
00:11:12,820 --> 00:11:15,790
Ento, com isso, este teste deve realmente ter sucesso.

148
00:11:16,120 --> 00:11:18,930
Agora vamos descobrir como podemos test-lo ento.

149
00:11:19,180 --> 00:11:21,150
Para isso, vamos dar uma olhada no pacote. json arquivo e

150
00:11:21,180 --> 00:11:27,220
l, se ns rolar todo o caminho at o fundo um pouco, no todo o caminho me desculpe um

151
00:11:27,220 --> 00:11:28,740
pouco abaixo de nossas dependncias,

152
00:11:28,930 --> 00:11:30,800
vemos a seo de scripts.

153
00:11:31,060 --> 00:11:32,380
Conhecemos o script de

154
00:11:32,380 --> 00:11:33,720
incio, isso  executado

155
00:11:33,790 --> 00:11:35,710
no navegador, veremos o script

156
00:11:35,710 --> 00:11:43,670
de construo em breve, agora precisamos do script de teste. E podemos executar isso com o teste de execuo do npm ou com o teste do

157
00:11:43,690 --> 00:11:46,720
npm, como iniciar um script especial no qual no precisamos executar o comando.

158
00:11:46,950 --> 00:11:52,810
Agora, isso executar todos os testes e procurar automaticamente todos os arquivos de teste, examinando

159
00:11:52,810 --> 00:11:54,780
o final, teste. js.

160
00:11:54,980 --> 00:11:58,430
Agora eu nunca salvei este arquivo, ento eu devo fazer isso agora, isso

161
00:11:58,450 --> 00:12:00,790
ir automaticamente executar novamente os nossos testes, ele est

162
00:12:00,790 --> 00:12:02,370
assistindo os arquivos de teste.

163
00:12:02,710 --> 00:12:05,480
Esse aviso em relao ao polyfill pode

164
00:12:05,710 --> 00:12:13,840
ser ignorado, mais interessante  se eu expandir isso que passamos um conjunto de testes, o conjunto de testes  a funo

165
00:12:14,260 --> 00:12:16,900
descrita e um passou no teste em

166
00:12:16,900 --> 00:12:19,930
geral, esse  o teste aqui, a funo.

167
00:12:20,000 --> 00:12:23,240
Ento nosso teste  passado como espervamos e

168
00:12:23,380 --> 00:12:26,860
 assim que escrevemos um teste para um componente.

169
00:12:26,860 --> 00:12:32,570
Agora vamos adicionar alguns testes adicionais a este componente antes de mergulharmos em testar outras coisas.

