1
00:00:02,000 --> 00:00:08,070
Aprendimos a probar los contenedores y mencion que la parte importante es que no prueba la

2
00:00:08,070 --> 00:00:09,060
conexin con redux,

3
00:00:09,270 --> 00:00:12,630
cmo prueba el redux entonces, lo prueba en absoluto?

4
00:00:12,630 --> 00:00:17,340
La respuesta es s, la evaluamos, pero debemos tener cuidado con lo que probamos.

5
00:00:17,340 --> 00:00:24,100
Probablemente no queremos probar cadenas de acciones y reductores y estado muy complejos, al final los

6
00:00:24,100 --> 00:00:30,540
reductores son la carne que queremos probar especialmente si seguimos el patrn de no poner

7
00:00:30,540 --> 00:00:36,740
mucha lgica en los creadores de acciones. Entonces, probar los reductores es muy simple, no

8
00:00:36,840 --> 00:00:42,000
hay sincronizacin, as que no tenemos que lidiar con el cdigo asincrnico y

9
00:00:42,000 --> 00:00:43,260
solo hay funciones,

10
00:00:43,410 --> 00:00:48,110
pasamos algo, obtenemos algo como, por ejemplo, para la autenticacin, digamos que

11
00:00:48,180 --> 00:00:50,600
queremos escribir una prueba para esta.

12
00:00:50,640 --> 00:00:57,510
Entonces agrega una auth. prueba. js file, aqu ni siquiera necesitamos enzimas

13
00:00:57,510 --> 00:00:58,230
porque no

14
00:00:58,230 --> 00:01:05,820
estamos probando ningn componente de reaccin, no necesitamos renderizar nada, solo probamos el cdigo normal de JavaScript, probamos funciones, la funcin reductora.

15
00:01:06,270 --> 00:01:16,230
Entonces, lo que acabo de hacer aqu est en el archivo de prueba. Primero importo la funcin del reductor. / auth. js en este archivo, en este caso as

16
00:01:16,230 --> 00:01:20,790
y ahora tambin necesito importar los tipos de accin, as

17
00:01:20,910 --> 00:01:26,970
como los tipos de accin, import todo. / acciones tipos de accin

18
00:01:26,970 --> 00:01:28,810
y ahora solo

19
00:01:29,010 --> 00:01:30,730
escribimos la prueba.

20
00:01:30,900 --> 00:01:32,680
As que de nuevo describimos,

21
00:01:33,030 --> 00:01:39,730
ahora le doy a esto una descripcin clara que podemos ver en la consola como el auth reductor y

22
00:01:40,170 --> 00:01:44,200
luego en la funcin aqu, podemos escribir las muchas pruebas que tenemos.

23
00:01:44,340 --> 00:01:49,140
Obviamente, podemos utilizar beforeEach para hacer alguna configuracin general si es

24
00:01:49,440 --> 00:01:51,730
necesario, pero quiero que comiences

25
00:01:51,810 --> 00:01:52,800
con las

26
00:01:52,800 --> 00:01:59,550
pruebas, as que ahora veamos lo que probamos, por ejemplo, pruebamos que obtenemos el estado inicial

27
00:01:59,550 --> 00:02:02,680
correcto si realmente lo hacemos pasarle un

28
00:02:02,730 --> 00:02:08,340
tipo de accin no vlida, por lo que debera devolver el estado inicial,

29
00:02:08,340 --> 00:02:09,920
podra ser la descripcin aqu.

30
00:02:10,620 --> 00:02:18,060
Y luego paso mi funcin javascript y all, ahora espero mi reductor si lo ejecuto, as que ahora adentro espero,

31
00:02:18,240 --> 00:02:19,350
simplemente ejecuto el

32
00:02:19,350 --> 00:02:25,140
cdigo que quiero probar, igual que antes con wrapper pero ahora con una funcin javascript

33
00:02:25,140 --> 00:02:31,860
normal y lo har de hecho pasan sin definir aqu como un estado inicial, ese es el caso

34
00:02:31,860 --> 00:02:39,840
cuando el estado recin se est configurando al comienzo de nuestra aplicacin y la accin es solo un objeto vaco, por

35
00:02:39,850 --> 00:02:42,250
lo que no hay una accin especfica.

36
00:02:42,270 --> 00:02:47,470
Entonces, en este caso, espero que mi estado sea igual y ahora

37
00:02:47,730 --> 00:02:53,910
debera ser igual a mi estado inicial definido en la funcin reductora, por supuesto,

38
00:02:54,000 --> 00:02:56,660
as que este objeto JavaScript, que

39
00:02:56,880 --> 00:02:58,550
es exactamente lo que

40
00:02:58,560 --> 00:03:01,560
prob, debera ser igual a ese objeto.

41
00:03:01,560 --> 00:03:05,080
Ahora, si guardamos ese archivo, esto debera ejecutarse tambin,

42
00:03:05,220 --> 00:03:08,060
y es auth. prueba. js se ejecuta all, ahora

43
00:03:08,370 --> 00:03:13,710
vemos que eso es exitoso y as de fcil es probar un reductor. Por supuesto, tambin puede

44
00:03:13,710 --> 00:03:21,030
probar casos especficos, as podemos escribir otra prueba donde debe almacenar el

45
00:03:21,170 --> 00:03:23,760
token al iniciar sesin

46
00:03:23,760 --> 00:03:34,340
y ahora en esta funcin aqu, realmente espero ejecutar una funcin reductora con digamos el estado inicial

47
00:03:34,340 --> 00:03:38,920
y podramos establecer esto arriba en beforeEach.

48
00:03:39,110 --> 00:03:39,460
Entonces

49
00:03:39,470 --> 00:03:48,190
ejecuto la funcin del reductor con el estado inicial y con una accin donde el tipo es actionTypes. AUTH_SUCCESS y ahora, por supuesto, tenemos que pasar la carga til

50
00:03:48,200 --> 00:03:54,360
correcta con esa accin aqu tambin, as que no solo el tipo sino tambin la carga

51
00:03:54,500 --> 00:03:58,570
de esa accin y podemos ver esa carga til en

52
00:03:58,750 --> 00:04:03,710
nuestro archivo de creadores de acciones. En AUTH_SUCCESS, tambin pasamos el token

53
00:04:03,770 --> 00:04:07,890
de identificacin y el ID de usuario, por lo que tambin

54
00:04:07,890 --> 00:04:17,120
deberamos pasar aqu, y eso podra ser un token, el valor exacto, por supuesto, no importa para la prueba y alguna identificacin de usuario.

55
00:04:17,500 --> 00:04:21,040
Ahora esa es la funcin reductora, cmo la ejecutamos.

56
00:04:21,040 --> 00:04:27,490
Ahora esperamos escupir un estado actualizado que respete este token y la identificacin de usuario, por lo que el

57
00:04:27,490 --> 00:04:37,270
estado actualizado debera ser igual a nuestro estado inicial en general, pero el token por supuesto debe ser un token y aqu, ese debe ser el valor exacto aqu,

58
00:04:37,270 --> 00:04:42,650
si no fuera as, algo estara mal dentro de nuestro reductor, esa es la idea detrs

59
00:04:42,790 --> 00:04:44,610
de la prueba, la identificacin

60
00:04:45,620 --> 00:04:48,910
del usuario debera ser, por lo tanto, una identificacin de usuario.

61
00:04:48,960 --> 00:04:57,600
Ahora, si guardamos esto, esto tambin pasa y, en cuanto cambio el valor esperado para algn usuario, falla

62
00:04:57,840 --> 00:05:00,020
porque ahora tenemos valores diferentes.

63
00:05:00,360 --> 00:05:07,410
Entonces, as es como tambin podemos probar los reductores, son funciones puras y, por lo tanto, muy fciles de probar.

