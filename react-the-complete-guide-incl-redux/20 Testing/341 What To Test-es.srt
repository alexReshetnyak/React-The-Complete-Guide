1
00:00:02,060 --> 00:00:06,620
Entonces, ahora que sabemos qu herramientas usamos y por qu las pruebas en general

2
00:00:06,620 --> 00:00:13,010
son una buena idea, por supuesto tenemos que descubrir qu debemos probar y, a continuacin, la respuesta es clara.

3
00:00:13,040 --> 00:00:19,760
En realidad, escribir buenas pruebas es bastante complejo y requiere mucha prctica, lo cual tambin es una de las razones por las

4
00:00:19,760 --> 00:00:22,520
cuales no se trata de una gua de pruebas

5
00:00:22,580 --> 00:00:23,700
completa, en absoluto.

6
00:00:24,050 --> 00:00:27,450
Entonces, en general, aqu hay algunas cosas que no

7
00:00:27,470 --> 00:00:29,220
le gustara probar, no desea

8
00:00:29,240 --> 00:00:33,340
probar la biblioteca, no desea probar la reaccin o axios o

9
00:00:33,590 --> 00:00:38,270
reducirla, estas son bibliotecas de terceros que ya fueron probadas por el desarrolladores.

10
00:00:38,270 --> 00:00:40,400
No necesita probar si funcionan correctamente,

11
00:00:40,460 --> 00:00:44,610
no necesita probar si la tienda, la tienda redux funciona correctamente, si

12
00:00:44,720 --> 00:00:45,940
desea probar el cdigo

13
00:00:45,980 --> 00:00:51,520
que agrega a su aplicacin y all desea probar el cdigo que no usa esa biblioteca.

14
00:00:51,530 --> 00:00:57,830
Entonces, por ejemplo, si est enviando una solicitud de publicacin de axios, no necesita probar si se envi con xito, si falla probablemente

15
00:00:58,040 --> 00:01:04,100
no tenga conexin a Internet, no es la biblioteca de axios. Por lo general, quiere falsificar los datos que obtiene

16
00:01:04,100 --> 00:01:10,700
de mi servidor en ese caso de uso y simplemente probar qu est haciendo con dichos datos devueltos, de

17
00:01:10,700 --> 00:01:11,300
modo que

18
00:01:11,420 --> 00:01:14,360
esa es la idea detrs de las pruebas.

19
00:01:14,360 --> 00:01:19,580
Adems, no desea probar conexiones demasiado complejas, especialmente al reaccionar, existe el peligro

20
00:01:19,580 --> 00:01:24,770
de que haga clic en un botn en un componente y cambie algo

21
00:01:24,770 --> 00:01:26,770
en un componente totalmente diferente.

22
00:01:26,780 --> 00:01:33,050
Ahora no tienes que probar si reaccionar es capaz de utilizar el concepto de utilera para emitir un evento y pasarlo

23
00:01:33,050 --> 00:01:33,660
a otro,

24
00:01:33,920 --> 00:01:39,080
estaras interesado en probar si el botn hace clic en tu reaccin activa un elemento especfico en

25
00:01:39,080 --> 00:01:40,160
primer lugar o si

26
00:01:40,310 --> 00:01:46,790
el cambio en los datos que recibe a travs de accesorios en un componente conduce a que se muestre un resultado diferente,

27
00:01:46,850 --> 00:01:48,570
eso es lo que quiere probar.

28
00:01:48,590 --> 00:01:55,320
Hay algunas guas de prueba que dicen hasta ahora para los componentes de reaccin, solo necesita probar

29
00:01:55,320 --> 00:01:58,310
si un componente de reaccin se procesa correctamente.

30
00:01:58,310 --> 00:02:04,250
Ahora le mostrar cmo probar cosas diferentes con componentes de reaccin, pero definitivamente tenga en

31
00:02:04,250 --> 00:02:06,830
cuenta que no pruebe conexiones demasiado complejas.

32
00:02:06,890 --> 00:02:08,980
Entonces estas son las cosas que

33
00:02:09,110 --> 00:02:14,210
no quieres probar, qu vas a probar entonces? Los ejemplos tpicos son unidades aisladas,

34
00:02:14,210 --> 00:02:17,160
desea probar la funcin reductora que cre,

35
00:02:17,270 --> 00:02:20,660
desea probar la funcin componente que cre, tambin

36
00:02:20,660 --> 00:02:23,860
desea probar la salida condicional si su componente

37
00:02:23,960 --> 00:02:31,160
tiene una propiedad que lo lleva a algo que se est renderizando si esa propiedad es verdadera ,

38
00:02:31,160 --> 00:02:33,430
entonces quieres probar si esto realmente sucede.

39
00:02:33,590 --> 00:02:36,790
Qu sucede si algunos cambios de propiedad en su componente?

40
00:02:36,890 --> 00:02:39,150
Eso afecta la salida correctamente?

41
00:02:39,350 --> 00:02:42,980
Estas son cosas que quiere probar en sus pruebas unitarias.

42
00:02:42,980 --> 00:02:48,330
Ahora, con ese conocimiento adquirido, aprendamos cmo escribimos pruebas unitarias en una aplicacin de reaccin.

