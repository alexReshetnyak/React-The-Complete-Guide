1
00:00:02,100 --> 00:00:06,510
Entonces, en la ltima conferencia escribimos nuestra primera prueba, eso es por supuesto bueno,

2
00:00:06,540 --> 00:00:10,360
ahora vamos a escribir otra prueba para el mismo componente por el momento.

3
00:00:10,530 --> 00:00:16,560
As que copiar esta funcin y dentro de la funcin descrita, la pegar all,

4
00:00:16,560 --> 00:00:18,460
qu ms podramos probar?

5
00:00:18,750 --> 00:00:21,750
Bien, por supuesto, obviamente podramos probar

6
00:00:21,780 --> 00:00:29,980
lo contrario, queremos tener tres elementos de navegacin si estamos autenticados, por lo que para esto solo

7
00:00:30,000 --> 00:00:38,280
necesitamos pasar el apuntador isAuthenticated y ajustar nuestra prueba. Por lo tanto, deberamos renderizar tres elementos de navegacin si

8
00:00:38,640 --> 00:00:42,110
no se autenticara si no, pero si se autentica.

9
00:00:42,240 --> 00:00:45,930
Ahora, para eso, tenemos que cambiar el componente que

10
00:00:45,930 --> 00:00:53,340
renderizamos, ya no son elementos de navegacin, pero los elementos de navegacin con una propiedad estn autenticados

11
00:00:53,340 --> 00:01:00,420
y pasarlo as pasar automticamente a ser cierto, entonces esperamos encontrar elementos de navegacin, pero esperamos

12
00:01:00,420 --> 00:01:02,350
encontrar tres de ellos

13
00:01:02,610 --> 00:01:05,660
y eso es todo. Con las pruebas de npm

14
00:01:05,670 --> 00:01:09,850
todava en ejecucin, todo lo que tiene que hacer es guardar esto y

15
00:01:09,910 --> 00:01:12,100
ahora debera ver que pasaron dos pruebas.

16
00:01:12,330 --> 00:01:15,450
Ahora, por supuesto, podemos escribir varias pruebas como esta, pero

17
00:01:15,450 --> 00:01:21,510
si constantemente hacemos lo mismo al comienzo de la prueba, es decir, renderizamos un contenedor a pesar de que

18
00:01:21,510 --> 00:01:24,300
los accesorios cambiaron, pero tambin podemos hacerlo de manera

19
00:01:24,540 --> 00:01:31,910
diferente, por lo que si constantemente hacemos lo mismo, es un mtodo auxiliar que podemos usar dentro de la funcin descrita aqu.

20
00:01:31,950 --> 00:01:39,360
Es la funcin beforeEach, como su nombre lo indica, esta es una funcin que se ejecutar automticamente pero para

21
00:01:39,380 --> 00:01:44,470
cada una de sus pruebas, tambin tiene una funcin afterEach para la limpieza

22
00:01:44,520 --> 00:01:50,640
despus de todas sus pruebas, si es necesario. As que aqu est antes de Cada y luego antes de

23
00:01:50,670 --> 00:01:54,220
Cada, podemos hacer una configuracin general, por supuesto, antes. Cada toma una funcin

24
00:01:54,240 --> 00:01:57,780
como argumento y esta es la funcin que se ejecutar antes de cada prueba.

25
00:01:57,780 --> 00:02:03,030
Entonces con eso lo que har es crear un contenedor de variables

26
00:02:03,270 --> 00:02:10,670
con la palabra clave let y luego en beforeEach, quiero renderizar este componente con la funcin superficial

27
00:02:10,680 --> 00:02:12,950
y almacenarlo en esta variable contenedora.

28
00:02:12,990 --> 00:02:20,370
Ahora, dado que todas las funciones se ejecutan en esta funcin de descripcin externa, la variable contenedora est disponible en todas ellas, por lo

29
00:02:20,440 --> 00:02:21,460
que todo lo

30
00:02:21,660 --> 00:02:25,220
que tenemos que hacer es deshacernos de la palabra clave const,

31
00:02:25,410 --> 00:02:27,720
as y ahora tenemos acceso a la envoltura.

32
00:02:27,720 --> 00:02:30,740
Ahora con eso, si guardamos esto, debera volver a

33
00:02:31,050 --> 00:02:34,490
ejecutar todo y ahora, por supuesto, tenemos una prueba fallida.

34
00:02:34,620 --> 00:02:40,510
Ahora podemos verlo, la prueba que debe representar tres elementos de elementos de navegacin si

35
00:02:40,740 --> 00:02:48,150
falla la autenticacin y tiene sentido que lo haga porque nunca estamos autenticados, solo procesamos el contenedor una vez

36
00:02:48,180 --> 00:02:52,530
aqu y no pasamos autenticados a l, as que no estn

37
00:02:52,560 --> 00:02:54,110
autenticados, esta prueba, por

38
00:02:54,330 --> 00:02:58,570
supuesto, usa el mismo contenedor y, por lo tanto, falla.

39
00:02:58,590 --> 00:03:01,970
Ahora lo que podemos hacer aqu es dos

40
00:03:01,980 --> 00:03:09,420
cosas, la primera es que podemos usar el envoltorio y establecerlo igual a poco profundo con los elementos

41
00:03:09,420 --> 00:03:17,080
de navegacin aqu y pasar est autenticado como lo hicimos antes, si guardamos esto, ambas pruebas tienen xito.

42
00:03:17,520 --> 00:03:24,000
Esa es una opcin, pero tambin podemos usar otro mtodo til del paquete de enzimas, podemos acceder a la envoltura

43
00:03:24,000 --> 00:03:24,810
y luego

44
00:03:25,050 --> 00:03:29,500
hay un mtodo de utilera establecido que podemos ejecutar en esa envoltura, y cualquier

45
00:03:29,580 --> 00:03:37,500
elemento que almacene un elemento de reaccin superficial o de otro tipo. Y para establecer los accesorios, simplemente pasamos un objeto javascript

46
00:03:37,500 --> 00:03:43,770
con pares de valores clave donde las claves son los nombres y los valores, y los

47
00:03:43,830 --> 00:03:45,740
valores de los accesorios, as

48
00:03:45,990 --> 00:03:50,320
que aqu podramos establecer que ahora est autenticado como verdadero.

49
00:03:50,580 --> 00:03:54,310
Y ahora, si logramos ahorrar, la segunda prueba tambin pasa ahora con el

50
00:03:54,450 --> 00:04:00,420
mtodo ms elegante set helper auxiliar del paquete de enzimas. As es como puedes escribir mltiples pruebas

51
00:04:00,420 --> 00:04:03,610
y hacer que trabajen juntas muy bien.

