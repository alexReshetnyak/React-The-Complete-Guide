1
00:00:02,180 --> 00:00:07,940
Sono tornato nel progetto Burger e qui, ora voglio aggiungere qualche test. Per questo dovremmo prima assicurarci che npm

2
00:00:07,940 --> 00:00:13,600
start non sia in esecuzione perch dobbiamo installare alcuni pacchetti aggiuntivi dopotutto non

3
00:00:13,670 --> 00:00:16,870
stiamo solo usando jest ma anche enzyme.

4
00:00:16,940 --> 00:00:22,700
Ora se diamo un'occhiata al nostro pacchetto. json file e scorrono un po ', vediamo che

5
00:00:22,760 --> 00:00:26,620
jest  effettivamente installato, potresti avere una versione diversa ma dovrebbe essere

6
00:00:26,780 --> 00:00:27,930
installata ma l'enzima no.

7
00:00:28,100 --> 00:00:33,320
Quindi, prima di tutto, installiamo quello con npm install --save enzyme, ora che

8
00:00:33,380 --> 00:00:35,430
da solo non far il

9
00:00:35,510 --> 00:00:41,830
trucco per, abbiamo bisogno di installare due pacchetti aggiuntivi per farlo funzionare correttamente con jest e reagire.

10
00:00:41,870 --> 00:00:48,820
Il primo  che dobbiamo installare il pacchetto di render test react,

11
00:00:48,980 --> 00:00:55,430
che  una dipendenza dell'enzima che dobbiamo installare separatamente e dobbiamo

12
00:00:55,440 --> 00:00:58,130
installare un adattatore del pacchetto

13
00:00:58,130 --> 00:01:07,310
enzimatico nella nostra attuale versione di reazione. Quindi, ecco qui l'enzima adattatore-react-16 versione 4 reagisce 16.

14
00:01:07,320 --> 00:01:10,160
Tutti questi sono ora aggiunti al pacchetto. json e ovviamente installato

15
00:01:10,200 --> 00:01:16,650
nella cartella dei moduli del nodo e una volta che questo  finito, siamo pronti per andare avanti e scrivere

16
00:01:16,650 --> 00:01:17,920
il nostro primo test.

17
00:01:17,970 --> 00:01:19,350
Quindi qui  finito,

18
00:01:19,350 --> 00:01:26,180
ora scriviamo il nostro primo test e voglio iniziare con la scrittura di un test per un componente

19
00:01:26,190 --> 00:01:26,870
perch ovviamente

20
00:01:26,970 --> 00:01:29,630
in reazione, parliamo costantemente dei componenti, quindi

21
00:01:29,670 --> 00:01:32,400
perch non iniziamo con il test uno.

22
00:01:32,400 --> 00:01:38,640
Ora lasciatemi iniziare con un componente funzionale qui perch  ovviamente un modo molto semplice di

23
00:01:38,790 --> 00:01:42,840
test e poi passeremo anche ai contenitori e successivamente, per ridiscutere.

24
00:01:42,840 --> 00:01:48,450
Ora voglio iniziare con il mio componente degli elementi di navigazione qui, nella cartella di navigazione nella cartella

25
00:01:48,450 --> 00:01:51,480
dei componenti, che  il componente degli elementi di navigazione,

26
00:01:51,480 --> 00:01:58,440
ora tieni presente che la maggior parte dei tuoi componenti di reazione sono solo funzioni e quindi dipendono solo dagli oggetti di

27
00:01:58,440 --> 00:01:59,810
scena che ricevono 

28
00:01:59,850 --> 00:02:02,800
qualcosa che devi tenere a mente per i test.

29
00:02:02,820 --> 00:02:05,950
Ora creiamo un file di test per questo componente, quindi accanto ad esso

30
00:02:05,950 --> 00:02:13,200
nella stessa cartella, aggiunger un nuovo file che chiamer NavigationItems. test. js

31
00:02:13,350 --> 00:02:21,300
the. test. js  importante perch viene rilevato automaticamente da

32
00:02:21,340 --> 00:02:22,110
crea app

33
00:02:22,110 --> 00:02:28,260
di reazione una volta eseguito un comando speciale e quindi verr incluso nel test e quindi verr testato.

34
00:02:28,260 --> 00:02:36,750
Ora all'interno di questo file di test, ora posso iniziare a scrivere il mio test e un test viene utilizzato solo per impostazione predefinita e,

35
00:02:36,750 --> 00:02:41,040
d'altra parte, ci d un paio di metodi per definire il test.

36
00:02:41,280 --> 00:02:44,800
Il primo metodo importante  il metodo descrittivo,

37
00:02:44,850 --> 00:02:47,130
non  necessario importarlo in

38
00:02:47,130 --> 00:02:51,870
quel file, esso verr automaticamente reso disponibile nel nostro progetto crea

39
00:02:51,870 --> 00:02:59,070
react app una volta eseguito il comando test. Descrivi  una funzione che accetta due argomenti, la prima

40
00:02:59,070 --> 00:03:01,740
 solo una descrizione del bundle di

41
00:03:01,740 --> 00:03:03,110
test che questo file

42
00:03:03,300 --> 00:03:09,630
contiene, quindi chiamer semplicemente questo NavigationItems e lo scrivo come un elemento jsx ma non  necessario.

43
00:03:09,840 --> 00:03:13,040
Questo  solo ci che vedrai pi avanti nell'output della console,

44
00:03:13,080 --> 00:03:17,790
quindi dovrebbe essere qualcosa che ti permetta di identificare il tipo di test che eseguiremo qui.

45
00:03:17,850 --> 00:03:22,980
La parte pi interessante arriva in un secondo argomento, ovvero la tua funzione di test.

46
00:03:22,980 --> 00:03:28,620
 una normale funzione javascript e user qui una funzione freccia ES6, qui descriverete,

47
00:03:28,620 --> 00:03:32,850
scriverete i vostri test effettivi. Ora per farlo, scrivi

48
00:03:32,880 --> 00:03:35,470
un test scrivendolo, questa 

49
00:03:35,580 --> 00:03:38,760
un'altra funzione che sar disponibile.

50
00:03:38,880 --> 00:03:43,590
Descrive o ti permette di scrivere un singolo test,

51
00:03:43,620 --> 00:03:45,630
prende anche due argomenti.

52
00:03:45,750 --> 00:03:50,960
Il primo  di nuovo solo una stringa, una descrizione che apparir nella console e in

53
00:03:51,240 --> 00:03:56,270
genere basta completare la frase in modo che sia e quindi si descrive cosa dovrebbe fare.

54
00:03:56,280 --> 00:03:59,030
Quindi dovrebbe e ora diamo un'occhiata

55
00:03:59,040 --> 00:04:01,580
al nostro componente NavigationItems, diciamo di

56
00:04:01,770 --> 00:04:09,660
default se non siamo autentificati, questo componente dovrebbe rendere un elemento di navigazione, il secondo non dovrebbe essere

57
00:04:10,290 --> 00:04:15,590
renderizzato e qui dovrebbe renderne uno pi che porta a / auth,

58
00:04:15,810 --> 00:04:18,560
quindi dovrebbe rendere agli elementi di

59
00:04:18,630 --> 00:04:20,830
navigazione se non siamo autenticati.

60
00:04:21,240 --> 00:04:24,240
Quindi questo  ci che vogliamo

61
00:04:24,240 --> 00:04:32,700
testare, quindi scriviamo la frase, dovrebbe rendere agli elementi degli elementi di navigazione, se non autenticato.

62
00:04:33,090 --> 00:04:36,510
Quindi questa  solo la mia descrizione e non importa quello che

63
00:04:36,510 --> 00:04:41,870
scrivi qui, questo non  analizzato o qualcosa del genere, dovrebbe essere solo qualcosa di significativo che riconosci

64
00:04:41,860 --> 00:04:46,140
in una console, perch se il test fallisce, vuoi sapere quale test fallisce .

65
00:04:46,590 --> 00:04:49,070
Quindi questo  il primo argomento della funzione

66
00:04:49,080 --> 00:04:56,610
it, il secondo argomento  ora di nuovo una funzione di test che descrive il test effettivo, qui che  solo una normale

67
00:04:56,610 --> 00:04:57,660
funzione javascript che

68
00:04:57,660 --> 00:05:03,130
user di nuovo una funzione di freccia e qui, scriviamo il nostro effettivo logica di test.

69
00:05:03,390 --> 00:05:10,620
Ora quello che vogliamo fare  creare un'istanza di questo componente cos come sarebbe stata restituita alla

70
00:05:10,620 --> 00:05:17,250
dom, alla vera dom attraverso la reazione e quindi dare un'occhiata al componente renderizzato e vedere

71
00:05:17,250 --> 00:05:22,920
cosa  stato reso per il caso che il isAuthenticated prop is false.

72
00:05:22,920 --> 00:05:28,770
Ora potreste pensare che per questo, ovviamente, dobbiamo rendere l'intera applicazione reattiva

73
00:05:28,770 --> 00:05:35,520
perch gli elementi di navigazione sono solo un pezzo minuscolo nell'intera applicazione di reazione,

74
00:05:35,520 --> 00:05:43,800
cio dove entra un enzima, questo pacchetto di test. Enzyme ci consente di rendere questo componente di elementi di navigazione

75
00:05:43,800 --> 00:05:46,210
indipendente dall'intera altra applicazione di reazione, ovvero

76
00:05:46,320 --> 00:05:52,980
l'intera idea alla base del pacchetto enzimatico, che possiamo davvero scrivere test unitari, test isolati, test in cui

77
00:05:52,980 --> 00:05:56,350
non  necessario eseguire il rendering completo reagire app.

78
00:05:56,580 --> 00:06:04,120
Quindi importiamo enzima quindi, ho bisogno di importare qualcosa dall'enzima, ora torner su quel qualcosa ma prima dovr

79
00:06:04,150 --> 00:06:04,970
anche configurare

80
00:06:04,970 --> 00:06:12,040
l'enzima e collegarlo alla mia versione di reazione. Per questo, ho bisogno di importare l'adattatore

81
00:06:12,050 --> 00:06:17,950
ed  un'esportazione predefinita in modo da poter chiamare questo come vuoi.

82
00:06:18,050 --> 00:06:25,820
L'adattatore dall'adattatore enzima reagisce a 16, questo pacchetto e dal pacchetto enzimatico, ora abbiamo solo bisogno di importare qualcosa di

83
00:06:25,820 --> 00:06:27,220
specifico, questa  un'esportazione

84
00:06:27,230 --> 00:06:28,580
denominata quindi abbiamo bisogno

85
00:06:28,580 --> 00:06:34,260
di parentesi graffe, la funzione di configurazione. Con queste due importazioni aggiunte qui

86
00:06:34,260 --> 00:06:41,120
sopra la funzione descritta, ora possiamo eseguire la configurazione e passare un oggetto javascript da configurare.

87
00:06:41,270 --> 00:06:47,990
Dovremmo impostare una propriet dell'adattatore e assegnare un nuovo adattatore come funzione di costruzione, quindi

88
00:06:47,990 --> 00:06:54,820
questo adattatore viene istanziato con un nuovo adattatore e questo  tutto, con quell'enzima connesso.

89
00:06:55,250 --> 00:07:01,760
Ora vogliamo rendere un componente degli elementi di navigazione e quindi esaminarlo, poich questo enzima

90
00:07:01,760 --> 00:07:04,660
ci fornisce un metodo di supporto specifico

91
00:07:04,840 --> 00:07:06,140
che possiamo usare,

92
00:07:06,290 --> 00:07:12,820
lo importiamo anche noi,  la funzione superficiale. Shallow  il modo pi popolare o il modo

93
00:07:12,830 --> 00:07:14,860
migliore per rendere i componenti reattivi

94
00:07:14,970 --> 00:07:20,510
in molte circostanze, l'enzima offre due alternative che ti indicher anche in seguito, ma superficiale 

95
00:07:20,510 --> 00:07:28,210
quello che dovresti usare il pi spesso possibile perch una cosa  superficiale  il rendering il componente con tutto il suo

96
00:07:28,640 --> 00:07:31,750
contenuto ma il contenuto non  reso profondamente.

97
00:07:31,850 --> 00:07:39,860
Quindi il componente degli elementi di navigazione qui ha componenti di elementi di navigazione, ma questi sono solo resi come segnaposti, il

98
00:07:39,860 --> 00:07:40,840
loro contenuto non

99
00:07:40,970 --> 00:07:46,430
viene reso e naturalmente  ancora importante per creare test isolati dove non viene quindi

100
00:07:46,490 --> 00:07:50,080
eseguito il rendering di un intero sotto-albero di componenti ,

101
00:07:50,180 --> 00:07:55,520
vogliamo solo rendere questo componente e sapere cosa c' dentro senza rendere tutto ci che

102
00:07:55,520 --> 00:07:58,460
 annidato all'interno dei suoi componenti inclusi.

103
00:07:58,700 --> 00:08:01,540
Quindi, il metodo da usare qui e

104
00:08:01,880 --> 00:08:06,970
ora  cos superficiale, vogliamo renderlo. Creer quindi una costante che chiamer wrapper, il

105
00:08:06,990 --> 00:08:09,590
nome spetta a te, ma spesso viene utilizzato

106
00:08:09,830 --> 00:08:16,020
il wrapper, dove chiamer un oggetto superficiale e ora passer gli elementi di navigazione come elemento di reazione.

107
00:08:16,460 --> 00:08:23,510
Quindi, per prima cosa, devo prima di tutto importare questo, ho bisogno di importare elementi di navigazione da

108
00:08:23,510 --> 00:08:29,360
e cio dal file javascript degli elementi di navigazione che vive accanto al nostro navigationstest.

109
00:08:29,390 --> 00:08:30,660
viaggio javascript.

110
00:08:30,910 --> 00:08:34,240
Con ci possiamo renderlo qui come jsx e

111
00:08:34,250 --> 00:08:35,110
questo 

112
00:08:35,110 --> 00:08:39,360
importante, passiamo jsx al metodo superficiale. Per far funzionare tutto questo,

113
00:08:39,380 --> 00:08:46,070
come sempre, ovviamente, dobbiamo importare reagire quindi perch, indipendentemente dal fatto che si tratti di un test

114
00:08:46,070 --> 00:08:51,270
o meno, il codice jsx deve essere convertito nella sua reazione crea elemento alternativo.

115
00:08:51,290 --> 00:08:56,780
Quindi ora stiamo facendo un rendering superficiale e stiamo memorizzando il risultato in questa costante di wrapper,

116
00:08:56,780 --> 00:09:02,770
ora possiamo dare un'occhiata al wrapper in questo test. E questa  l'ultima parte del

117
00:09:02,810 --> 00:09:10,880
testing, ora ci aspettiamo, per questo usiamo un altro metodo reso disponibile globalmente da jest, il metodo expect.

118
00:09:10,880 --> 00:09:15,370
Dentro aspettiamo, definiamo il nostro, la cosa che vogliamo controllare, quindi

119
00:09:15,650 --> 00:09:19,890
qui voglio controllare se il wrapper contiene un certo elemento.

120
00:09:20,210 --> 00:09:27,180
Ora sul wrapper, possiamo ancora utilizzare una funzione di utilit fornita dal metodo definito da enzimi, questo ci permette

121
00:09:27,400 --> 00:09:31,790
di esaminare il wrapper e vedere se contiene un determinato contenuto e

122
00:09:31,790 --> 00:09:34,580
qui voglio trovare un elemento di navigazione.

123
00:09:34,760 --> 00:09:43,250
Quindi dobbiamo importarlo anch'io, importer l'elemento di navigazione da. / voce di navigazione dell'articolo di navigazione, proprio cos e quindi qui

124
00:09:43,340 --> 00:09:50,830
nel metodo di ricerca, ora voglio trovare la voce di navigazione. Importante, questo ora non  un

125
00:09:50,930 --> 00:09:58,260
elemento jsx,  la normale funzione esportata dal file di navigazione.

126
00:09:59,290 --> 00:10:00,220
Ora con quello

127
00:10:00,250 --> 00:10:02,390
importato, ci aspettiamo che non ci aspettiamo

128
00:10:02,410 --> 00:10:04,270
nulla in questo momento, diciamo solo

129
00:10:04,420 --> 00:10:08,250
qual  la nostra cosa che vogliamo controllare, vogliamo verificare se lo

130
00:10:08,250 --> 00:10:13,360
troviamo, ma qual  la nostra aspettativa allora? Si potrebbe dire che l'aspettativa  che lo

131
00:10:13,360 --> 00:10:14,360
troviamo ma i

132
00:10:14,470 --> 00:10:16,750
test sono un po 'pi flessibili di questo.

133
00:10:16,900 --> 00:10:21,820
Potresti aspettarti che lo troverai solo una o due volte o che non lo

134
00:10:21,820 --> 00:10:23,530
trovi, magari vuoi provare l'opposto,

135
00:10:23,530 --> 00:10:26,750
quindi qui dobbiamo cambiare qualcosa alla chiamata expect, questi

136
00:10:26,980 --> 00:10:34,840
sono i metodi di utilit resi disponibili da jest . Quindi possiamo aspettarci di trovare l'elemento di navigazione come abbiamo detto

137
00:10:34,840 --> 00:10:42,250
prima, due volte se non siamo autenticati, quindi l'elemento di navigazione a met lunghezza  ci che possiamo chiamare ora e vedete

138
00:10:42,250 --> 00:10:43,170
che ci sono

139
00:10:43,390 --> 00:10:45,540
un paio di metodi di supporto.

140
00:10:45,670 --> 00:10:47,870
La lunghezza che ci aspettiamo di trovare 

141
00:10:47,890 --> 00:10:49,210
di due, vogliamo trovarne due,

142
00:10:49,360 --> 00:10:51,420
quindi questo viene automaticamente aggiunto in un

143
00:10:51,520 --> 00:10:54,260
array e vogliamo che questo abbia una lunghezza di 2.

144
00:10:54,460 --> 00:11:02,070
Ora avrAuthenticated impostato su false perch non stiamo passando questo sostegno, ricordi? Stiamo solo rendendo poco visibili gli elementi

145
00:11:02,060 --> 00:11:06,400
di navigazione, non stiamo inviando alcun oggetto qui.

146
00:11:06,430 --> 00:11:12,670
Ora se lo rendiamo in questo modo, isAuthenticated non viene passato e quindi verr trattato come falso.

147
00:11:12,820 --> 00:11:15,790
Quindi, con questo, questo test dovrebbe effettivamente avere successo.

148
00:11:16,120 --> 00:11:18,930
Ora scopriamo come possiamo testarlo allora.

149
00:11:19,180 --> 00:11:21,150
Per questo diamo un'occhiata al pacchetto. file json e

150
00:11:21,180 --> 00:11:27,220
l, se scorriamo fino in fondo un po ', non mi scuso un po' al di

151
00:11:27,220 --> 00:11:28,740
sotto delle nostre dipendenze,

152
00:11:28,930 --> 00:11:30,800
vediamo la sezione degli script.

153
00:11:31,060 --> 00:11:32,380
Conosciamo lo script

154
00:11:32,380 --> 00:11:33,720
di avvio, questo

155
00:11:33,790 --> 00:11:35,710
funziona nel browser, vedremo presto

156
00:11:35,710 --> 00:11:43,670
lo script di build, ora abbiamo bisogno dello script di test. E possiamo eseguirlo con il test di esecuzione di npm o con il test di npm in realt, come

157
00:11:43,690 --> 00:11:46,720
per iniziare  uno script speciale in cui non  necessario eseguire il comando.

158
00:11:46,950 --> 00:11:52,810
Ora eseguir tutti i test e controller automaticamente tutti i file di test guardando il

159
00:11:52,810 --> 00:11:54,780
finale, test. js.

160
00:11:54,980 --> 00:11:58,430
Ora non salver mai questo file, quindi dovrei farlo ora,

161
00:11:58,450 --> 00:12:00,790
questo riavvier automaticamente i nostri test, sta

162
00:12:00,790 --> 00:12:02,370
guardando i file di test.

163
00:12:02,710 --> 00:12:05,480
Questo avvertimento riguardante il polyfill pu essere

164
00:12:05,710 --> 00:12:13,840
ignorato, pi interessante  che se espandi questo abbiamo una suite di test passata, la suite di test  la funzione

165
00:12:14,260 --> 00:12:16,900
descritta e una test passata in generale,

166
00:12:16,900 --> 00:12:19,930
questo  il test qui, la funzione it.

167
00:12:20,000 --> 00:12:23,240
Quindi il nostro test  passato come ci aspettavamo e questo

168
00:12:23,380 --> 00:12:26,860
 il modo in cui scriviamo un test per un componente.

169
00:12:26,860 --> 00:12:32,570
Ora aggiungiamo alcuni test aggiuntivi a questo componente prima di immergerci anche nel testare altre cose.

