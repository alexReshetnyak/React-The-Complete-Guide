1
00:00:02,090 --> 00:00:08,240
Ci stiamo avvicinando alla fine c' un altro concetto avanzato, anche se non  difficile da implementare,

2
00:00:08,240 --> 00:00:10,580
ma un concetto avanzato che voglio coprire.

3
00:00:10,970 --> 00:00:15,060
Torniamo alla nostra applicazione e mostriamo davvero cosa intendo.

4
00:00:15,230 --> 00:00:20,550
Consentitemi di andare su true in modo che possiamo tornare a nuovo post.

5
00:00:20,690 --> 00:00:23,100
Ora hai visto che puoi caricare i post.

6
00:00:23,120 --> 00:00:27,910
Andiamo alla scheda Rete e gli strumenti di sviluppo l.

7
00:00:27,920 --> 00:00:32,870
Se esaminiamo tutte le richieste, una volta caricata la pagina.

8
00:00:32,870 --> 00:00:38,310
Quindi vedremo che stiamo caricando questo pacchetto J come segue.

9
00:00:38,330 --> 00:00:40,560
Questo contiene tutto il nostro codice sorgente.

10
00:00:40,640 --> 00:00:43,940
E qui  relativamente grande perch siamo in modalit di sviluppo.

11
00:00:43,940 --> 00:00:47,400
Saranno molto pi piccoli quelli che ci spediscono per la produzione.

12
00:00:47,450 --> 00:00:53,430
Il flusso di lavoro ottimizzato per la generazione di energia  automatico, quindi ne parleremo pi avanti quando lo implementeremo.

13
00:00:53,430 --> 00:01:02,210
Si sta ancora caricando l'intero pacchetto con tutto il codice della nostra applicazione in anticipo pu essere male se abbiamo una

14
00:01:02,210 --> 00:01:10,190
grande applicazione con caratteristiche distinte e aree distinte e tiap in cui un utente non pu mai avvistare una

15
00:01:10,340 --> 00:01:14,180
determinata area come un'app di un'ora che abbiamo i post.

16
00:01:14,270 --> 00:01:19,840
Se l'utente non vince mai, il suo nuovo post carica il codice responsabile per quel componente.

17
00:01:20,000 --> 00:01:23,790
Non ha molto senso se guardiamo ai nostri percorsi.

18
00:01:23,840 --> 00:01:28,080
Sto parlando del nuovo componente del post qui.

19
00:01:28,130 --> 00:01:33,120
Questo dovrebbe essere caricato solo se l'utente naviga effettivamente per tagliare nuovi messaggi.

20
00:01:33,350 --> 00:01:38,340
Altrimenti non saranno mai necessari nuovi post e tutti i potenziali bambini.

21
00:01:38,480 --> 00:01:46,310
Quindi, perch dovremmo scaricare il de-code in anticipo sarebbe meglio non scaricarlo e quindi avere un blocco pi

22
00:01:46,460 --> 00:01:53,510
piccolo per il download e invece scaricare il de-code responsabile di questo componente e dei suoi

23
00:01:53,840 --> 00:01:55,350
figli quando necessario.

24
00:01:55,370 --> 00:02:01,880
come la nostra qui, questo non  super utile perch fare quella richiesta extra per un kilobyte o qualcosa del genere.

25
00:02:01,880 --> 00:02:03,500
Ora, per una piccola applicazione

26
00:02:03,500 --> 00:02:06,310
Ci che questo componente vale quando si tratta delle sue dimensioni.

27
00:02:06,560 --> 00:02:12,730
Non  molto utile, ma  utile conoscere questa tecnica in modo reale per le applicazioni pi

28
00:02:12,730 --> 00:02:17,550
grandi che stai creando dove potrebbe importare dove stai scaricando un bel po '.

29
00:02:17,600 --> 00:02:25,430
La tecnica di scaricare solo ci di cui hai bisogno  nota come suddivisione del codice o caricamento lento.

30
00:02:25,880 --> 00:02:33,190
E l vorresti essenzialmente assicurarti che nel tuo componente tu stia caricando il componente solo quando

31
00:02:33,440 --> 00:02:34,730
ne hai bisogno.

32
00:02:34,880 --> 00:02:41,750
implementare la suddivisione del codice o il caricamento lento con la creazione di app di re-act e re-act in rotta o in uscita.

33
00:02:41,750 --> 00:02:42,720
Come funziona per

34
00:02:43,190 --> 00:02:44,500
E questo  importante.

35
00:02:44,510 --> 00:02:49,250
Questa tecnica funzioner per rianimare Robert Ford e per creare reazioni a.

36
00:02:49,250 --> 00:02:54,400
Poich la suddivisione del codice dipende in gran parte dalla configurazione di WePay che si sta utilizzando.

37
00:02:54,440 --> 00:02:56,870
Dopo tutto  un concetto avanzato.

38
00:02:56,870 --> 00:03:03,380
Quindi il modo in cui ti mostro  il modo in cui funziona con il config di creare un'app di re-act

39
00:03:03,380 --> 00:03:11,030
che  una configurazione abbastanza moderna e buona, anche se  probabile che funzioni anche in qualsiasi progetto WePay impostato in modo decente o

40
00:03:11,360 --> 00:03:13,920
come ho detto al inizio di questo corso.

41
00:03:13,970 --> 00:03:17,390
Raccomando caldamente di crearlo ricreare comunque.

42
00:03:17,780 --> 00:03:23,900
Quindi, affinch funzioni in questa configurazione, abbiamo bisogno di un componente di ordine superiore.

43
00:03:23,900 --> 00:03:30,710
Creiamo quindi una nuova cartella Agios e poi aggiungono tutti un nuovo componente che nominer un

44
00:03:30,980 --> 00:03:33,750
componente asincrono del componente di sincronizzazione.

45
00:03:33,760 --> 00:03:34,520
J. S. Questo

46
00:03:34,640 --> 00:03:41,390
 il nome del file javascript perch questo componente o questo codice qui dovrebbe aiutarmi a caricare un componente in modo asincrono. e. solo quando  necessario.

47
00:03:41,480 --> 00:03:45,320
Ora qui in

48
00:03:45,320 --> 00:03:51,790
questo file componente asincrono creer una nuova funzione consonantica alla fine che chiamer un componente di sincronizzazione.

49
00:03:51,840 --> 00:03:54,290
Ci si aspetta di ottenere il mio argomento

50
00:03:54,580 --> 00:04:03,220
componente di importazione che alla fine sar una funzione e torner su come utilizzare questa funzione componente asincrono e cosa passare qui esattamente nei prossimi secondi.

51
00:04:03,220 --> 00:04:10,590
Cos ora ho bisogno di restituire qualcosa e restituir una classe qui che estende il componente.

52
00:04:10,660 --> 00:04:18,200
Quindi un normale componente di re-act.

53
00:04:18,400 --> 00:04:21,020
Quindi ho bisogno di importare

54
00:04:21,100 --> 00:04:30,490
reagire perch user anche alcuni GSX e componenti da re-act ora nel corpo di quella classe qui.

55
00:04:30,490 --> 00:04:32,960
Ovviamente ora ho bisogno anche di un metodo di rendering.

56
00:04:33,180 --> 00:04:35,550
per questo otterr implementato nel componente.

57
00:04:35,890 --> 00:04:43,870
Ma prima di arrivare a questo, creer uno stato e ce n' uno per avere uno stato che con una

58
00:04:43,870 --> 00:04:51,490
propriet componente che ora  stato qui, la propriet del componente verr impostata sul componente caricato dinamicamente e il codice

59
00:04:51,490 --> 00:04:56,230
Data MT.

60
00:04:56,350 --> 00:04:57,610
Quindi, una volta montato questo componente, questo componente di ordine superiore viene avvolto.

61
00:04:57,820 --> 00:05:04,790
No, come ho detto il componente di importazione dovrebbe essere un riferimento di funzione alla fine.

62
00:05:05,260 --> 00:05:10,950
Quindi quello che voglio fare  eseguire il componente

63
00:05:11,350 --> 00:05:20,140
di importazione qui e questa in realt sar una funzione che torner come una promessa.

64
00:05:20,560 --> 00:05:23,710
Noto perch so chi sono come user questo componente asincrono nella funzione di questo.

65
00:05:23,710 --> 00:05:30,220
Quindi il blocco otterr un argomento CMPD, forse il nome spetta a

66
00:05:30,250 --> 00:05:37,990
te che avr una propriet predefinita che sar il componente che abbiamo caricato dinamicamente.

67
00:05:38,530 --> 00:05:42,010
Quindi in questo blocco quindi posso chiamare questo

68
00:05:42,340 --> 00:05:52,900
stato impostato e impostare i miei stati componente su CMPD di default, questo  il caso che dovremmo impostare in questo caso con create react.

69
00:05:52,900 --> 00:05:56,590
Ovviamente dipende molto dal tipo di funzione

70
00:05:57,100 --> 00:06:04,090
a cui si riferir il componente di importazione e che mostrer nei prossimi minuti.

71
00:06:04,090 --> 00:06:06,180
Come ho detto non preoccuparti.

72
00:06:06,190 --> 00:06:08,160
essere questo componente di stato.

73
00:06:08,260 --> 00:06:15,580
Quindi ora ad un certo punto del tempo avremo caricato il componente reale che vogliamo usare e verr memorizzato nel

74
00:06:15,580 --> 00:06:23,080
nostro stato, quindi il metodo di rendering che vogliamo rendere tutto il resto  un nome costante C e questo dovrebbe

75
00:06:23,080 --> 00:06:26,920
Quindi voglio restituire GSX e questo metodo di rendering e controller se C  impostato in un turno ogni espressione.

76
00:06:27,140 --> 00:06:34,850
Se  impostato, render C come un normale componente di re-act.

77
00:06:34,970 --> 00:06:40,690
User questo spread di questo puntello pi complicato per passare qualsiasi

78
00:06:40,790 --> 00:06:49,910
problema potremmo aver bisogno di questo componente e anche impostarlo per sapere se c non  ancora impostato.

79
00:06:49,910 --> 00:06:53,860
Quindi, se il componente non 

80
00:06:53,870 --> 00:07:01,550
stato ancora risolto, ovviamente ora devo anche esportare questa funzione componente asincrono qui.

81
00:07:01,550 --> 00:07:02,570
Ora possiamo salvare questo autunno e ora possiamo tornare al componente di blocco dove importiamo nuovi messaggi.

82
00:07:03,500 --> 00:07:10,290
Voglio caricarlo dinamicamente ora.

83
00:07:10,310 --> 00:07:13,660
Ora, quando importate qualcosa di simile

84
00:07:13,670 --> 00:07:21,650
qui, importate qualcosa da qualche parte in Inforum Westpac DB, lo strumento costruito che vi

85
00:07:22,280 --> 00:07:29,390
porta dietro le quinte su questa dipendenza e lo includer nel bundle globale.

86
00:07:29,690 --> 00:07:34,230
Ora per un caricamento pigro questo  esattamente l'opposto di ci che vogliamo fare.

87
00:07:34,700 --> 00:07:39,090
Non vogliamo includerlo nel pacchetto.

88
00:07:39,110 --> 00:07:41,780
Vogliamo caricarlo quando necessario.

89
00:07:41,780 --> 00:07:44,100
Il pack ancora umido deve

90
00:07:44,110 --> 00:07:51,140
essere in grado di preparare dinamicamente un pandal extra per questo codice potenzialmente caricato.

91
00:07:51,140 --> 00:07:52,050
Quindi, quello che dobbiamo

92
00:07:52,520 --> 00:07:57,920
fare  commentare questo vecchio modo di importare e invece creeremo un nuovo nome Witchell costante async nuovo host il nome, naturalmente, dipende da voi.

93
00:07:57,920 --> 00:08:03,390
Questo ora user questa nuova funzione componente asincrono che abbiamo creato nella cartella O C.

94
00:08:03,440 --> 00:08:10,040
Quindi tutto il componente di sincronizzazione di importazione da.

95
00:08:10,310 --> 00:08:15,340
Ora passiamo tutti alla cartella HAMC e importati da quel file componente asincrono.

96
00:08:15,350 --> 00:08:20,980
E poi user i componenti asincroni e lo eseguirai.

97
00:08:22,080 --> 00:08:28,450
Ora componente asincrono questa funzione richiede un argomento e ti ho detto che questo

98
00:08:28,480 --> 00:08:36,450
argomento in quella funzione l'abbiamo chiamato componente di importazione che questo argomento dovrebbe essere una funzione ed

99
00:08:36,450 --> 00:08:42,510
 il motivo per cui abbiamo eseguito come un componente uditivo al Mt. Quindi dobbiamo passare qualche funzione al componente asincrono e questa dovrebbe essere una funzione anonima.

100
00:08:42,510 --> 00:08:44,430
Sto usando qui la funzione di 6 Erol.

101
00:08:45,030 --> 00:08:52,800
La parte interessante  ci che ritorniamo in questa funzione.

102
00:08:52,800 --> 00:08:56,040
E tieni presente che se lo scrivi in una riga, viene restituito immediatamente tutto ci che viene corretto dall'errore.

103
00:08:56,340 --> 00:09:00,020
Se usi le parentesi graffe, devi restituire qualcosa con la parola chiave return.

104
00:09:00,330 --> 00:09:05,810
Quindi ho intenzione di adottare un approccio pi lungo.

105
00:09:05,970 --> 00:09:10,710
Sono tutti utilizzati per importare una parola chiave come funzione.

106
00:09:10,710 --> 00:09:13,530
Questa  una sintassi speciale.

107
00:09:13,530 --> 00:09:17,750
La sintassi di importazione dinamica che significa che tutto ci che si trova tra parentesi qui  importante solo quando viene eseguita la funzione

108
00:09:17,780 --> 00:09:19,900
qui e quella funzione verr eseguita solo una volta che rendiamo asincrona.

109
00:09:20,030 --> 00:09:29,790
Pubblichi sullo schermo.

110
00:09:29,910 --> 00:09:38,490
Quindi qui non ho portato il mio lbf originale a un nuovo post e ora lo sto importando solo quando questa

111
00:09:38,520 --> 00:09:40,720
costante viene usata da qualche parte.

112
00:09:41,220 --> 00:09:49,650
Ora ovviamente voglio usarlo da qualche parte.

113
00:09:49,650 --> 00:09:51,420
Voglio usarlo in fondo al mio contenitore di blocchi

114
00:09:51,420 --> 00:09:53,700
nella nuova rotta postale invece di usare il nuovo post come componente.

115
00:09:53,940 --> 00:10:01,920
Voglio utilizzare async nuovo post come componente.

116
00:10:01,920 --> 00:10:03,250
Alla fine questo sar un componente perch tieni presente che il componente asincrono restituisce un componente.

117
00:10:03,390 --> 00:10:06,800
Abbiamo un componente di ordine superiore.

118
00:10:06,810 --> 00:10:13,660
Restituisce una classe con un metodo di rendering.

119
00:10:13,680 --> 00:10:15,270
Quindi questo  un componente valido.

120
00:10:15,270 --> 00:10:17,280
componente dovrebbe essere con la funzione passata al componente asincrono.

121
00:10:17,400 --> 00:10:19,620
Questo componente alla fine render alcuni componenti caricati dinamicamente e decidiamo quale

122
00:10:19,620 --> 00:10:25,830
Ora, se salviamo questo e torniamo alla nostra applicazione, guardiamo attentamente in basso a destra.

123
00:10:25,960 --> 00:10:30,600
Quando clicco su un nuovo post una volta che clicco, lo vedremo come un blocco come segue.

124
00:10:30,600 --> 00:10:37,530
Caricato che  molto piccolo.

125
00:10:37,540 --> 00:10:44,710
Questa  la pagina web extra creata perch mentre raggruppava il nostro codice rilevava qui questa sintassi dinamica che

126
00:10:44,710 --> 00:10:47,400
conosce a causa della nostra configurazione che

127
00:10:47,400 --> 00:10:55,780
stiamo usando per creare l'impostazione del flusso di lavoro e quindi ha creato la larghezza di banda extra un nuovo componente post

128
00:10:55,780 --> 00:11:01,450
e tutti i potenziali componenti figlio che erano esclusivi di quel componente, se ce n'erano.

129
00:11:01,450 --> 00:11:07,900
Ma non l'ha aggiunto al pacchetto principale.

130
00:11:07,900 --> 00:11:09,880
Invece  pronto a caricarlo quando necessario.

131
00:11:09,880 --> 00:11:12,550
Quando in realt includiamo nuovi post asincroni che facciamo solo quando

132
00:11:12,550 --> 00:11:15,600
navighiamo per tagliare nuove pedane come caricate i componenti in modo asincrono.

133
00:11:15,820 --> 00:11:24,760
E come ho detto questo  estremamente utile nelle app pi grandi dove ci sono pezzi di codice pi grandi di un'intera area

134
00:11:24,760 --> 00:11:27,400
caratteristica nella tua applicazione, ad esempio che

135
00:11:27,580 --> 00:11:35,470
potrebbe non essere visitata dall'utente in modo da poter salvare quel codice in anticipo per caricarlo solo quando necessario .

136
00:11:35,470 --> 00:11:42,190
&nbsp;

137
00:11:42,190 --> 00:11:46,990
&nbsp;

