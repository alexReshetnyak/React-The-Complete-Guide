1
00:00:02,400 --> 00:00:07,430
We're almost at the end of this routing module, a lot of content was covered here.

2
00:00:07,620 --> 00:00:14,190
Now there's one important thing you have to know regarding routing when using the react router, when

3
00:00:14,190 --> 00:00:19,650
it comes to deploying your app to a real server because you won't notice it here on the development

4
00:00:19,650 --> 00:00:22,460
server because it's already configured correctly.

5
00:00:22,500 --> 00:00:27,280
You have to remember how handling requests actually works in the web.

6
00:00:27,510 --> 00:00:33,810
We have the user who sends a request to the server and we have our react app which is then loaded on

7
00:00:33,810 --> 00:00:36,030
the index.html page.

8
00:00:36,060 --> 00:00:43,890
The thing is before we load to index.html page the server needs to find out which page the user actually

9
00:00:43,890 --> 00:00:44,900
wanted to visit.

10
00:00:45,090 --> 00:00:48,670
That of course is the case because the server always handles requests first,

11
00:00:48,720 --> 00:00:51,390
this is how the Internet works.

12
00:00:51,390 --> 00:00:55,830
The problem is it's the react app which knows the routes.

13
00:00:55,920 --> 00:01:04,050
So if we visit /posts, there is no /posts route on our server, that is defined in the javascript

14
00:01:04,050 --> 00:01:11,640
code which is loaded on the index.html page which we never get because we get a 404 error on the

15
00:01:11,640 --> 00:01:15,610
server because we tried to visit a route which is unknown to the server.

16
00:01:15,810 --> 00:01:20,820
And clearly this is not what you saw during development because as I said the development server is

17
00:01:20,820 --> 00:01:22,800
already configured correctly.

18
00:01:22,920 --> 00:01:30,720
We have to configure the server in a way that it always forwards requests no matter if it understands

19
00:01:30,720 --> 00:01:31,670
them or not,

20
00:01:31,710 --> 00:01:40,500
so also 404 error requests to the client, so that it always returns the index.html page, also

21
00:01:40,500 --> 00:01:48,750
for unknown requests because this then allows react to take over and parse the request against the

22
00:01:48,750 --> 00:01:50,360
routes it knows.

23
00:01:50,610 --> 00:01:53,050
So we should always load index.html

24
00:01:53,360 --> 00:01:55,910
and if then there is a request we dont know,

25
00:01:55,950 --> 00:02:01,280
well you learned how to handle 404 errors with the react router.

26
00:02:01,320 --> 00:02:08,090
Now as I said, the development server we used here already is configured to always load the index.html

27
00:02:08,080 --> 00:02:09,150
file.

28
00:02:09,270 --> 00:02:14,330
It is something you will also have to do when hosting the app on your own server though,

29
00:02:14,550 --> 00:02:16,710
always return index.html

30
00:02:16,920 --> 00:02:21,940
even and especially in 404 error cases.

31
00:02:22,060 --> 00:02:27,120
There is another thing you have to be aware of when hosting your app on your server,

32
00:02:27,360 --> 00:02:30,970
if you are hosting it on let's say example.com/

33
00:02:30,990 --> 00:02:35,910
so if that's the page with which we're landing on the root page of your react app, you don't need to

34
00:02:35,940 --> 00:02:42,240
set up anything special. But if you're serving your app from let's say example.com/myapp, so

35
00:02:42,240 --> 00:02:45,560
anything beneath that folder should be your react app,

36
00:02:45,870 --> 00:02:48,050
you need to tell react about this,

37
00:02:48,100 --> 00:02:50,150
the react router to be precise.

38
00:02:50,340 --> 00:02:57,780
You need to set the base path for the react router and I want to quickly show you how to do that. In your

39
00:02:57,780 --> 00:02:58,750
application,

40
00:02:58,830 --> 00:03:01,210
in the place where you use browser router,

41
00:03:01,260 --> 00:03:07,560
so in our case in the app.js file here browser router, you can also configure that and you really

42
00:03:07,560 --> 00:03:08,660
need to do that.

43
00:03:08,820 --> 00:03:14,520
But there is a base name prop you can set and by default, that's set to slash.

44
00:03:14,760 --> 00:03:17,310
So this is the default which you don't need to set.

45
00:03:17,520 --> 00:03:26,460
If your serving your app from myapp, you should set this to /myapp, then all your requests are

46
00:03:26,460 --> 00:03:31,940
routed against myapp/ and then the link you were pointing to.

47
00:03:32,010 --> 00:03:36,200
Otherwise, if you had a link like here,

48
00:03:36,240 --> 00:03:44,640
if you push the page change up on clicking a post, here we navigate to /posts and it would always

49
00:03:44,700 --> 00:03:47,180
add this to your root domain.

50
00:03:47,190 --> 00:03:54,750
Now if your react app is served from /myapp, it will only work correctly and add it to the

51
00:03:54,750 --> 00:03:57,110
end of your domain /myapp

52
00:03:57,240 --> 00:04:04,860
If basename is set up. So whenever you are serving your app from a sub directory, make sure to set basename.

53
00:04:04,950 --> 00:04:11,790
So here I will remove basename or I'll duplicate it and comment it out to leave it here for reference and

54
00:04:11,790 --> 00:04:13,000
remove it in the browser route

55
00:04:13,020 --> 00:04:16,490
we're actually using, but this is something you have to know.

