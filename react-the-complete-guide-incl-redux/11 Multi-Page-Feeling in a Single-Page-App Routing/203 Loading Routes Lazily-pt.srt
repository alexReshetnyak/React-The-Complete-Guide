1
00:00:02,090 --> 00:00:08,240
Estamos chegando ao fim, h um conceito mais avanado, embora no seja difcil de implementar, mas um

2
00:00:08,240 --> 00:00:10,580
conceito avanado que eu quero abranger.

3
00:00:10,970 --> 00:00:15,060
Voltemos  nossa aplicao e realmente mostramos o que quero dizer.

4
00:00:15,230 --> 00:00:20,550
Deixe-me partir para verdadeiro para que possamos voltar para nova postagem novamente.

5
00:00:20,690 --> 00:00:23,100
Agora voc viu seu post pode ser carregado.

6
00:00:23,120 --> 00:00:27,910
E vamos para a guia Rede e as ferramentas do desenvolvedor l.

7
00:00:27,920 --> 00:00:32,870
Se analisarmos todos os pedidos uma vez que carregamos a pgina.

8
00:00:32,870 --> 00:00:38,310
Ento, vamos s mensagens que voc v que estamos carregando esse pacote J da seguinte maneira.

9
00:00:38,330 --> 00:00:40,560
Isso contm todo o nosso cdigo fonte.

10
00:00:40,640 --> 00:00:43,940
E aqui  relativamente grande porque estamos no modo de desenvolvimento.

11
00:00:43,940 --> 00:00:47,400
Sero muito menores os que nos so enviados para produo.

12
00:00:47,450 --> 00:00:53,430
 o fluxo de trabalho de gerao de energia otimizado automaticamente, ento falaremos sobre isso mais tarde, quando implantamos.

13
00:00:53,430 --> 00:01:02,210
Sim, ainda carregar todo o pacote com todo o cdigo da nossa aplicao na frente pode ser ruim se tivermos uma

14
00:01:02,210 --> 00:01:10,190
grande aplicao com caractersticas distintas e reas distintas e tiap, onde um usurio talvez nunca acesse uma determinada rea,

15
00:01:10,340 --> 00:01:14,180
como uma aplicao de uma hora, ns temos as postagens.

16
00:01:14,270 --> 00:01:19,840
Se o usurio nunca ganhar a nova postagem, carrega o cdigo responsvel por esse componente.

17
00:01:20,000 --> 00:01:23,790
No faz muito sentido se ns tivermos uma olhada nas nossas rotas.

18
00:01:23,840 --> 00:01:28,080
Estou falando sobre o novo componente de postagem aqui.

19
00:01:28,130 --> 00:01:33,120
Isso s deve ser carregado se o usurio realmente navegar para reduzir novas postagens.

20
00:01:33,350 --> 00:01:38,340
Caso contrrio, novas postagens e todas as crianas potenciais nunca sero necessrias.

21
00:01:38,480 --> 00:01:46,310
Ento, por que devemos baixar o cdigo de cdigo na frente, seria melhor no baix-lo e, portanto, ter um pedao

22
00:01:46,460 --> 00:01:53,510
mais atrasado para baixar e, em vez disso, baixar o cdigo de cdigo responsvel por este componente e

23
00:01:53,840 --> 00:01:55,350
seus filhos quando necessrio.

24
00:01:55,370 --> 00:02:01,880
como a nossa aqui, isso no  super til porque fazer esse pedido extra para um kilobyte ou algo assim.

25
00:02:01,880 --> 00:02:03,500
Agora, para uma pequena aplicao

26
00:02:03,500 --> 00:02:06,310
O que esse componente vale quando se trata de seu tamanho.

27
00:02:06,560 --> 00:02:12,730
Isso no  super til, mas  til conhecer esta tcnica de forma real para aplicativos maiores

28
00:02:12,730 --> 00:02:17,550
que voc est construindo, onde pode importar onde voc est baixando um pouco.

29
00:02:17,600 --> 00:02:25,430
A tcnica de baixar apenas o que voc precisa  conhecida como diviso de cdigo ou carregamento lento.

30
00:02:25,880 --> 00:02:33,190
E a, voc precisaria se certificar de que, no seu componente, voc est apenas carregando o componente

31
00:02:33,440 --> 00:02:34,730
assim que precisar.

32
00:02:34,880 --> 00:02:41,750
para implementar a diviso de cdigo ou carregamento preguioso com criar um aplicativo de re-atuao e re-atuar rota ou adiante.

33
00:02:41,750 --> 00:02:42,720
Como isso funciona

34
00:02:43,190 --> 00:02:44,500
E isso  importante.

35
00:02:44,510 --> 00:02:49,250
Esta tcnica funcionar para re-agir Robert Ford e para criar reagir em.

36
00:02:49,250 --> 00:02:54,400
Como a diviso de cdigo depende muito da configurao do WePay que voc est usando.

37
00:02:54,440 --> 00:02:56,870
 um conceito avanado, afinal.

38
00:02:56,870 --> 00:03:03,380
Ento, a maneira como eu estou mostrando voc  a maneira como ele funciona com a configurao de criar o aplicativo

39
00:03:03,380 --> 00:03:11,030
re-act, que  uma configurao muito moderna e boa. Por isso, as chances so de que ele tambm funciona em qualquer projeto de WePay configurado

40
00:03:11,360 --> 00:03:13,920
decentemente ou como eu disse no incio deste curso.

41
00:03:13,970 --> 00:03:17,390
Eu recomendo encarecidamente criar reativ-los de qualquer maneira.

42
00:03:17,780 --> 00:03:23,900
Ento, para que isso funcione nesta configurao, precisamos de um componente de ordem superior.

43
00:03:23,900 --> 00:03:30,710
Ento, vamos criar uma nova pasta Agios e depois todos eles adicionam um novo componente que nomear

44
00:03:30,980 --> 00:03:33,750
um componente de sincronizao de componente assncrono.

45
00:03:33,760 --> 00:03:34,520
J. S. Esse

46
00:03:34,640 --> 00:03:41,390
 o nome do arquivo javascript porque este componente ou este cdigo aqui deve me ajudar a carregar um componente de maneira assncrona. e. somente quando for necessrio.

47
00:03:41,480 --> 00:03:45,320
Agora, neste arquivo

48
00:03:45,320 --> 00:03:51,790
de componente assncrono, eu criarei uma nova funo consonantal, o fim que nomear um componente de sincronizao.

49
00:03:51,840 --> 00:03:54,290
L eu espero obter o meu argumento de

50
00:03:54,580 --> 00:04:03,220
componente de importao que, no final, ser uma funo e vou voltar a usar essa funo de componente assncrono e o que passar aqui exatamente nos prximos segundos.

51
00:04:03,220 --> 00:04:10,590
Ento, agora preciso retornar algo e irei retornar uma aula aqui que estende o componente.

52
00:04:10,660 --> 00:04:18,200
Ento, um componente normal de reao.

53
00:04:18,400 --> 00:04:21,020
Portanto, preciso importar reagir

54
00:04:21,100 --> 00:04:30,490
porque tambm usar alguns GSX e componentes de reagem agora no corpo dessa classe aqui.

55
00:04:30,490 --> 00:04:32,960
Agora, claro, tambm preciso de um mtodo de renderizao.

56
00:04:33,180 --> 00:04:35,550
ir obter implementado em um componente.

57
00:04:35,890 --> 00:04:43,870
Mas antes de chegar a isso, eu configurarei um estado e h um para ter um estado que, com uma propriedade de componente

58
00:04:43,870 --> 00:04:51,490
que agora  o estado aqui, a propriedade do componente ser configurada para o componente carregado dinamicamente e o cdigo para este

59
00:04:51,490 --> 00:04:56,230
Data MT.

60
00:04:56,350 --> 00:04:57,610
Ento, uma vez que este componente foi montado aqui, este componente de embalagem superior.

61
00:04:57,820 --> 00:05:04,790
No, como eu disse, o componente de importao deve ser uma referncia de funo no final.

62
00:05:05,260 --> 00:05:10,950
Ento, o que eu quero fazer  que eu quero

63
00:05:11,350 --> 00:05:20,140
executar componente de importao aqui e isso realmente ser uma funo que retornar como uma promessa.

64
00:05:20,560 --> 00:05:23,710
Eu percebo porque sei quem eu sou como eu vou usar este componente assncrono na funo disso.

65
00:05:23,710 --> 00:05:30,220
Em seguida, o bloco obter um argumento no CMPD, talvez o nome dependa

66
00:05:30,250 --> 00:05:37,990
de voc, que ter um padro de propriedade, que ser o componente que carregamos dinamicamente.

67
00:05:38,530 --> 00:05:42,010
Ento, neste bloqueio, eu posso chamar este estado

68
00:05:42,340 --> 00:05:52,900
definido e definir meus estados de componente para CMPD padro, este  o caso devido a ser configurado, estamos usando aqui com criar reagir.

69
00:05:52,900 --> 00:05:56,590
 claro que dependem fortemente do tipo de

70
00:05:57,100 --> 00:06:04,090
componente de importao de funo que se referir e que vou mostrar nos prximos minutos.

71
00:06:04,090 --> 00:06:06,180
Como eu disse sem preocupaes.

72
00:06:06,190 --> 00:06:08,160
ser esse componente de estado.

73
00:06:08,260 --> 00:06:15,580
Ento, agora, em algum momento do tempo, teremos carregado o componente atual que queremos usar e ele ser armazenado em

74
00:06:15,580 --> 00:06:23,080
nosso estado, portanto, o mtodo de renderizao que queremos process-lo, todos tratam um nome constante  C e este deve

75
00:06:23,080 --> 00:06:26,920
Ento eu quero retornar GSX e este mtodo de renderizao e vou verificar se C est definido em uma vez que cada expresso.

76
00:06:27,140 --> 00:06:34,850
Se estiver configurado, eu processarei o C como um componente normal de reao.

77
00:06:34,970 --> 00:06:40,690
Eu usarei este spreads do prop mais complicado para passar qualquer

78
00:06:40,790 --> 00:06:49,910
problema que possamos precisar para este componente e tambm configur-lo para saber se c ainda no est configurado.

79
00:06:49,910 --> 00:06:53,860
Ento, se o componente ainda no foi

80
00:06:53,870 --> 00:07:01,550
resolvido,  claro que agora tambm preciso exportar esta funo de componente assncrono aqui.

81
00:07:01,550 --> 00:07:02,570
Agora podemos economizar neste outono e agora podemos voltar ao componente de bloco onde importamos novas postagens.

82
00:07:03,500 --> 00:07:10,290
Eu quero carregar isso dinamicamente agora.

83
00:07:10,310 --> 00:07:13,660
Agora, o qu  sempre que voc est

84
00:07:13,670 --> 00:07:21,650
importando algo como isto aqui com alguma coisa importada de algum lugar em que, basicamente, o Inforum Westpac DB construiu

85
00:07:22,280 --> 00:07:29,390
uma ferramenta que o deixa atrs dos bastidores sobre essa dependncia e ela ir inclu-la no pacote global.

86
00:07:29,690 --> 00:07:34,230
Agora, para um carregamento lento, isso  exatamente o oposto do que queremos fazer.

87
00:07:34,700 --> 00:07:39,090
No queremos inclu-lo no pacote.

88
00:07:39,110 --> 00:07:41,780
Queremos carreg-lo quando necessrio.

89
00:07:41,780 --> 00:07:44,100
O pacote Still wet

90
00:07:44,110 --> 00:07:51,140
precisa ser capaz de preparar dinamicamente algum pandal extra para esse cdigo potencialmente carregado.

91
00:07:51,140 --> 00:07:52,050
Ento, o que temos que

92
00:07:52,520 --> 00:07:57,920
fazer  que devemos comentar esta antiga maneira de importar e, em vez disso, criaremos um novo nome constante do Witchell, um novo host assncrono, o nome do curso depende de voc.

93
00:07:57,920 --> 00:08:03,390
Isso agora usar essa nova funo de componente assncrono que criamos na pasta OC.

94
00:08:03,440 --> 00:08:10,040
Ento, todo o componente de sincronizao de importao.

95
00:08:10,310 --> 00:08:15,340
E agora tudo se move para a pasta HAMC e  importado desse arquivo de componente assncrono.

96
00:08:15,350 --> 00:08:20,980
E ento usarei os componentes assncronos que voc  e execut-lo.

97
00:08:22,080 --> 00:08:28,450
Agora, componente assncrono, esta funo requer um argumento e eu lhe disse

98
00:08:28,480 --> 00:08:36,450
que esse argumento naquela funo o chamamos de componente de importao que esse argumento deveria ser

99
00:08:36,450 --> 00:08:42,510
uma funo, razo pela qual executvamos como um componente auditivo no Monte. Portanto, temos que passar alguma funo para o componente assncrono e esta deve ser uma funo annima.

100
00:08:42,510 --> 00:08:44,430
Estou usando como 6 Erol funo aqui.

101
00:08:45,030 --> 00:08:52,800
A parte interessante  o que devolvemos nesta funo.

102
00:08:52,800 --> 00:08:56,040
E lembre-se se voc escrev-lo em uma linha, o que vier diretamente do erro  imediatamente retornado.

103
00:08:56,340 --> 00:09:00,020
Se voc usa cintas curly voc precisa retornar algo com a palavra-chave de retorno.

104
00:09:00,330 --> 00:09:05,810
Ento vou fazer uma abordagem mais longa.

105
00:09:05,970 --> 00:09:10,710
Todos eles so usados para importar palavras-chave como uma funo.

106
00:09:10,710 --> 00:09:13,530
Esta  uma sintaxe especial.

107
00:09:13,530 --> 00:09:17,750
A sintaxe de importao dinmica que significa que qualquer coisa que vem entre os parnteses aqui  importante somente quando essa funo aqui 

108
00:09:17,780 --> 00:09:19,900
executada e essa funo aqui s ser executada depois de renderizar async.

109
00:09:20,030 --> 00:09:29,790
Voc publica na tela.

110
00:09:29,910 --> 00:09:38,490
Ento, aqui no levei meu original lbf para nova postagem e agora s estou importando isso quando essa constante

111
00:09:38,520 --> 00:09:40,720
se usa em algum lugar.

112
00:09:41,220 --> 00:09:49,650
Agora  claro que eu quero us-lo em algum lugar.

113
00:09:49,650 --> 00:09:51,420
Eu quero us-lo na parte inferior do meu recipiente de bloco

114
00:09:51,420 --> 00:09:53,700
na nova rota de postagem em vez de usar a nova postagem como um componente.

115
00:09:53,940 --> 00:10:01,920
Eu quero usar uma nova publicao assncrona como um componente.

116
00:10:01,920 --> 00:10:03,250
Eventualmente, isso ser um componente porque tenha em mente que o componente assncrono retorna um componente.

117
00:10:03,390 --> 00:10:06,800
Temos um componente de ordem superior.

118
00:10:06,810 --> 00:10:13,660
Ele retorna uma classe com um mtodo de renderizao.

119
00:10:13,680 --> 00:10:15,270
Portanto, este  um componente vlido.

120
00:10:15,270 --> 00:10:17,280
componente deve ser com a funo que passamos para o componente assncrono.

121
00:10:17,400 --> 00:10:19,620
Esse componente acabar por renderizar um componente carregado dinamicamente e ns decidiremos qual

122
00:10:19,620 --> 00:10:25,830
Agora, se salvarmos isso e voltarmos para o nosso aplicativo, assistiu forte no canto inferior direito.

123
00:10:25,960 --> 00:10:30,600
Quando eu clicar na nova postagem assim que clicar nele, voc ver isso como um pedao da seguinte maneira.

124
00:10:30,600 --> 00:10:37,530
Carregado, que  muito pequeno.

125
00:10:37,540 --> 00:10:44,710
Esta  a pgina extra criada porque, enquanto agrupava nosso cdigo, detectou esta sintaxe dinmica aqui que conhece

126
00:10:44,710 --> 00:10:47,400
devido  nossa configurao que estamos usando

127
00:10:47,400 --> 00:10:55,780
para criar a configurao do fluxo de trabalho e, portanto, criou a largura de banda extra um novo componente de postagem

128
00:10:55,780 --> 00:11:01,450
e todos os componentes potenciais para crianas que eram exclusivos desse componente, se houver.

129
00:11:01,450 --> 00:11:07,900
Mas no o adicionou ao pacote principal.

130
00:11:07,900 --> 00:11:09,880
Em vez disso, est preparado para carreg-lo quando necessrio.

131
00:11:09,880 --> 00:11:12,550
Quando ns realmente inclumos nova publicao assncrona, o que ns apenas fazemos ao

132
00:11:12,550 --> 00:11:15,600
navegar para reduzir as novas postagens de ps como voc carrega componentes de forma assncrona.

133
00:11:15,820 --> 00:11:24,760
E, como mencionei, isso  extremamente til em aplicativos maiores, onde h grandes partes de cdigo uma rea de recursos inteira em

134
00:11:24,760 --> 00:11:27,400
seu aplicativo, por exemplo, que talvez nem

135
00:11:27,580 --> 00:11:35,470
seja visitado pelo usurio para que voc possa salvar esse cdigo na frente para apenas carreg-lo quando necessrio .

136
00:11:35,470 --> 00:11:42,190
&nbsp;

137
00:11:42,190 --> 00:11:46,990
&nbsp;

