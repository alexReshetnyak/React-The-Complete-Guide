1
00:00:02,050 --> 00:00:05,930
Na ltima palestra, aprendemos a usar rotas aninhadas.

2
00:00:05,950 --> 00:00:13,390
Agora voc pode ter notado uma coisa talvez at mais cedo quando estamos em uma determinada publicao e clicamos

3
00:00:13,390 --> 00:00:21,170
em uma publicao diferente, na verdade, no carregamos dvidas, embora voc possa ver na R L que a ID muda.

4
00:00:21,460 --> 00:00:26,110
Ento, est registrando o clique, mas no est carregando o novo componente.

5
00:00:26,140 --> 00:00:33,340
Agora, o motivo para isso  o roteador de reativao morto atrs das cenas, no substitui o componente o

6
00:00:33,340 --> 00:00:34,230
tempo todo.

7
00:00:34,300 --> 00:00:41,950
carregando um componente no qual voc j est, como se estivssemos aqui, ele realmente no renderizar todo o

8
00:00:41,950 --> 00:00:50,260
componente e, portanto, para o componente de publicao completo, o mount no foi executado novamente porque porque isso faria isso.

9
00:00:50,260 --> 00:00:51,520
Se voc est

10
00:00:51,520 --> 00:00:57,850
Decompon-lo no mudou, seria muito ineficiente para desmont-lo e remontar.

11
00:00:57,850 --> 00:01:05,380
Portanto, como os componentes no foram executados novamente, embora no estivssemos chegar  web novamente.

12
00:01:05,500 --> 00:01:12,490
Ento, para corrigir isso, o que devemos fazer  que tambm devemos implementar um componente que atualizou para lidar

13
00:01:12,780 --> 00:01:16,220
com este caso, porque a atualizao ser executada novamente.

14
00:01:16,600 --> 00:01:25,330
cdigo aqui, onde eu direto  internet e carregarei meus dados porque agora eu quero chamar isso tanto na montagem do componente quanto no

15
00:01:25,360 --> 00:01:32,710
componente que atualiza, ento esses dados de carga sero ser chamado em ambos os ganchos do ciclo de vida, de

16
00:01:32,710 --> 00:01:39,670
modo que eu esteja preparado tanto pela primeira vez que esta nica publicao seja carregada e pela segunda vez.

17
00:01:39,700 --> 00:01:46,520
E irei adicionar um novo mtodo de dados de carga, mtodo de convenincia que simplesmente manter o meu antigo

18
00:01:46,540 --> 00:01:52,220
Agora, no entanto, voc v no registro do console que j temos um loop infinito.

19
00:01:52,300 --> 00:01:55,060
Portanto, esta no  a soluo perfeita.

20
00:01:55,060 --> 00:01:59,470
Eu clico em um link aqui e ele continua carregando novamente.

21
00:01:59,740 --> 00:02:04,640
Ento definitivamente no  o que queremos fazer o que h de errado com nossa configurao atual aqui.

22
00:02:05,520 --> 00:02:13,540
Bem,  o nosso check-in nos dados de carga que estamos verificando se a nossa ideia mudou e estamos verificando essa

23
00:02:13,620 --> 00:02:14,500
ID adequada.

24
00:02:14,610 --> 00:02:21,210
qualquer outro lugar aqui, isso precisa ser a identificao deste Id. De Perrin, este ID do suporte nunca ser definido.

25
00:02:21,210 --> 00:02:22,250
Agora, como em

26
00:02:22,410 --> 00:02:27,930
Ento, tivemos o mesmo problema de loop infinito que tivemos na seo HD porque nosso cheque aqui

27
00:02:27,930 --> 00:02:33,390
no estava funcionando mais e no s precisamos atualizar isso aqui, precisamos atualiz-lo em todos os lugares

28
00:02:33,390 --> 00:02:40,230
e como componente onde referenciamos a identificao deste suporte,  claro, tambm Aqui  por que a excluso nunca funcionar.

29
00:02:40,230 --> 00:02:46,580
E, claro, tambm aqui embaixo, onde verificamos se o ID est configurado.

30
00:02:46,710 --> 00:02:53,220
Agora, com todas essas mudanas no local, ainda no funcionaria porque a ID estava

31
00:02:53,220 --> 00:02:57,480
recuperando dos pais orgulhosos, na verdade, ser uma string.

32
00:02:57,480 --> 00:03:05,270
Agora, aqui estamos a verificar por igualdade de tipos para anti-ID armazenados na publicao carregada, na verdade  um nmero.

33
00:03:05,280 --> 00:03:12,060
Ento, ns temos que levar as palavras E-string ID para um nmero ou simplesmente transformar isso em um

34
00:03:12,060 --> 00:03:14,260
cheque ou simplesmente verificar o valor.

35
00:03:14,280 --> 00:03:17,780
Agora, basta verificar apenas o valor e clicar em uma postagem.

36
00:03:17,910 --> 00:03:20,850
Agora voc v que no est sendo carregado o tempo todo.

37
00:03:20,850 --> 00:03:26,080
Em vez disso, ele s carrega uma vez, mas atualiza-a corretamente quando alternamos para postar.

38
00:03:26,250 --> 00:03:31,440
Mais uma vez, a alternativa seria deixar a verificao de qualidade de digitao, mas converter isso em

39
00:03:31,440 --> 00:03:34,050
um nmero, adicionando uma vantagem na frente, por exemplo.

40
00:03:34,050 --> 00:03:38,220
Agora, novamente, se eu clicar em uma publicao que carregamos carregamos uma nica vez.

41
00:03:38,220 --> 00:03:40,010
No entramos no loop infinito.

42
00:03:40,320 --> 00:03:46,740
Esta  uma importante correo para o componente de postagem completo, em geral, que usamos a identificao Perens

43
00:03:46,870 --> 00:03:53,950
de correspondncia em todo o componente e tambm  importante entender que voc precisa lidar com as mudanas no componente.

44
00:03:53,970 --> 00:04:01,800
Atualizou se DB post component ou se o componente em geral j est carregado para o roteamento porque o

45
00:04:01,800 --> 00:04:07,350
roteador no desmontar o antigo e montar o mesmo novamente com dados diferentes.

46
00:04:07,350 --> 00:04:12,320
Ele ir reutilizar o antigo e apenas ajustar o parmetro da rota.

47
00:04:12,390 --> 00:04:20,460
 seu trabalho reagir a este novo parmetro e voc pode reagir ao componente que atualiza o que

48
00:04:20,460 --> 00:04:23,010
ser chamado porque os adereos mudaram.

49
00:04:23,070 --> 00:04:29,840
Voc recebe um novo suporte com um novo objeto de correspondncia com um novo objeto de pais com o novo ID.

50
00:04:29,850 --> 00:04:31,170
Isso  o que est acontecendo aqui.

51
00:04:31,170 --> 00:04:32,830
Fazemos o que estamos aproveitando.

52
00:04:32,910 --> 00:04:34,530
E isso  importante para entender.

53
00:04:34,660 --> 00:04:36,780
Ao trabalhar com rotas aninhadas.

