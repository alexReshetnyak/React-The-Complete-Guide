1
00:00:02,090 --> 00:00:08,240
Zbliamy si do koca, jest jeszcze jedna bardziej zaawansowana koncepcja, cho nie jest trudna do wdroenia, ale

2
00:00:08,240 --> 00:00:10,580
jedna zaawansowana koncepcja, ktr chc obj.

3
00:00:10,970 --> 00:00:15,060
Wrmy do naszej aplikacji i naprawd pokamy, co mam na

4
00:00:15,230 --> 00:00:20,550
myli, pozwl mi ustawi auth na true, abymy mogli ponownie przej do nowego postu.

5
00:00:20,690 --> 00:00:23,100
Teraz widzisz, e nowy post moe zosta zaadowany,

6
00:00:23,120 --> 00:00:27,910
a przejdmy do karty sieciowej w narzdziach programistycznych. Jeli spojrzymy na wszystkie

7
00:00:27,920 --> 00:00:32,870
dania po zaadowaniu strony, wic jeli przejd do postw,

8
00:00:32,870 --> 00:00:38,310
zobaczycie, e adujemy ten pakiet. Plik js zawiera cay nasz

9
00:00:38,330 --> 00:00:40,560
kod rdowy, tutaj jest

10
00:00:40,640 --> 00:00:43,940
stosunkowo duy, poniewa jestemy w trybie

11
00:00:43,940 --> 00:00:47,400
programistycznym, bdzie on znacznie mniejszy, gdy wylemy

12
00:00:47,450 --> 00:00:53,430
go do produkcji. Zoptymalizowany przepyw pracy w trybie budowania mocy automatycznie

13
00:00:53,430 --> 00:01:02,210
wtedy, bd o tym mwi pniej, gdy wdraamy aplikacj. Nadal adowanie caego pakietu wraz z caym kodem naszej aplikacji z

14
00:01:02,210 --> 00:01:10,190
gry moe by ze, jeli mamy du aplikacj z odrbnymi funkcjami i odrbnymi obszarami w aplikacji, w ktrych uytkownik moe

15
00:01:10,340 --> 00:01:14,180
nigdy nie odwiedzi okrelonego obszaru. Podobnie jak w naszej aplikacji,

16
00:01:14,270 --> 00:01:19,840
mamy posty, jeli uytkownik nigdy nie odwiedza nowego posta, adowanie kodu odpowiedzialnego za ten

17
00:01:20,000 --> 00:01:23,790
komponent nie ma wikszego sensu. Jeli spojrzymy na nasze

18
00:01:23,840 --> 00:01:28,080
trasy, mwi tu o nowym komponencie pocztowym, to powinno by

19
00:01:28,130 --> 00:01:33,120
zaadowane tylko wtedy, gdy uytkownik faktycznie nawiguje do / newposts, w

20
00:01:33,350 --> 00:01:38,340
przeciwnym razie nowe posty i wszystkie potencjalne dzieci nigdy nie bd potrzebne.

21
00:01:38,480 --> 00:01:46,310
Dlaczego wic powinnimy pobra kod z gry? Czy byoby lepiej nie pobiera go, a tym samym

22
00:01:46,460 --> 00:01:53,510
mie mniejsz cz do pobrania, a zamiast tego pobra kod odpowiedzialny za ten komponent i jego

23
00:01:53,840 --> 00:01:55,350
dzieci, kiedy jest potrzebny.

24
00:01:55,370 --> 00:02:01,880
Teraz, dla maej aplikacji, jak nasza, nie jest to zbyt uyteczne, poniewa zrobienie tej dodatkowej proby

25
00:02:01,880 --> 00:02:03,500
o kilobajt lub co

26
00:02:03,500 --> 00:02:06,310
takiego, co ten skadnik jest warty, jeli

27
00:02:06,560 --> 00:02:12,730
chodzi o jej rozmiar, nie jest zbyt uyteczne, ale warto zna t technik. prawdziwe dla

28
00:02:12,730 --> 00:02:17,550
wikszych aplikacji, ktre budujesz, gdzie to moe mie znaczenie, gdzie pobierasz cakiem sporo.

29
00:02:17,600 --> 00:02:25,430
Technika pobierania tylko tego, co jest potrzebne, jest znana jako dzielenie kodu lub leniwe adowanie

30
00:02:25,880 --> 00:02:33,190
i tam zasadniczo chciaby si upewni, e w komponencie adujesz komponent tylko wtedy, gdy

31
00:02:33,440 --> 00:02:34,730
go potrzebujesz.

32
00:02:34,880 --> 00:02:41,750
Jak to dziaa? Aby zaimplementowa podzia kodu lub leniwe adowanie, stworzylimy aplikacj reagowania i

33
00:02:41,750 --> 00:02:42,720
reagujemy na ni

34
00:02:43,190 --> 00:02:44,500
i to jest wane.

35
00:02:44,510 --> 00:02:49,250
Ta technika bdzie dziaa w celu reagowania na router i tworzenia aplikacji

36
00:02:49,250 --> 00:02:54,400
reagowania, poniewa podzia kodu zaley w duej mierze od konfiguracji uywanego pakietu internetowego,

37
00:02:54,440 --> 00:02:56,870
mimo wszystko jest to zaawansowana koncepcja.

38
00:02:56,870 --> 00:03:03,380
Wic sposb, w jaki pokazuj, to sposb, w jaki dziaa z konfiguracj z aplikacji do tworzenia reakcji,

39
00:03:03,380 --> 00:03:11,030
ktra jest cakiem nowoczesn i dobr konfiguracj, wic jest szansa, e dziaa rwnie w kadym przyzwoicie skonfigurowanym projekcie Webpack lub,

40
00:03:11,360 --> 00:03:13,920
jak powiedziaem na pocztku z tego kursu,

41
00:03:13,970 --> 00:03:17,390
zdecydowanie polecam uywanie i tworzy aplikacj do reagowania.

42
00:03:17,780 --> 00:03:23,900
Aby to dziaao w tej konfiguracji, potrzebujemy komponentu wyszego rzdu.

43
00:03:23,900 --> 00:03:30,710
Stwrzmy wic nowy folder hoc, a nastpnie dodam nowy komponent,

44
00:03:30,980 --> 00:03:33,750
ktry nazwabym AsyncComponent AsyncComponent. js to nazwa pliku javascript,

45
00:03:33,760 --> 00:03:34,520
poniewa

46
00:03:34,640 --> 00:03:41,390
ten komponent lub ten kod powinien mi pomc adowa komponent asynchronicznie. mi. tylko wtedy, gdy jest to potrzebne.

47
00:03:41,480 --> 00:03:45,320
Teraz tutaj,

48
00:03:45,320 --> 00:03:51,790
w tym pliku AsyncComponent, utworz now sta, now funkcj tutaj, ktr nazwabym AsyncComponent.

49
00:03:51,840 --> 00:03:54,290
Tam spodziewam si dosta argumentu komponentu importu,

50
00:03:54,580 --> 00:04:03,220
ktry w kocu bdzie funkcj i wrc do tego, jak uy tej funkcji asyncComponent i co przekaza tutaj dokadnie w cigu nastpnych sekund.

51
00:04:03,220 --> 00:04:10,590
Tak wic, teraz musz co zwrci, a zwrc tutaj klas, ktra rozszerza komponent,

52
00:04:10,660 --> 00:04:18,200
wic normalny komponent reagujcy musz wic zaimportowa reagowa, poniewa bdzie on rwnie uywa

53
00:04:18,400 --> 00:04:21,020
niektrych elementw jsx i komponentw. Teraz w ciele

54
00:04:21,100 --> 00:04:30,490
tej klasy, teraz oczywicie potrzebuj

55
00:04:30,490 --> 00:04:32,960
rwnie metody renderowania.

56
00:04:33,180 --> 00:04:35,550
Ale zanim dojdziemy do

57
00:04:35,890 --> 00:04:43,870
tego, ustawi stan i tam chc mie stan, ktry ma waciwo komponentu, ktra jest zerowa. Ten stan tutaj, ta waciwo komponentu zostanie ustawiona na dynamicznie

58
00:04:43,870 --> 00:04:51,490
adowany komponent, a kod dla

59
00:04:51,490 --> 00:04:56,230
tego zostanie zaimplementowany w componentDidMount.

60
00:04:56,350 --> 00:04:57,610
Wic kiedy ten komponent zosta zamontowany tutaj, ten zawijany komponent wyszego rzdu.

61
00:04:57,820 --> 00:05:04,790
Teraz, jak ju powiedziaem, komponent importu powinien by referencj

62
00:05:05,260 --> 00:05:10,950
do funkcji na kocu, wic chc zrobi

63
00:05:11,350 --> 00:05:20,140
tutaj komponent importu, a to faktycznie bdzie funkcja, ktra powrci jako obietnica.

64
00:05:20,560 --> 00:05:23,710
Wiem, poniewa wiem, kim jestem, w jaki sposb zamierzam uy tego AsyncComponent w funkcji tego.

65
00:05:23,710 --> 00:05:30,220
Wtedy blog dostanie argument, moe cmp, nazwa zaley od ciebie,

66
00:05:30,250 --> 00:05:37,990
ktra bdzie miaa jedn waciwo domyln, ktra bdzie skadnikiem, ktry adowalimy dynamicznie.

67
00:05:38,530 --> 00:05:42,010
Wic na tym blogu mog to nazwa. setState i ustaw mj stan komponentu na domylny cmp. Dzieje si tak dlatego, e mamy

68
00:05:42,340 --> 00:05:52,900
skonfigurowany tutaj program do tworzenia reakcji.

69
00:05:52,900 --> 00:05:56,590
Jest to oczywicie bardzo zalene od typu funkcji,

70
00:05:57,100 --> 00:06:04,090
do ktrej bdzie si odnosi komponent importu funkcji, i ktry poka Wam w cigu nastpnych minut,

71
00:06:04,090 --> 00:06:06,180
jak ju mwiem, bez zmartwie.

72
00:06:06,190 --> 00:06:08,160
Tak wic w pewnym

73
00:06:08,260 --> 00:06:15,580
momencie zaadujemy rzeczywisty komponent, ktrego chcemy uy i bdzie on przechowywany w naszym stanie. Std w metodzie renderowania chcemy j wyrenderowa, utworz sta i nadam jej

74
00:06:15,580 --> 00:06:23,080
nazw C i tak powinno by. stan. skadnik.

75
00:06:23,080 --> 00:06:26,920
Nastpnie chc zwrci jsx w tej metodzie renderowania, a ja sprawdz, czy C jest ustawione w potrjnym wyraeniu.

76
00:06:27,140 --> 00:06:34,850
Jeli jest ustawiony, to zrenderuj C jako

77
00:06:34,970 --> 00:06:40,690
normalny komponent reagujcy, uyj tego. rekwizyty podaj tutaj sztuczk, aby przekaza jakiekolwiek rekwizyty, ktre mog by nam

78
00:06:40,790 --> 00:06:49,910
potrzebne, a ustawi j na null, jeli C nie jest

79
00:06:49,910 --> 00:06:53,860
jeszcze ustawione, wic jeli komponent nie zosta jeszcze rozwizany. Oczywicie teraz musz rwnie wyeksportowa

80
00:06:53,870 --> 00:07:01,550
t funkcj asyncComponent tutaj.

81
00:07:01,550 --> 00:07:02,570
Teraz moemy zapisa

82
00:07:03,500 --> 00:07:10,290
ten plik i teraz moemy wrci do komponentu blogu, do ktrego importujemy nowe posty, chc zaadowa je teraz dynamicznie.

83
00:07:10,310 --> 00:07:13,660
Teraz chodzi o to, kiedy importujesz co

84
00:07:13,670 --> 00:07:21,650
takiego tutaj, z importowaniem czego, z ktrego w zasadzie informujesz webpack, narzdzie do kompilacji, ktre jest uywane za

85
00:07:22,280 --> 00:07:29,390
kulisami na temat tej zalenoci, i wcza je do globalnego pakietu, to jest jego zadanie .

86
00:07:29,690 --> 00:07:34,230
Teraz leniwe adowanie jest dokadnie odwrotnoci tego, co chcemy

87
00:07:34,700 --> 00:07:39,090
zrobi, nie chcemy wcza go do pakietu, chcemy

88
00:07:39,110 --> 00:07:41,780
go zaadowa w razie potrzeby.

89
00:07:41,780 --> 00:07:44,100
Wci pakiet internetowy musi

90
00:07:44,110 --> 00:07:51,140
by w stanie dynamicznie przygotowa dodatkowy pakiet dla tego potencjalnie zaadowanego kodu.

91
00:07:51,140 --> 00:07:52,050
Musimy wic

92
00:07:52,520 --> 00:07:57,920
skomentowa ten stary sposb importowania, a zamiast tego utworz now sta, ktr nazwabym AsyncNewPost, nazwa

93
00:07:57,920 --> 00:08:03,390
oczywicie zaley od ciebie, to teraz uyje tej nowej funkcji asyncComponent stworzylimy w folderze hoc.

94
00:08:03,440 --> 00:08:10,040
Wic zaimportuj asyncComponent z.

95
00:08:10,310 --> 00:08:15,340
A teraz przejd do folderu hoc i zaimportuj go z

96
00:08:15,350 --> 00:08:20,980
tego pliku AsyncComponent, a nastpnie uyj AsyncComponent tutaj i go wykonam.

97
00:08:22,080 --> 00:08:28,450
Teraz asyncComponent tej funkcji, wymaga argumentu i powiedziaem ci, e

98
00:08:28,480 --> 00:08:36,450
ten argument, w tej funkcji nazwalimy go komponentem import, e ten argument powinien

99
00:08:36,450 --> 00:08:42,510
by funkcj, dlatego wykonalimy jak tutaj w componentDidMount Musimy wic

100
00:08:42,510 --> 00:08:44,430
przekaza jak funkcj

101
00:08:45,030 --> 00:08:52,800
do asyncComponent i powinna to by funkcja anonimowa, uywam tutaj funkcji strzaki ES6.

102
00:08:52,800 --> 00:08:56,040
Ciekaw czci jest to, co zwracamy w tej funkcji i pamitamy, e

103
00:08:56,340 --> 00:09:00,020
jeli napiszesz j w jednym wierszu, to, co si pojawi, natychmiast zostanie zwrcone.

104
00:09:00,330 --> 00:09:05,810
Jeli uywasz nawiasw klamrowych, musisz zwrci co ze

105
00:09:05,970 --> 00:09:10,710
sowem kluczowym return, wic zastosuj dusze podejcie.

106
00:09:10,710 --> 00:09:13,530
tam uyj sowa kluczowego importu jako funkcji.

107
00:09:13,530 --> 00:09:17,750
Jest to specjalna skadnia, dynamiczna skadnia

108
00:09:17,780 --> 00:09:19,900
importu, ktra oznacza,

109
00:09:20,030 --> 00:09:29,790
e wszystko, co przychodzi pomidzy nawiasami, jest tutaj importowane tylko wtedy, gdy ta funkcja jest

110
00:09:29,910 --> 00:09:38,490
tutaj wykonywana i ta funkcja zostanie tutaj wykonana dopiero po renderowaniu AsyncNewPost na ekranie.

111
00:09:38,520 --> 00:09:40,720
A wic tutaj bior swoj

112
00:09:41,220 --> 00:09:49,650
oryginaln ciek do nowego posta i teraz importuj to tylko wtedy, gdy staa ta jest gdzie uywana.

113
00:09:49,650 --> 00:09:51,420
Teraz oczywicie chc go

114
00:09:51,420 --> 00:09:53,700
gdzie uy, chc go uy

115
00:09:53,940 --> 00:10:01,920
na dole kontenera blogu na nowej trasie, zamiast uywa nowego postu jako komponentu, chc uy AsyncNewPost

116
00:10:01,920 --> 00:10:03,250
jako komponentu.

117
00:10:03,390 --> 00:10:06,800
W kocu bdzie to komponent,

118
00:10:06,810 --> 00:10:13,660
poniewa pamitaj o AsyncComponent zwraca skadnik, mamy skadnik wyszego rzdu.

119
00:10:13,680 --> 00:10:15,270
Zwraca klas za pomoc metody

120
00:10:15,270 --> 00:10:17,280
renderowania, wic jest to poprawny komponent.

121
00:10:17,400 --> 00:10:19,620
Ten komponent w kocu wyrenderuje jaki

122
00:10:19,620 --> 00:10:25,830
dynamicznie adowany komponent i my decydujemy, ktry komponent powinien by z funkcj, ktr przekazalimy do AsyncComponent.

123
00:10:25,960 --> 00:10:30,600
Jeli teraz to zapiszemy i wrcimy do naszej

124
00:10:30,600 --> 00:10:37,530
aplikacji, obejrzyj t ciek w prawym dolnym rogu po klikniciu nowego postu. Gdy klikn tam, zobaczysz, e to 1chunk. Zaadowano plik js, ktry jest

125
00:10:37,540 --> 00:10:44,710
bardzo may.

126
00:10:44,710 --> 00:10:47,400
Jest to dodatkowy pakiet sieciowy stworzony,

127
00:10:47,400 --> 00:10:55,780
poniewa podczas czenia naszego kodu, wykry on t dynamiczn skadni, o ktrej wie, dziki naszej konfiguracji, ktrej uywamy,

128
00:10:55,780 --> 00:11:01,450
tej konfiguracji przepywu pracy budowania i dlatego utworzy dodatkowy pakiet z nowym

129
00:11:01,450 --> 00:11:07,900
komponentem i wszystkie potencjalne komponenty potomne, ktre byy wyczne dla tego komponentu, jeli takie istniej.

130
00:11:07,900 --> 00:11:09,880
Ale nie dodaa go do gwnego pakietu, zamiast

131
00:11:09,880 --> 00:11:12,550
tego jest gotowa do zaadowania go, gdy jest to potrzebne,

132
00:11:12,550 --> 00:11:15,600
kiedy faktycznie wczamy AsyncNewPost, ktry robimy tylko podczas nawigacji do / newpost. W ten sposb adujesz komponenty asynchronicznie i

133
00:11:15,820 --> 00:11:24,760
jak ju wspomniaem, jest to bardzo przydatne w wikszych aplikacjach,

134
00:11:24,760 --> 00:11:27,400
w ktrych jest wicej fragmentw kodu,

135
00:11:27,580 --> 00:11:35,470
na przykad cay obszar funkcji w Twojej aplikacji, ktry moe nawet nie zosta odwiedzony przez uytkownika, dziki czemu

136
00:11:35,470 --> 00:11:42,190
moesz go zapisa kodowa z przodu, aby zaadowa go tylko wtedy, gdy jest potrzebny.

137
00:11:42,190 --> 00:11:46,990
&nbsp;

