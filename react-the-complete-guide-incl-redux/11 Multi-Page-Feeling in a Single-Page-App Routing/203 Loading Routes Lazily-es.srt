1
00:00:02,090 --> 00:00:08,240
Estamos llegando al final hay un concepto ms avanzado, aunque no es difcil de implementar, sino

2
00:00:08,240 --> 00:00:10,580
un concepto avanzado que quiero cubrir.

3
00:00:10,970 --> 00:00:15,060
Volvamos a nuestra aplicacin y realmente mostremos a qu me refiero.

4
00:00:15,230 --> 00:00:20,550
Permtanme establecerme en verdadero para que podamos ir a una nueva publicacin nuevamente.

5
00:00:20,690 --> 00:00:23,100
Ahora que has visto tu publicacin, puedes cargarla.

6
00:00:23,120 --> 00:00:27,910
Y vayamos a la pestaa Red y a las herramientas de desarrollador all.

7
00:00:27,920 --> 00:00:32,870
Si echamos un vistazo a todas las solicitudes una vez que cargamos la pgina.

8
00:00:32,870 --> 00:00:38,310
As que vamos a las publicaciones que ves que estamos cargando este paquete J de la siguiente manera.

9
00:00:38,330 --> 00:00:40,560
Esto contiene todo nuestro cdigo fuente.

10
00:00:40,640 --> 00:00:43,940
Y aqu es relativamente grande porque estamos en modo de desarrollo.

11
00:00:43,940 --> 00:00:47,400
Sern mucho ms pequeos los que nos enven para produccin.

12
00:00:47,450 --> 00:00:53,430
Se trata de un flujo de trabajo de generacin de energa optimizado automticamente, luego hablaremos de esto ms adelante cuando lo implementemos.

13
00:00:53,430 --> 00:01:02,210
An as, cargar todo el paquete con todo el cdigo de nuestra aplicacin por adelantado puede ser malo si tenemos

14
00:01:02,210 --> 00:01:10,190
una gran aplicacin con distintas caractersticas y reas distintas y tiap donde un usuario nunca puede acceder a

15
00:01:10,340 --> 00:01:14,180
un rea determinada como una hora de aplicacin.

16
00:01:14,270 --> 00:01:19,840
Si el usuario nunca gana su nueva publicacin, carga el cdigo responsable de ese componente.

17
00:01:20,000 --> 00:01:23,790
No tiene mucho sentido si echamos un vistazo a nuestras rutas.

18
00:01:23,840 --> 00:01:28,080
Estoy hablando del nuevo componente de publicacin aqu.

19
00:01:28,130 --> 00:01:33,120
Esto solo debe cargarse si el usuario realmente navega para recortar nuevas publicaciones.

20
00:01:33,350 --> 00:01:38,340
De lo contrario, nunca se necesitan publicaciones nuevas y todos los nios potenciales.

21
00:01:38,480 --> 00:01:46,310
Entonces, por qu deberamos descargar el descifrado desde el principio? Sera mejor no descargarlo y, por lo tanto, tener un trozo

22
00:01:46,460 --> 00:01:53,510
inicial ms pequeo para descargar y, en su lugar, descargar el descdigo responsable de este componente y sus

23
00:01:53,840 --> 00:01:55,350
hijos cuando sea necesario.

24
00:01:55,370 --> 00:02:01,880
como la nuestra aqu, esto no es muy til porque hace una solicitud extra de un kilobyte o algo as.

25
00:02:01,880 --> 00:02:03,500
Ahora, para una pequea aplicacin

26
00:02:03,500 --> 00:02:06,310
Lo que vale este componente cuando se trata de su tamao.

27
00:02:06,560 --> 00:02:12,730
Eso no es muy til, pero es til conocer esta tcnica de manera real para aplicaciones ms

28
00:02:12,730 --> 00:02:17,550
grandes que se estn construyendo, donde puede importar dnde se est descargando bastante.

29
00:02:17,600 --> 00:02:25,430
La tcnica de descargar solo lo que necesita se conoce como divisin de cdigo o carga diferida.

30
00:02:25,880 --> 00:02:33,190
Y all esencialmente querr asegurarse de que en su componente solo est cargando el componente una vez

31
00:02:33,440 --> 00:02:34,730
que lo necesita.

32
00:02:34,880 --> 00:02:41,750
implementar la divisin del cdigo o la carga diferida con la aplicacin para crear acciones y volver a actuar en la ruta o en el futuro?

33
00:02:41,750 --> 00:02:42,720
Cmo funciona esto para

34
00:02:43,190 --> 00:02:44,500
Y eso es importante

35
00:02:44,510 --> 00:02:49,250
Esta tcnica funcionar para volver a actuar a Robert Ford y para crear reaccionar en.

36
00:02:49,250 --> 00:02:54,400
Porque la divisin de cdigo depende en gran medida de la configuracin de WePay que est utilizando.

37
00:02:54,440 --> 00:02:56,870
Es un concepto avanzado despus de todo.

38
00:02:56,870 --> 00:03:03,380
As que la forma en que te muestro es la forma en que funciona con la configuracin de la aplicacin

39
00:03:03,380 --> 00:03:11,030
create re-act, que es una configuracin bastante moderna y buena, as que es probable que tambin funcione en cualquier proyecto WePay decentemente configurado o

40
00:03:11,360 --> 00:03:13,920
como dije en el comienzo de este curso.

41
00:03:13,970 --> 00:03:17,390
Recomiendo usar create-re-act them de todos modos.

42
00:03:17,780 --> 00:03:23,900
Entonces, para que esto funcione en esta configuracin, necesitamos un componente de orden superior.

43
00:03:23,900 --> 00:03:30,710
As que creemos una nueva carpeta que Agios vea y luego agreguen un nuevo componente que nombrar

44
00:03:30,980 --> 00:03:33,750
un componente de sincronizacin como componente asincrnico.

45
00:03:33,760 --> 00:03:34,520
J. S. Ese

46
00:03:34,640 --> 00:03:41,390
es el nombre del archivo javascript porque este componente o este cdigo aqu me ayudara a cargar un componente de forma asncrona. mi. solo cuando es necesario

47
00:03:41,480 --> 00:03:45,320
Ahora aqu, en

48
00:03:45,320 --> 00:03:51,790
este archivo de componente asncrono, crear una nueva funcin consonntica al final que nombrar un componente de sincronizacin.

49
00:03:51,840 --> 00:03:54,290
All espero obtener mi argumento de componente

50
00:03:54,580 --> 00:04:03,220
de importacin que finalmente ser una funcin y volver a cmo usar esta funcin de componente asncrono y qu pasar aqu exactamente en los prximos segundos.

51
00:04:03,220 --> 00:04:10,590
Entonces, ahora necesito devolver algo y devolver una clase aqu que ampla el componente.

52
00:04:10,660 --> 00:04:18,200
Entonces, un componente normal de reaccin.

53
00:04:18,400 --> 00:04:21,020
Por lo tanto, necesito importar la

54
00:04:21,100 --> 00:04:30,490
reaccin porque tambin usar algo de GSX y componentes de volver a actuar ahora en el cuerpo de esa clase aqu.

55
00:04:30,490 --> 00:04:32,960
Ahora, por supuesto, tambin necesito un mtodo de renderizado.

56
00:04:33,180 --> 00:04:35,550
para esto implementado en el componente.

57
00:04:35,890 --> 00:04:43,870
Pero antes de llegar a esto establecer un estado y hay uno que tiene un estado que con una propiedad de componente

58
00:04:43,870 --> 00:04:51,490
que ahora s indica aqu, la propiedad del componente se establecer en el componente cargado dinmicamente y se obtendr el cdigo

59
00:04:51,490 --> 00:04:56,230
Fecha MT.

60
00:04:56,350 --> 00:04:57,610
Entonces, una vez que este componente se mont aqu, este componente de orden superior est envuelto.

61
00:04:57,820 --> 00:05:04,790
No, como dije, el componente de importacin debera ser una referencia de funcin al final.

62
00:05:05,260 --> 00:05:10,950
Entonces, lo que quiero hacer es ejecutar aqu el componente

63
00:05:11,350 --> 00:05:20,140
de importacin y esto en realidad ser una funcin que volver a ser una promesa.

64
00:05:20,560 --> 00:05:23,710
Me di cuenta porque s quin soy, cmo voy a usar este componente asncrono en la funcin de esto.

65
00:05:23,710 --> 00:05:30,220
Entonces el bloque obtendr un argumento CMPD, tal vez el nombre depende de usted,

66
00:05:30,250 --> 00:05:37,990
que tendr un valor predeterminado de propiedad que ser el componente que carguemos de forma dinmica.

67
00:05:38,530 --> 00:05:42,010
Entonces en este bloqueo entonces puedo llamar a este

68
00:05:42,340 --> 00:05:52,900
estado de conjunto y establecer mis estados de componente a CMPD por defecto, este es el caso debido a la configuracin que estamos usando aqu con create reaccionar.

69
00:05:52,900 --> 00:05:56,590
Por supuesto, todo depende en gran medida del tipo

70
00:05:57,100 --> 00:06:04,090
de funcin al que se referir el componente de importacin y que le mostrar en los prximos minutos.

71
00:06:04,090 --> 00:06:06,180
Como dije sin preocupaciones.

72
00:06:06,190 --> 00:06:08,160
debera ser este componente de estado.

73
00:06:08,260 --> 00:06:15,580
As que ahora en algn momento habremos cargado el componente real que queremos usar y se almacenar en nuestro estado,

74
00:06:15,580 --> 00:06:23,080
por lo tanto, el mtodo de renderizacin en el que queremos procesarlo trata a un nombre constante es C y este

75
00:06:23,080 --> 00:06:26,920
Entonces quiero devolver GSX y este mtodo de renderizado y comprobar si C se establece en un turno de cada expresin.

76
00:06:27,140 --> 00:06:34,850
Si est configurado, entonces renderizar C como un componente de accin normal.

77
00:06:34,970 --> 00:06:40,690
Utilizar esto spreads de este accesorio ms complicado para pasar cualquier

78
00:06:40,790 --> 00:06:49,910
problema que pueda necesitar a este componente y tambin establecerlo para saber si c an no est configurado.

79
00:06:49,910 --> 00:06:53,860
Entonces, si todava no se ha

80
00:06:53,870 --> 00:07:01,550
resuelto el componente, ahora tambin necesito exportar esta funcin del componente asncrono aqu.

81
00:07:01,550 --> 00:07:02,570
Ahora podemos guardar este otoo y ahora podemos volver al componente de bloque donde importamos nuevas publicaciones.

82
00:07:03,500 --> 00:07:10,290
Quiero cargar esto dinmicamente ahora.

83
00:07:10,310 --> 00:07:13,660
Ahora el asunto es que cuando importes algo

84
00:07:13,670 --> 00:07:21,650
como esto aqu con importacin de algo desde algn lugar, bsicamente Inforum Westpac DB construir la herramienta que te permite

85
00:07:22,280 --> 00:07:29,390
estar detrs de escena sobre esta dependencia y la incluir en el paquete global que hace su trabajo.

86
00:07:29,690 --> 00:07:34,230
Ahora, para una carga lenta, esto es exactamente lo contrario de lo que queremos hacer.

87
00:07:34,700 --> 00:07:39,090
No queremos incluirlo en el paquete.

88
00:07:39,110 --> 00:07:41,780
Queremos cargarlo cuando sea necesario.

89
00:07:41,780 --> 00:07:44,100
Todava el paquete mojado

90
00:07:44,110 --> 00:07:51,140
debe ser capaz de preparar dinmicamente un pandal adicional para este cdigo potencialmente cargado.

91
00:07:51,140 --> 00:07:52,050
Entonces, lo que tenemos que

92
00:07:52,520 --> 00:07:57,920
hacer es comentar esta forma antigua de importacin y en su lugar crearemos un nuevo nombre constante de Witchell. Async nuevo host. El nombre del curso depende de usted.

93
00:07:57,920 --> 00:08:03,390
Esto ahora usar esta nueva funcin de componente asncrono que creamos en la carpeta O C.

94
00:08:03,440 --> 00:08:10,040
De modo que todo importa el componente de sincronizacin desde.

95
00:08:10,310 --> 00:08:15,340
Y ahora todos pasan a la carpeta HAMC y se importan de ese archivo de componente asncrono.

96
00:08:15,350 --> 00:08:20,980
Y luego usar los componentes asncronos que eres y lo ejecutar.

97
00:08:22,080 --> 00:08:28,450
Ahora, el componente asincrnico esta funcin requiere un argumento y te dije que este

98
00:08:28,480 --> 00:08:36,450
argumento en esa funcin lo llamamos componente de importacin, que este argumento debera ser una funcin y

99
00:08:36,450 --> 00:08:42,510
que es por lo que ejecutamos como un componente de audicin en Mt. Entonces, tenemos que pasar alguna funcin al componente asincrnico y esta debera ser una funcin annima.

100
00:08:42,510 --> 00:08:44,430
Estoy usando como funcin 6 Erol aqu.

101
00:08:45,030 --> 00:08:52,800
La parte interesante es lo que devolvemos en esta funcin.

102
00:08:52,800 --> 00:08:56,040
Y tenga en cuenta que si lo escribe en una lnea, todo lo que venga bien del error se devuelve inmediatamente.

103
00:08:56,340 --> 00:09:00,020
Si usa llaves, debe devolver algo con la palabra clave return.

104
00:09:00,330 --> 00:09:05,810
As que voy a tomar un enfoque ms largo.

105
00:09:05,970 --> 00:09:10,710
Todos se usan para importar palabras clave como una funcin.

106
00:09:10,710 --> 00:09:13,530
Esta es una sintaxis especial.

107
00:09:13,530 --> 00:09:17,750
La sintaxis dinmica de importacin, que significa lo que sea que se encuentre entre parntesis aqu, solo es importante cuando se ejecuta esa funcin aqu

108
00:09:17,780 --> 00:09:19,900
y esa funcin solo se ejecutar una vez que la hagamos asincrnica.

109
00:09:20,030 --> 00:09:29,790
Usted publica en la pantalla.

110
00:09:29,910 --> 00:09:38,490
As que aqu no llev mi lbf original a una nueva publicacin y ahora solo estoy importando esto cuando esta constante

111
00:09:38,520 --> 00:09:40,720
se usa en alguna parte.

112
00:09:41,220 --> 00:09:49,650
Ahora, por supuesto, quiero usarlo en alguna parte.

113
00:09:49,650 --> 00:09:51,420
Quiero usarlo en la parte inferior del contenedor de mi bloque

114
00:09:51,420 --> 00:09:53,700
en la nueva ruta de publicacin en lugar de utilizar una nueva publicacin como componente.

115
00:09:53,940 --> 00:10:01,920
Quiero usar una nueva publicacin asncrona como componente.

116
00:10:01,920 --> 00:10:03,250
Eventualmente, esto ser un componente porque tenga en cuenta que el componente asncrono devuelve un componente.

117
00:10:03,390 --> 00:10:06,800
Tenemos un componente de orden superior.

118
00:10:06,810 --> 00:10:13,660
Devuelve una clase con un mtodo de renderizado.

119
00:10:13,680 --> 00:10:15,270
Entonces este es un componente vlido

120
00:10:15,270 --> 00:10:17,280
debera ser con la funcin que pasamos al componente asncrono.

121
00:10:17,400 --> 00:10:19,620
Este componente eventualmente renderizar algn componente cargado dinmicamente y decidiremos qu componente

122
00:10:19,620 --> 00:10:25,830
Ahora si guardamos esto y volvemos a nuestra aplicacin, miramos con fuerza en la parte inferior derecha.

123
00:10:25,960 --> 00:10:30,600
Cuando hago clic en una nueva publicacin una vez que hago clic all la vers como un fragmento de la siguiente manera.

124
00:10:30,600 --> 00:10:37,530
Cargado, que es muy pequeo.

125
00:10:37,540 --> 00:10:44,710
Esta es la pgina web adicional creada porque al agrupar nuestro cdigo detect esta sintaxis dinmica que conoce debido

126
00:10:44,710 --> 00:10:47,400
a nuestra configuracin que estamos utilizando para

127
00:10:47,400 --> 00:10:55,780
crear la configuracin de flujo de trabajo y por lo tanto cre el ancho de banda adicional un nuevo componente de publicacin

128
00:10:55,780 --> 00:11:01,450
y todos los componentes secundarios potenciales que eran exclusivos de ese componente, si alguno.

129
00:11:01,450 --> 00:11:07,900
Pero no lo agreg al paquete principal.

130
00:11:07,900 --> 00:11:09,880
En cambio, est preparado para cargarlo cuando sea necesario.

131
00:11:09,880 --> 00:11:12,550
Cuando realmente incluimos una nueva publicacin asncrona, lo cual solo hacemos cuando navegamos

132
00:11:12,550 --> 00:11:15,600
para recortar una publicacin nueva, se plantea cmo cargar los componentes de forma asncrona.

133
00:11:15,820 --> 00:11:24,760
Y como mencion, esto es extremadamente til en aplicaciones ms grandes donde hay trozos de cdigo ms grandes, un rea de funciones completa

134
00:11:24,760 --> 00:11:27,400
en su aplicacin, por ejemplo, que ni

135
00:11:27,580 --> 00:11:35,470
siquiera puede visitar el usuario, por lo que puede guardar ese cdigo por adelantado para cargarlo solamente cuando sea necesario .

136
00:11:35,470 --> 00:11:42,190
&nbsp;

137
00:11:42,190 --> 00:11:46,990
&nbsp;

