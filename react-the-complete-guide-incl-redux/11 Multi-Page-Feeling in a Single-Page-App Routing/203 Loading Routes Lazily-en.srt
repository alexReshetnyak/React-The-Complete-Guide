1
00:00:02,090 --> 00:00:08,240
We're nearing the end, there's one more advanced concept though not difficult to implement but one advanced

2
00:00:08,240 --> 00:00:10,580
concept I want to cover.

3
00:00:10,970 --> 00:00:15,060
Let's go back to our application and to really show what I mean,

4
00:00:15,230 --> 00:00:20,550
let me set auth to true so that we can go to new post again.

5
00:00:20,690 --> 00:00:23,100
So now you see new post can be loaded,

6
00:00:23,120 --> 00:00:27,910
and let's go to the network tab in the developer tools. There

7
00:00:27,920 --> 00:00:32,870
if we have a look at all the requests once we load the page,

8
00:00:32,870 --> 00:00:38,310
so if I go into posts you see that we're loading this bundle.js file

9
00:00:38,330 --> 00:00:40,560
this contains all our source code,

10
00:00:40,640 --> 00:00:43,940
in here, it's relatively big because we're in development mode,

11
00:00:43,940 --> 00:00:47,400
it will be much smaller once you are shipping this for production,

12
00:00:47,450 --> 00:00:53,430
It's optimized power build workflow automatically then, I'll talk about this later when we deploy

13
00:00:53,430 --> 00:01:02,210
the app. Still loading the entire bundle with all the code of our application up front can be bad if we have

14
00:01:02,210 --> 00:01:10,190
a big application with distinct features and distinct areas in the app where a user might never visit

15
00:01:10,340 --> 00:01:14,180
a certain area. Like in our app, we have the posts,

16
00:01:14,270 --> 00:01:19,840
if the user never visits new post, loading the code responsible for that component

17
00:01:20,000 --> 00:01:23,790
doesn't make a lot of sense. If we have a look at our routes

18
00:01:23,840 --> 00:01:28,080
I'm talking about the new post component here,

19
00:01:28,130 --> 00:01:33,120
this should only be loaded if the user actually navigates to /newposts

20
00:01:33,350 --> 00:01:38,340
otherwise new posts and all potential children are never needed.

21
00:01:38,480 --> 00:01:46,310
So why should we download the code up front? Would it be better to not download it and hence have a smaller

22
00:01:46,460 --> 00:01:53,510
upfront chunk to download and instead download the code responsible for this component and its children

23
00:01:53,840 --> 00:01:55,350
when needed.

24
00:01:55,370 --> 00:02:01,880
Now for a tiny application as ours here, this is not super useful because making that extra request for

25
00:02:01,880 --> 00:02:03,500
one kilobyte or something,

26
00:02:03,500 --> 00:02:06,310
what this component is worth when it comes to its size,

27
00:02:06,560 --> 00:02:12,730
that's not super useful but it is useful to know this technique for real for bigger applications you

28
00:02:12,730 --> 00:02:17,550
are building where this might matter where you are downloading quite a bit.

29
00:02:17,600 --> 00:02:25,430
The technique of downloading only what you need is known as code splitting or lazy loading

30
00:02:25,880 --> 00:02:33,190
and there you would essentially want to make sure that in your component, you're only loading the component

31
00:02:33,440 --> 00:02:34,730
once you need it.

32
00:02:34,880 --> 00:02:41,750
How does this work? To implement code splitting or lazy loading, we have create react app and react route

33
00:02:41,750 --> 00:02:42,720
for

34
00:02:43,190 --> 00:02:44,500
and that's important.

35
00:02:44,510 --> 00:02:49,250
This technique will work for react router for and for create react app

36
00:02:49,250 --> 00:02:54,400
because code splitting depends heavily on the webpack configuration you are using,

37
00:02:54,440 --> 00:02:56,870
it is an advanced concept after all.

38
00:02:56,870 --> 00:03:03,380
So the way I'm showing you is the way it works with the config from create react app which is a pretty

39
00:03:03,380 --> 00:03:11,030
modern and good configuration though, so chances are it also works in any decently set up webpack project

40
00:03:11,360 --> 00:03:13,920
or as I said at the beginning of this course,

41
00:03:13,970 --> 00:03:17,390
I strongly recommend using create react app anyway.

42
00:03:17,780 --> 00:03:23,900
So for this to work in this setup, we need a higher order component.

43
00:03:23,900 --> 00:03:30,710
So let's create a new folder hoc and then there, I'll add a new component which I'll name AsyncComponent

44
00:03:30,980 --> 00:03:33,750
AsyncComponent

45
00:03:33,760 --> 00:03:34,520
.js

46
00:03:34,640 --> 00:03:41,390
that's the javascript file name, because this component or this code here should help me load a component

47
00:03:41,480 --> 00:03:45,320
asynchronously i.e. only when it's needed.

48
00:03:45,320 --> 00:03:51,790
Now here in this AsyncComponent file I will create a new constant, a new function in here which I'll name

49
00:03:51,840 --> 00:03:54,290
asyncComponent.

50
00:03:54,580 --> 00:04:03,220
There I expect to get my import component argument which will in the end be a function and I'll come

51
00:04:03,220 --> 00:04:10,590
back to how to use this asyncComponent function and what to pass here exactly over the next seconds.

52
00:04:10,660 --> 00:04:18,200
So there, I now need to return something and I will return a class here which extends component,

53
00:04:18,400 --> 00:04:21,020
so a normal react component

54
00:04:21,100 --> 00:04:30,490
therefore I need to import react because it will also use some jsx and component from react. Now in

55
00:04:30,490 --> 00:04:32,960
the body of that class here,

56
00:04:33,180 --> 00:04:35,550
I now of course also need a render method.

57
00:04:35,890 --> 00:04:43,870
But before we come to this, I'll set up state and there I want to have a state which with a component

58
00:04:43,870 --> 00:04:51,490
property which is null. This state here, this component property will be set to the dynamically loaded

59
00:04:51,490 --> 00:04:56,230
component and the code for this will get implemented in

60
00:04:56,350 --> 00:04:57,610
componentDidMount.

61
00:04:57,820 --> 00:05:04,790
So once this component was mounted here, this wrapping higher order component.

62
00:05:05,260 --> 00:05:10,950
Now as I said import component should be a function reference in the end,

63
00:05:11,350 --> 00:05:20,140
so what I want to do is I want to execute import component here and this actually will be a function

64
00:05:20,560 --> 00:05:23,710
which will return as a promise.

65
00:05:23,710 --> 00:05:30,220
I know because I know who I am how I'm going to use this AsyncComponent in the function of this.

66
00:05:30,250 --> 00:05:37,990
Then blog will get an argument, cmp maybe, the name is up to you which will have one property default

67
00:05:38,530 --> 00:05:42,010
which will be the component we loaded dynamically.

68
00:05:42,340 --> 00:05:52,900
So in this then blog, I can call this.setState and set my component state to cmp default. This is the

69
00:05:52,900 --> 00:05:56,590
case due to be set up we're using here with create react app.

70
00:05:57,100 --> 00:06:04,090
It is all of course heavily reliant on the type of function import component will refer to and which

71
00:06:04,090 --> 00:06:06,180
I'll show you in the next minutes

72
00:06:06,190 --> 00:06:08,160
as I said, no worries.

73
00:06:08,260 --> 00:06:15,580
So now at some point of time, we will have loaded the actual component we want to use and it will be

74
00:06:15,580 --> 00:06:23,080
stored in our state. Hence in the render method, we want to render it, I'll create a constant and name it C and

75
00:06:23,080 --> 00:06:26,920
this should be this.state.component.

76
00:06:27,140 --> 00:06:34,850
Then I want to return jsx in this render method and I'll check if C is set in a ternary expression.

77
00:06:34,970 --> 00:06:40,690
If it is set, then I'll render C as a normal react component,

78
00:06:40,790 --> 00:06:49,910
I'll use this this.props spread trick here to pass any props we might need to this component and I'll

79
00:06:49,910 --> 00:06:53,860
set it to null if C is not set yet,

80
00:06:53,870 --> 00:07:01,550
so if the component hasn't been resolved yet. Of course I now also need to export this asyncComponent

81
00:07:01,550 --> 00:07:02,570
function here.

82
00:07:03,500 --> 00:07:10,290
Now we can save this file and now we can go back to the blog component where we do import new posts,

83
00:07:10,310 --> 00:07:13,660
I want to load this dynamically now.

84
00:07:13,670 --> 00:07:21,650
Now the thing is when ever you are importing something like this here, with import something from somewhere

85
00:07:22,280 --> 00:07:29,390
you basically inform webpack, the build tool which gets used behind the scenes about this dependency

86
00:07:29,690 --> 00:07:34,230
and it will include it in the global bundle, this is its job.

87
00:07:34,700 --> 00:07:39,090
Now for a lazy loading, this is exactly the opposite of what we want to do,

88
00:07:39,110 --> 00:07:41,780
we don't want to include it in the bundle,

89
00:07:41,780 --> 00:07:44,100
we want to load it when needed.

90
00:07:44,110 --> 00:07:51,140
Still webpack needs to be able to dynamically prepare some extra bundle for this potentially loaded

91
00:07:51,140 --> 00:07:52,050
code.

92
00:07:52,520 --> 00:07:57,920
So what we have to do is we have to comment out this old way of importing and instead I'll create a

93
00:07:57,920 --> 00:08:03,390
new constant which I'll name AsyncNewPost, the name of course is up to you,

94
00:08:03,440 --> 00:08:10,040
this will now use this new asyncComponent function we created in hoc folder.

95
00:08:10,310 --> 00:08:15,340
So I'll import asyncComponent from.

96
00:08:15,350 --> 00:08:20,980
And now I'll move up to the hoc folder and import it from that AsyncComponent file

97
00:08:22,080 --> 00:08:28,450
and I'll then use AsyncComponent here and execute it.

98
00:08:28,480 --> 00:08:36,450
Now asyncComponent this function, requires an argument and I told you that this argument, in that function

99
00:08:36,450 --> 00:08:42,510
we named it import component, that this argument should be a function which is why we executed like one

100
00:08:42,510 --> 00:08:44,430
here in componentDidMount

101
00:08:45,030 --> 00:08:52,800
So we have to pass some function to asyncComponent and this should be an anonymous function,

102
00:08:52,800 --> 00:08:56,040
I'm using an ES6 arrow function here.

103
00:08:56,340 --> 00:09:00,020
The interesting part is what we return in this function

104
00:09:00,330 --> 00:09:05,810
and keep in mind if you write it in one line, whatever comes right of the error is immediately returned.

105
00:09:05,970 --> 00:09:10,710
If you use curly braces you need to return something with the return keyword

106
00:09:10,710 --> 00:09:13,530
so I'm going to take the longer approach.

107
00:09:13,530 --> 00:09:17,750
there I'll use the import keyword as a function.

108
00:09:17,780 --> 00:09:19,900
This is a special syntax,

109
00:09:20,030 --> 00:09:29,790
the dynamic import syntax which means whatever comes between the parentheses here is only imported

110
00:09:29,910 --> 00:09:38,490
when that function here is executed and that function here will only be executed once we render

111
00:09:38,520 --> 00:09:40,720
AsyncNewPost to the screen.

112
00:09:41,220 --> 00:09:49,650
So here, I then take my original path to new post and now I'm only importing this when this constant

113
00:09:49,650 --> 00:09:51,420
gets used somewhere.

114
00:09:51,420 --> 00:09:53,700
Now of course I want to use it somewhere,

115
00:09:53,940 --> 00:10:01,920
I want to use it down at the bottom of my blog container at the new post route, instead of using new

116
00:10:01,920 --> 00:10:03,250
post as a component,

117
00:10:03,390 --> 00:10:06,800
I want to use AsyncNewPost as a component.

118
00:10:06,810 --> 00:10:13,660
Eventually this will be a component because keep in mind AsyncComponent returns a component,

119
00:10:13,680 --> 00:10:15,270
we have a higher order component.

120
00:10:15,270 --> 00:10:17,280
It returns a class with a render method

121
00:10:17,400 --> 00:10:19,620
so this is a valid component.

122
00:10:19,620 --> 00:10:25,830
This component will eventually render some dynamically loaded component and we decide which component it

123
00:10:25,960 --> 00:10:30,600
should be with the function we passed to AsyncComponent.

124
00:10:30,600 --> 00:10:37,530
Now if we save this and we go back to our application, watch that path on the bottom right

125
00:10:37,540 --> 00:10:44,710
when I click on new post. Once I click there you'll see that this 1chunk.js file was

126
00:10:44,710 --> 00:10:47,400
loaded which is very small.

127
00:10:47,400 --> 00:10:55,780
This is an extra bundle webpack created because whilst bundling our code, it detected this dynamic syntax

128
00:10:55,780 --> 00:11:01,450
here which it knows due to our set up we're using too, this build workflow setup and therefore it created the

129
00:11:01,450 --> 00:11:07,900
extra bundle with the new post component and all potential child components that were exclusive to that

130
00:11:07,900 --> 00:11:09,880
component if any.

131
00:11:09,880 --> 00:11:12,550
But it didn't add it to the main bundle,

132
00:11:12,550 --> 00:11:15,600
instead it's prepared to load it when needed

133
00:11:15,820 --> 00:11:24,760
when we actually include AsyncNewPost which we only do when navigating to /newpost. This is how

134
00:11:24,760 --> 00:11:27,400
you load components asynchronously,

135
00:11:27,580 --> 00:11:35,470
and as I mentioned this is extremely useful in bigger apps where there are bigger chunks of code, a whole

136
00:11:35,470 --> 00:11:42,190
feature area in your application for example which might not even be visited by the user so you can

137
00:11:42,190 --> 00:11:46,990
save that code up front to only load it when needed.

