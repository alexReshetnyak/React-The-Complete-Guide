1
00:00:02,350 --> 00:00:07,570
Assim, muita otimizao foi aplicada, como mencionado anteriormente, sinta-se  vontade para aplicar mais.

2
00:00:07,570 --> 00:00:12,760
Existe uma que definitivamente podemos apresentar, algo que eu no fiz antes porque queria terminar

3
00:00:12,760 --> 00:00:17,940
essa aplicao primeiro, mas agora  hora de otimizar a maneira como carregamos nossas rotas,

4
00:00:17,950 --> 00:00:19,680
podemos usar o carregamento lento l.

5
00:00:19,720 --> 00:00:21,670
Vamos dar uma olhada no nosso aplicativo. js arquivo, temos

6
00:00:21,880 --> 00:00:28,720
a rota de check-out e as ordens de rota e ambos no so necessariamente visitados por ns, podemos nunca

7
00:00:28,720 --> 00:00:30,580
ir para o check-out, podemos

8
00:00:30,580 --> 00:00:32,870
nunca wisit a rea de pedidos.

9
00:00:33,220 --> 00:00:37,760
Agora, a parte de autenticao talvez tambm nunca seja

10
00:00:37,840 --> 00:00:41,720
visitada, podemos carreg-las de forma assncrona, preguiosamente.

11
00:00:42,120 --> 00:00:43,750
O construtor de hambrguer, no tanto,

12
00:00:43,750 --> 00:00:48,200
essa  a nossa pgina raiz, ns sempre visitamos isso, mas as outras rotas, com certeza.

13
00:00:48,250 --> 00:00:52,810
Agora voc aprendeu como  possvel implementar o carregamento lento com o roteador reacionado,

14
00:00:52,930 --> 00:00:55,330
sinta-se  vontade para adicion-lo sozinho, darei

15
00:00:55,330 --> 00:01:00,670
uma breve pausa para pausar o vdeo e testar isso sozinho e, em seguida, faremos isso

16
00:01:00,670 --> 00:01:03,280
juntos e certifique-se de que ns carregamos o

17
00:01:03,280 --> 00:01:06,060
checkout, pedidos e auth somente quando precisarmos deles.

18
00:01:10,090 --> 00:01:11,490
Ento voc teve sucesso?

19
00:01:11,500 --> 00:01:13,190
Vamos tentar juntos, em primeiro

20
00:01:13,270 --> 00:01:23,720
lugar vou adicionar um componente de ordem mais alta, um componente assncrono e l o AsyncComponent. js arquivo, eu colo no cdigo que eu escrevi na seo de

21
00:01:23,770 --> 00:01:31,870
roteamento, ento essa funo asyncComponent que pega uma funo como uma entrada que ento executa aqui embaixo, esta funo

22
00:01:31,870 --> 00:01:34,730
usar esta sintaxe de importao dinmica e

23
00:01:34,780 --> 00:01:40,660
ento nos dar uma promessa onde ns eventualmente obtenha o componente que queremos que

24
00:01:40,660 --> 00:01:43,950
ele carregue e onde renderizamos esse componente.

25
00:01:43,960 --> 00:01:47,120
Isso  o que estamos fazendo aqui, vamos salvar este arquivo

26
00:01:47,130 --> 00:01:50,600
e vamos agora us-lo no aplicativo. arquivo js para carregar alguns componentes preguiosamente.

27
00:01:50,840 --> 00:02:00,520
Ento, para isso, eu vou importar o AsyncComponent e agora eu preciso ir para a minha pasta hoc, AsyncComponent e

28
00:02:00,550 --> 00:02:02,410
carreg-lo desse arquivo l

29
00:02:02,800 --> 00:02:11,090
e ento eu quero configurar alguns componentes para serem carregados preguiosamente, o asyncCheckout por exemplo, eu Eu

30
00:02:11,090 --> 00:02:15,480
nomeio este asyncCheckout constante e usarei o AsyncComponent aqui.

31
00:02:15,540 --> 00:02:22,510
Agora precisamos passar um argumento para asyncComponent e esse argumento deve ser uma funo, ento eu vou passar uma

32
00:02:22,570 --> 00:02:27,500
funo aqui, uma funo que ir eventualmente retornar esta declarao de importao como

33
00:02:27,500 --> 00:02:34,520
uma funo onde podemos ento definir o caminho para o componente que queremos Carregar preguiosamente,  claro que 

34
00:02:34,520 --> 00:02:37,820
o nosso continer de check-out, neste caso, com isso

35
00:02:37,850 --> 00:02:38,860
podemos nos livrar

36
00:02:38,870 --> 00:02:40,410
do checkout aqui.

37
00:02:40,460 --> 00:02:44,410
Agora vamos replicar isso duas vezes para pedidos e auth,

38
00:02:44,570 --> 00:02:52,490
ento ns temos as asyncOrders aqui tambm, onde eu obviamente pegarei o caminho da importao de pedidos antigos e carrego

39
00:02:52,490 --> 00:02:59,340
isso preguiosamente e ento podemos remover a importao de pedidos originais e agora o mesmo para auth,

40
00:02:59,350 --> 00:03:00,440
aqui eu vou

41
00:03:00,470 --> 00:03:08,750
nomear este asyncAuth, pegue o caminho da antiga auth auth e, claro, substitua isso aqui embaixo, ento ns podemos nos livrar

42
00:03:08,750 --> 00:03:11,070
da auth auth aqui tambm.

43
00:03:11,090 --> 00:03:13,360
Agora ns temos todos esses componentes assncronos,

44
00:03:13,400 --> 00:03:14,470
vamos agora us-los.

45
00:03:14,570 --> 00:03:22,510
Ento aqui teremos asyncCheckout, para asyncAuth ou desculpe-me, para auth, vamos adicionar asyncAuth e para o

46
00:03:22,730 --> 00:03:29,360
componente old orders, vamos adicionar asyncOrders. E agora todos esses dados, todos esses componentes

47
00:03:29,720 --> 00:03:31,570
so carregados apenas quando necessrio.

48
00:03:31,790 --> 00:03:33,410
Ento, vamos salvar tudo, vamos

49
00:03:33,680 --> 00:03:39,720
voltar ao nosso aplicativo e vamos dar uma olhada no aplicativo e ver se ele funciona como seria de se

50
00:03:39,720 --> 00:03:40,420
esperar, eu

51
00:03:40,430 --> 00:03:46,220
abro as guias de rede para que possamos ver quaisquer solicitaes de rede e devemos ver uma quando eu

52
00:03:46,250 --> 00:03:47,450
clique em autenticar, de

53
00:03:47,450 --> 00:03:48,340
fato, ns carregamos.

54
00:03:48,380 --> 00:03:48,780
pedao 2.

55
00:03:48,780 --> 00:03:56,970
Agora, se eu entrar aqui, envie, estou de volta ao construtor de hambrgueres.

56
00:03:57,010 --> 00:04:01,560
Se eu recarregar o aplicativo, ainda devo estar conectado automaticamente para que isso continue funcionando.

57
00:04:01,570 --> 00:04:05,200
Agora vamos visitar os pedidos e ns baixaremos o

58
00:04:05,200 --> 00:04:13,030
chunk 3 com o cdigo de pedidos e agora, finalmente, vamos construir um hambrguer para ver se tambm carregamos a

59
00:04:13,030 --> 00:04:14,450
parte de checkout preguiosamente.

60
00:04:14,530 --> 00:04:16,840
Vamos clicar em continuar e baixamos.

61
00:04:16,840 --> 00:04:17,680
chunk 1, que

62
00:04:17,710 --> 00:04:19,770
 o cdigo relacionado a checkout.

63
00:04:19,960 --> 00:04:26,710
E com isso, melhoramos nosso aplicativo porque agora s carregamos o cdigo que precisamos carregar e

64
00:04:26,710 --> 00:04:28,910
no carregamos nenhum cdigo desnecessrio.

65
00:04:29,110 --> 00:04:35,530
Essa  uma grande melhoria e um passo importante antes de realmente criarmos nossa aplicao para produo, embora,

66
00:04:35,620 --> 00:04:40,430
como tambm mencionei no mdulo de roteamento, o carregamento lento nem sempre  melhor.

67
00:04:40,510 --> 00:04:46,390
Se os mdulos carregados de forma lenta so muito pequenos, como eles esto em nosso aplicativo para ser honesto, voc pode no

68
00:04:46,420 --> 00:04:48,540
ganhar nada com a adio de carregamento lento.

69
00:04:48,550 --> 00:04:54,430
Ainda quero mostr-lo porque  um conceito importante e algo que voc deve considerar ao otimizar

70
00:04:54,520 --> 00:04:56,230
qualquer aplicativo que voc criar.

