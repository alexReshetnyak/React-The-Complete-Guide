1
00:00:02,350 --> 00:00:07,570
Tak wic zastosowano duo optymalizacji, jak wspomniano wczeniej, zachcamy do skadania kolejnych wnioskw.

2
00:00:07,570 --> 00:00:12,760
Jest jedno, ktre moemy zdecydowanie wprowadzi, co, czego wczeniej nie zrobiem, poniewa chciaem najpierw ukoczy

3
00:00:12,760 --> 00:00:17,940
t aplikacj, ale teraz nadszed czas, aby zoptymalizowa sposb, w jaki adujemy nasze trasy, moemy

4
00:00:17,950 --> 00:00:19,680
skorzysta z leniwego adowania.

5
00:00:19,720 --> 00:00:21,670
Rzumy okiem na nasz aplikacj. Plik js,

6
00:00:21,880 --> 00:00:28,720
mamy tras kasow i tras zamwie, a obie nie s koniecznie odwiedzane przez nas, moemy nigdy

7
00:00:28,720 --> 00:00:30,580
nie i do kasy,

8
00:00:30,580 --> 00:00:32,870
moemy nigdy nie zwodzi obszaru zamwie.

9
00:00:33,220 --> 00:00:37,760
Teraz cz auth by moe nigdy nie zostanie

10
00:00:37,840 --> 00:00:41,720
odwiedzona, moemy zaadowa je wszystkie asynchronicznie, leniwie.

11
00:00:42,120 --> 00:00:43,750
Budowniczy hamburgerw, nie tak bardzo,

12
00:00:43,750 --> 00:00:48,200
to nasza strona gwna, zawsze odwiedzamy to, ale inne trasy, na pewno.

13
00:00:48,250 --> 00:00:52,810
Teraz dowiedziae si, jak moesz zaimplementowa leniwy adunek za pomoc routera reagowania, moesz

14
00:00:52,930 --> 00:00:55,330
go doda samodzielnie, zrobi krtk przerw, aby

15
00:00:55,330 --> 00:01:00,670
wstrzyma wideo i wyprbowa to na wasn rk, a wtedy na pewno zrobimy to razem

16
00:01:00,670 --> 00:01:03,280
i upewnij si, e adujemy zamwienia, zamwienia

17
00:01:03,280 --> 00:01:06,060
i autoryzacj tylko wtedy, gdy ich potrzebujemy.

18
00:01:10,090 --> 00:01:11,490
Czy odnosie sukces?

19
00:01:11,500 --> 00:01:13,190
Sprbujmy razem, najpierw

20
00:01:13,270 --> 00:01:23,720
dodam mj komponent wyszego rzdu, komponent async i tam AsyncComponent. js, wklejam kod, ktry napisaem w sekcji routingu, wic ta

21
00:01:23,770 --> 00:01:31,870
funkcja asyncComponent, ktra przyjmuje funkcj jako dane wejciowe, ktre nastpnie wykonuje tutaj, ta funkcja uyje

22
00:01:31,870 --> 00:01:34,730
tej dynamicznej skadni importu, a

23
00:01:34,780 --> 00:01:40,660
nastpnie przekae nam obietnic, w ktrej ostatecznie pobierz komponent, ktry chcemy

24
00:01:40,660 --> 00:01:43,950
zaadowa i gdzie nastpnie wyrenderujemy ten komponent.

25
00:01:43,960 --> 00:01:47,120
Wanie to robimy, zapiszmy ten plik i uywajmy

26
00:01:47,130 --> 00:01:50,600
go teraz w aplikacji. plik js, aby zaadowa niektre skadniki leniwie.

27
00:01:50,840 --> 00:02:00,520
W zwizku z tym zaimportuj AsyncComponent, a teraz musz przej do mojego folderu hoc, AsyncComponent i zaadowa go

28
00:02:00,550 --> 00:02:02,410
z tego pliku,

29
00:02:02,800 --> 00:02:11,090
a nastpnie chc ustawi niektre skadniki, ktre maj by adowane lazily, na przykad asyncCheckout, I

30
00:02:11,090 --> 00:02:15,480
' Nazwij t sta asyncCheckout i uyj tutaj AsyncComponent.

31
00:02:15,540 --> 00:02:22,510
Teraz musimy przekaza argument do asyncComponent i ten argument powinien by funkcj, wic przeka tutaj

32
00:02:22,570 --> 00:02:27,500
funkcj, funkcj, ktra ostatecznie zwrci t instrukcj importu jako funkcj, w

33
00:02:27,500 --> 00:02:34,520
ktrej moemy zdefiniowa ciek do komponentu, ktry chcemy adujmy si leniwie, oczywicie w tym przypadku

34
00:02:34,520 --> 00:02:37,820
jest to nasz koszyk kasowy, dziki ktremu

35
00:02:37,850 --> 00:02:38,860
moemy pozby

36
00:02:38,870 --> 00:02:40,410
si kasy tutaj.

37
00:02:40,460 --> 00:02:44,410
Teraz powtrzmy to dwa razy dla zamwie i

38
00:02:44,570 --> 00:02:52,490
auth, wic mamy tutaj rwnie asyncOrders, gdzie oczywicie pjd ciek od starego importu zamwie i zaaduj

39
00:02:52,490 --> 00:02:59,340
to leniwie, a nastpnie moemy usun import oryginalnych zamwie i teraz to samo dla

40
00:02:59,350 --> 00:03:00,440
auth, tutaj

41
00:03:00,470 --> 00:03:08,750
nazwij to asyncAuth, we ciek ze starego importu auth i oczywicie zamie go tutaj, wtedy moemy te

42
00:03:08,750 --> 00:03:11,070
pozby si importu auth tutaj.

43
00:03:11,090 --> 00:03:13,360
Teraz otrzymujemy wszystkie te asynchroniczne komponenty,

44
00:03:13,400 --> 00:03:14,470
wykorzystajmy je teraz.

45
00:03:14,570 --> 00:03:22,510
Tak wic bdziemy mieli asyncCheckout, asyncAuth lub przepraszam, dla auth, dodamy asyncAuth i

46
00:03:22,730 --> 00:03:29,360
dla starego komponentu zamwie, dodamy asyncOrders. A teraz wszystkie te dane, wszystkie te komponenty s

47
00:03:29,720 --> 00:03:31,570
adowane tylko w razie potrzeby.

48
00:03:31,790 --> 00:03:33,410
Zapiszmy wic wszystko, wrmy

49
00:03:33,680 --> 00:03:39,720
do naszej aplikacji i spjrzmy na aplikacj i sprawdmy, czy dziaa tak, jak bymy tego

50
00:03:39,720 --> 00:03:40,420
oczekiwali, otwieram

51
00:03:40,430 --> 00:03:46,220
karty sieciowe, abymy mogli zobaczy dowolne dania sieciowe i powinnimy je zobaczy, kiedy kliknij

52
00:03:46,250 --> 00:03:47,450
na uwierzytelnianie, faktycznie,

53
00:03:47,450 --> 00:03:48,340
adujemy.

54
00:03:48,380 --> 00:03:48,780
fragment 2.

55
00:03:48,780 --> 00:03:56,970
Jeli teraz si tu zaloguj, wylij, wracam do budowniczego burgerw.

56
00:03:57,010 --> 00:04:01,560
Jeli przeaduj aplikacj, nadal powinienem si logowa automatycznie, wic to nadal dziaa.

57
00:04:01,570 --> 00:04:05,200
Przejdmy teraz do zamwie i pobierzmy fragment

58
00:04:05,200 --> 00:04:13,030
3 z kodem zamwienia, a teraz wreszcie zbudujmy burgera, aby sprawdzi, czy adujemy te cz

59
00:04:13,030 --> 00:04:14,450
kasow leniwie.

60
00:04:14,530 --> 00:04:16,840
Kliknij przycisk Kontynuuj, a my pobierzemy.

61
00:04:16,840 --> 00:04:17,680
fragment 1,

62
00:04:17,710 --> 00:04:19,770
ktry jest kodem zwizanym z kasami.

63
00:04:19,960 --> 00:04:26,710
Dziki temu poprawilimy nasz aplikacj, poniewa teraz adujemy tylko kod, ktry musimy wczyta, i

64
00:04:26,710 --> 00:04:28,910
nie adujemy niepotrzebnego kodu.

65
00:04:29,110 --> 00:04:35,530
To jest znaczna poprawa i jeden wany krok, zanim faktycznie zbudujemy nasz aplikacj do produkcji,

66
00:04:35,620 --> 00:04:40,430
chocia, jak wspomniaem w module routingu, leniwy adowanie nie zawsze jest lepsze.

67
00:04:40,510 --> 00:04:46,390
Jeli leniwie zaadowane moduy s bardzo mae, poniewa s w naszej aplikacji szczerze mwic, moesz

68
00:04:46,420 --> 00:04:48,540
nie zyska niczego, dodajc leniwe adowanie.

69
00:04:48,550 --> 00:04:54,430
Nadal chc to pokaza, poniewa jest to wana koncepcja i co, co naley wzi pod uwag w

70
00:04:54,520 --> 00:04:56,230
optymalizacji kadej aplikacji, ktr budujesz.

