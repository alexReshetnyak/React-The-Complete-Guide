1
00:00:02,350 --> 00:00:07,570
Quindi  stata applicata molta ottimizzazione, come accennato prima, sentitevi liberi di applicare di pi.

2
00:00:07,570 --> 00:00:12,760
Ce n' una che possiamo sicuramente introdurre, qualcosa che non ho fatto prima perch volevo completare prima

3
00:00:12,760 --> 00:00:17,940
questa applicazione, ma ora  il momento di ottimizzare il modo in cui cariciamo i nostri percorsi,

4
00:00:17,950 --> 00:00:19,680
possiamo usare il caricamento lazy l.

5
00:00:19,720 --> 00:00:21,670
Diamo un'occhiata alla nostra app. js file, abbiamo

6
00:00:21,880 --> 00:00:28,720
il percorso di checkout e la rotta degli ordini e entrambi non sono necessariamente visitati da noi, potremmo

7
00:00:28,720 --> 00:00:30,580
non andare mai alla cassa,

8
00:00:30,580 --> 00:00:32,870
non potremmo mai verificare l'area ordini.

9
00:00:33,220 --> 00:00:37,760
Ora anche la parte auth non viene mai visitata,

10
00:00:37,840 --> 00:00:41,720
possiamo caricarli tutti in modo asincrono, pigramente.

11
00:00:42,120 --> 00:00:43,750
Il costruttore di hamburger, non cos

12
00:00:43,750 --> 00:00:48,200
tanto,  la nostra pagina principale, la visitiamo sempre, ma gli altri percorsi, di sicuro.

13
00:00:48,250 --> 00:00:52,810
Ora hai imparato come implementare il caricamento pigro con il router di risposta, sentiti

14
00:00:52,930 --> 00:00:55,330
libero di aggiungerlo da solo, ti dar

15
00:00:55,330 --> 00:01:00,670
una breve pausa per mettere in pausa il video e provarlo da solo e poi lo

16
00:01:00,670 --> 00:01:03,280
faremo sicuramente insieme e assicurati di caricare checkout,

17
00:01:03,280 --> 00:01:06,060
ordini e autenticazione solo quando ne abbiamo bisogno.

18
00:01:10,090 --> 00:01:11,490
Quindi, hai avuto successo?

19
00:01:11,500 --> 00:01:13,190
Proviamolo insieme, prima di

20
00:01:13,270 --> 00:01:23,720
tutto aggiunger il mio componente di ordine superiore, componente asincrono e l l'AsyncComponent. js file, l incollo il codice che ho scritto nella sezione di

21
00:01:23,770 --> 00:01:31,870
routing, quindi questa funzione asyncComponent che prende una funzione come input che poi esegue qui, questa funzione user questa

22
00:01:31,870 --> 00:01:34,730
sintassi di importazione dinamica e quindi ci

23
00:01:34,780 --> 00:01:40,660
dar una promessa in cui alla fine prendi il componente che vogliamo che carichi

24
00:01:40,660 --> 00:01:43,950
e dove eseguiamo il rendering di questo componente.

25
00:01:43,960 --> 00:01:47,120
Questo  quello che stiamo facendo qui, salviamo questo

26
00:01:47,130 --> 00:01:50,600
file e utilizziamolo ora nell'app. file js per caricare alcuni componenti pigramente.

27
00:01:50,840 --> 00:02:00,520
Quindi, per questo, importer AsyncComponent da e ora devo andare nella mia cartella ad hoc, AsyncComponent e caricarlo

28
00:02:00,550 --> 00:02:02,410
da quel file

29
00:02:02,800 --> 00:02:11,090
l e poi voglio impostare alcuni componenti da caricare pigramente, il asyncCheckout per esempio, I

30
00:02:11,090 --> 00:02:15,480
' Chiamer questa costante asyncCheckout e user AsyncComponent qui.

31
00:02:15,540 --> 00:02:22,510
Ora dobbiamo passare un argomento a asyncComponent e quell'argomento dovrebbe essere una funzione quindi passer qui una

32
00:02:22,570 --> 00:02:27,500
funzione, una funzione che alla fine restituir questa istruzione import come una

33
00:02:27,500 --> 00:02:34,520
funzione in cui possiamo definire il percorso del componente che vogliamo caricare pigramente, ovviamente questo  il

34
00:02:34,520 --> 00:02:37,820
nostro contenitore cassa in questo caso, con questo

35
00:02:37,850 --> 00:02:38,860
possiamo sbarazzarci

36
00:02:38,870 --> 00:02:40,410
della cassa qui.

37
00:02:40,460 --> 00:02:44,410
Ora replichiamo questa cosa due volte per ordini e

38
00:02:44,570 --> 00:02:52,490
auth, quindi anche qui abbiamo gli asincronizzatori in cui ovviamente prender il percorso dai vecchi ordini di

39
00:02:52,490 --> 00:02:59,340
importazione e li caricher pigramente e quindi possiamo rimuovere gli ordini originali importati e ora

40
00:02:59,350 --> 00:03:00,440
lo stesso

41
00:03:00,470 --> 00:03:08,750
per auth, qui chiamer asyncAuth, prender il percorso dalla vecchia auth auth e ovviamente lo rimpiazzeremo qui, quindi

42
00:03:08,750 --> 00:03:11,070
potremo sbarazzarci anche dell'importazione di auth.

43
00:03:11,090 --> 00:03:13,360
Ora otteniamo tutti questi componenti

44
00:03:13,400 --> 00:03:14,470
asincroni, usiamoli ora.

45
00:03:14,570 --> 00:03:22,510
Quindi qui avremo asyncCheckout, asyncAuth o mi scusi, per auth, aggiungeremo asyncAuth e per il

46
00:03:22,730 --> 00:03:29,360
componente dei vecchi ordini, aggiungeremo asyncOrders. E ora tutti quei dati, tutti questi componenti

47
00:03:29,720 --> 00:03:31,570
vengono caricati solo quando necessario.

48
00:03:31,790 --> 00:03:33,410
Quindi salviamo tutto, torniamo

49
00:03:33,680 --> 00:03:39,720
alla nostra applicazione e diamo un'occhiata all'applicazione e vediamo se funziona come ci aspetteremmo, apro le

50
00:03:39,720 --> 00:03:40,420
schede di

51
00:03:40,430 --> 00:03:46,220
rete in modo che possiamo vedere tutte le richieste di rete e dovremmo vederne una

52
00:03:46,250 --> 00:03:47,450
quando clicca su

53
00:03:47,450 --> 00:03:48,340
autenticati, anzi, carichiamo.

54
00:03:48,380 --> 00:03:48,780
pezzo 2.

55
00:03:48,780 --> 00:03:56,970
Ora se accedo qui, invia, sono tornato al costruttore di hamburger.

56
00:03:57,010 --> 00:04:01,560
Se ricarico l'app, dovrei comunque effettuare l'accesso automaticamente, quindi funziona ancora.

57
00:04:01,570 --> 00:04:05,200
Ora andiamo a visitare gli ordini e scarichiamo il

58
00:04:05,200 --> 00:04:13,030
pezzo 3 con il codice degli ordini e ora finalmente, costruiamo un hamburger per vedere se cariciamo anche la

59
00:04:13,030 --> 00:04:14,450
parte del check-out pigramente.

60
00:04:14,530 --> 00:04:16,840
Facciamo clic su continua e scarichiamo.

61
00:04:16,840 --> 00:04:17,680
pezzo 1 che

62
00:04:17,710 --> 00:04:19,770
 il codice relativo al pagamento.

63
00:04:19,960 --> 00:04:26,710
E con ci, abbiamo migliorato la nostra applicazione perch ora carichiamo solo il codice che dobbiamo caricare e

64
00:04:26,710 --> 00:04:28,910
non cariciamo alcun codice non necessario.

65
00:04:29,110 --> 00:04:35,530
Questo  un grande miglioramento e un passo importante prima che realizziamo la nostra applicazione per la produzione anche se,

66
00:04:35,620 --> 00:04:40,430
come ho gi detto nel modulo di routing, il caricamento lento non  sempre migliore.

67
00:04:40,510 --> 00:04:46,390
Se i moduli caricati pigramente sono molto piccoli, come sono nella nostra app per essere onesti, non si potrebbe

68
00:04:46,420 --> 00:04:48,540
davvero ottenere nulla dall'aggiunta di caricamento pigro.

69
00:04:48,550 --> 00:04:54,430
Comunque voglio mostrarlo perch  un concetto importante e qualcosa che dovresti prendere in considerazione

70
00:04:54,520 --> 00:04:56,230
nell'ottimizzare qualsiasi applicazione tu costruisca.

