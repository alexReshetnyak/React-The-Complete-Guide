0
00:02.170 --> 00:05.940
So let's get started with React; the what, why and how.

1
00:06.160 --> 00:08.900
Let's start with the, "What is React?" question

2
00:08.980 --> 00:15.910
and let me cite a phrase from the official React page: "React is a JavaScript Library for building User

3
00:15.940 --> 00:17.110
Interfaces."

4
00:17.110 --> 00:19.910
Now, this is a nice statement, but what does it mean...?

5
00:19.930 --> 00:23.710
The first important point is the 'JavaScript Library' part.

6
00:23.740 --> 00:25.320
It is a JavaScript library.

7
00:25.330 --> 00:32.360
It is about building JavaScript-driven apps. React apps run in the browser. They don't run on the server,

8
00:32.380 --> 00:36.440
they run in the browser and this gives us a great advantage.

9
00:36.460 --> 00:39.980
Things happen instantly since they happen in the user's browser.

10
00:40.060 --> 00:45.850
We don't have to wait for a server response to get a new page or to render something new.

11
00:45.850 --> 00:47.980
The other important part in this statement

12
00:47.980 --> 00:55.750
is the 'User Interfaces' part. User Interfaces are basically what the user sees and React is all about

13
00:55.750 --> 00:58.710
using components for building these.

14
00:58.810 --> 01:03.690
If you think about it, you can split up any web page into components.

15
01:03.700 --> 01:04.750
Here's an example

16
01:04.750 --> 01:11.200
(this is just any random web page we can think of). We might have this header area, a sidebar and then,

17
01:11.200 --> 01:13.180
on the right, some content.

18
01:13.180 --> 01:16.330
Now, we clearly can split this up into components.

19
01:16.450 --> 01:23.660
We could have a Header component, a Sidebar component and then a headline in the Article Content component.

20
01:24.040 --> 01:28.480
Now, why is thinking like this important or useful?

21
01:28.480 --> 01:36.670
Well, if we split up our web app or website into such components, we can build these building blocks

22
01:36.670 --> 01:41.460
(these components) as contained pieces of code.

23
01:41.560 --> 01:45.960
We don't have to build our entire web page as one bigger picture.

24
01:46.000 --> 01:48.730
We can build all these tiny things on their own.

25
01:48.730 --> 01:51.040
This of course makes working in teams easier.

26
01:51.130 --> 01:57.850
But even if we're working alone, it makes it easy for us to keep our code manageable. If we change the

27
01:57.850 --> 01:59.150
headline later on,

28
01:59.170 --> 02:04.810
we only have to go into that component and update it; we don't have to find that code in our entire

29
02:04.810 --> 02:06.610
web page code.

30
02:06.610 --> 02:12.700
We can also easily reuse components. For example, if we have a list item component and we want to output a list

31
02:12.760 --> 02:20.070
of these list items, then we only have to write the code once and can then easily reuse it and

32
02:20.170 --> 02:21.350
this is important.

33
02:21.370 --> 02:29.870
React components can be thought of as custom HTML elements. In the end, you're just writing custom HTML

34
02:29.870 --> 02:38.110
elements. This is what React is about and it therefore solves the problem of having to build complex user

35
02:38.110 --> 02:46.840
interfaces with what HTML and JavaScript gives you; by writing maintainable, manageable and reusable pieces

36
02:47.110 --> 02:51.840
of that code which you can throw into your web app wherever you need to use it.

37
02:51.850 --> 02:53.460
Let's have a look at some examples.