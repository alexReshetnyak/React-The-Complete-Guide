1
00:00:02,170 --> 00:00:09,100
Do tej pory dowiedziae si duo o tym, jak radzi sobie z bdami i dowiedzie si, jaki jest stan

2
00:00:09,100 --> 00:00:09,900
twojej aplikacji.

3
00:00:10,060 --> 00:00:16,240
Czasami masz kod, ktry moe zawie w czasie wykonywania i wiesz o tym, ale nie moesz zagwarantowa,

4
00:00:16,240 --> 00:00:17,510
e zawsze dziaa.

5
00:00:17,620 --> 00:00:24,100
W tym przypadku prawdopodobnie chcesz pokaza uytkownikowi fajny ekran lub co najmniej niestandardowy komunikat o bdzie.

6
00:00:24,100 --> 00:00:27,350
Pozwl, e poka ci skonstruowany

7
00:00:27,680 --> 00:00:36,170
przykad, powiedzmy, e kiedy wyrenderujemy klas osoby, faktycznie mamy szans na bd.

8
00:00:36,340 --> 00:00:46,270
Tak wic utworz losow liczb z matematyk. losowe i jeli losowe jest wiksze ni. 7, wic dostajemy 30 procentow

9
00:00:46,270 --> 00:00:58,240
szans, wtedy faktycznie rzuc nowy bd, co poszo nie tak i nie powinno to by w instrukcji return,

10
00:00:58,240 --> 00:01:01,300
ale w ciele funkcji.

11
00:01:01,300 --> 00:01:04,630
Teraz z tym czasem powinnimy otrzyma

12
00:01:04,810 --> 00:01:06,050
ten bd,

13
00:01:06,070 --> 00:01:11,400
sprbujmy tego, oszczdzajmy ten komponent i przeczajmy osoby i natychmiast zawiedzie.

14
00:01:11,440 --> 00:01:16,240
Wic widzielimy ten bd, poniewa mamy trzy komponenty, ktre mamy 30 procent szans na kady komponent,

15
00:01:16,360 --> 00:01:17,870
nie jest to mao prawdopodobne.

16
00:01:17,980 --> 00:01:20,280
Czasami powinno si to uda,

17
00:01:20,320 --> 00:01:21,440
ale tak jak

18
00:01:21,790 --> 00:01:26,470
w tym przypadku, ale czasami te si nie uda, jak tutaj,

19
00:01:26,470 --> 00:01:28,110
co poszo nie tak.

20
00:01:28,120 --> 00:01:30,510
Teraz oczywicie jest to skonstruowane, ale w prawdziwej

21
00:01:30,610 --> 00:01:35,770
aplikacji, moe rzeczywicie masz jaki kod, ktry uruchamia jak operacj, dociera do jakiego serwera WWW, ktry na pewno

22
00:01:35,770 --> 00:01:41,670
moe zawie i nie moesz zagwarantowa, e tak si nie stanie. Byoby mio wtedy przynajmniej

23
00:01:41,670 --> 00:01:46,970
uchwyci ten bd i traktowa go askawie.

24
00:01:46,980 --> 00:01:47,450
W

25
00:01:47,470 --> 00:01:52,480
tym celu utworz nowy komponent i jest to nowa funkcja, ktra zostaa

26
00:01:52,840 --> 00:01:53,980
dodana z reakcj

27
00:01:53,980 --> 00:01:59,690
16, nazw j granic bdu, poniewa mona tam tworzy tak zwane komponenty granicy bdu.

28
00:02:00,620 --> 00:02:02,930
Tam te okrel granic bdu,

29
00:02:02,950 --> 00:02:04,470
nazwa zaley od ciebie.

30
00:02:04,690 --> 00:02:11,920
Nazywa si to granic bdu, ale moesz nazwa ten komponent, jak tylko chcesz. Tutaj utworz granic

31
00:02:11,980 --> 00:02:19,570
bdw klasowych i bd rozszerza komponent.

32
00:02:19,720 --> 00:02:29,160
Musz wic zaimportowa zarwno reagowa, jak i nazwany import z komponentem

33
00:02:29,160 --> 00:02:30,750
nawiasw klamrowych.

34
00:02:30,780 --> 00:02:36,200
Dlatego tworzymy ten komponent dokadnie tak, jak stworzylimy aplikacj. skadnik js. Tam chc renderowa

35
00:02:36,200 --> 00:02:40,120
co, a ja co zwrc, po

36
00:02:40,200 --> 00:02:48,450
prostu zwrc znacznik h1, w ktrym mwi, e co poszo nie tak, jak to.

37
00:02:48,720 --> 00:02:55,170
Chc tylko zwrci to, jeli mamy bd, wic dodam stan, jeden z

38
00:02:55,170 --> 00:03:05,220
powodw, dla ktrych musimy uy klasy tutaj i ustawi mj stan, aby mia bd faszywy, bd rwnie przechowywa komunikat

39
00:03:05,220 --> 00:03:09,250
o bdzie, ktry jest tutaj pusty cig.

40
00:03:09,250 --> 00:03:12,780
Teraz moemy doda now waciwo lub

41
00:03:12,780 --> 00:03:22,990
now metod, ktr powinienem powiedzie, componentDidCatch, jest to metoda, ktra otrzymuje potencjalny bd i niektre dodatkowe informacje przekazywane do

42
00:03:22,990 --> 00:03:31,100
niego automatycznie przez reagowanie, a componentDidCatch zostanie wykonane, gdy komponent, ktry zawijamy z granic bdu,

43
00:03:31,120 --> 00:03:34,610
wyrzuci bd, poka ci, jak go

44
00:03:34,810 --> 00:03:36,790
uy w sekund, przede

45
00:03:36,790 --> 00:03:38,880
wszystkim wypenijmy logik tutaj.

46
00:03:39,370 --> 00:03:43,170
Tam chc ustawi stan, poniewa mamy teraz bd.

47
00:03:43,450 --> 00:03:55,160
Ustawi ma bd na true i ustawi komunikat o bdzie rwny bdowi, ktry powinien by tym komunikatem.

48
00:03:56,820 --> 00:04:00,870
Teraz w metodzie renderowania mamy dwa moliwe wyniki,

49
00:04:01,870 --> 00:04:06,610
albo nasz stan zawiera bd, w tym przypadku chc

50
00:04:06,610 --> 00:04:11,430
zwrci co poszo nie tak, albo by precyzyjnym, mog

51
00:04:11,440 --> 00:04:14,120
nawet wyrenderowa komunikat o bdzie.

52
00:04:14,140 --> 00:04:24,790
Wic to. stan. komunikat o bdzie lub w innym przypadku zwracam to. rekwizyty. dzieci, to wane

53
00:04:25,140 --> 00:04:30,480
przy dostpie do wniosku w komponencie klasy, musisz doda

54
00:04:30,660 --> 00:04:36,350
to z przodu, tak jak zrobie to ze stanem.

55
00:04:36,360 --> 00:04:41,830
Wic teraz to. rekwizyty. dzieci s czymkolwiek, co zawijamy

56
00:04:41,890 --> 00:04:49,710
w granicach bdu, to powinien by nasz domylny przypadek, ale jeli dostaniemy bd wyrzucony przez co, co zawijamy w granicach

57
00:04:50,360 --> 00:04:53,680
bdu, ta metoda zostanie uruchomiona, a parametr hasError zostanie

58
00:04:53,690 --> 00:04:56,970
ustawiony na True, a wic moemy to zwrci.

59
00:04:56,980 --> 00:05:00,070
Teraz pozwl mi po prostu wyeksportowa domyln,

60
00:05:00,070 --> 00:05:01,810
pozwl mi wyeksportowa ten

61
00:05:01,840 --> 00:05:03,940
komponent granicy bdu i zacznijmy

62
00:05:04,300 --> 00:05:06,050
go teraz uywa.

63
00:05:07,120 --> 00:05:12,090
Uyj go w aplikacji. js i zapakuj moj

64
00:05:12,520 --> 00:05:19,060
osob, wic zaimportuj granic bdu. / errorBoundary, ten folder i tam

65
00:05:20,370 --> 00:05:28,670
plik z bdem granicy js, bez rozszerzenia pliku jak zawsze, a teraz zawimy nasz

66
00:05:28,790 --> 00:05:29,570
osob.

67
00:05:29,840 --> 00:05:34,090
Wic tutaj na licie, na ktrej zwrciem osob, naprawd

68
00:05:34,100 --> 00:05:42,450
chc j zawin z granic bdu wanie tak. Rwnie po zamykajcym

69
00:05:42,560 --> 00:05:53,100
znaczniku granicy bdu osoby. Granica bdu jest tak zwanym komponentem wyszego rzdu, jest to komponent,

70
00:05:53,350 --> 00:06:00,240
ktry po prostu opakowuje komponent w celu obsugi wszelkich bdw, ktre komponent moe wyrzuci,

71
00:06:00,270 --> 00:06:01,170
w przypadku

72
00:06:01,390 --> 00:06:04,120
granicy bdu, to jego zadanie.

73
00:06:04,270 --> 00:06:12,010
Teraz z t osob owinit granic bdu, musimy rwnie przenie klucz tutaj do granicy bdu, poniewa

74
00:06:12,220 --> 00:06:18,990
jest to teraz element zewntrzny, ktry mapujemy i klucz zawsze musi by na zewntrznym

75
00:06:19,210 --> 00:06:24,040
elemencie w metodzie mapy, poniewa jest to element w rzeczywistoci replikujemy.

76
00:06:24,040 --> 00:06:29,110
Teraz zrbmy to i upewnijmy si, e wszystkie pliki s zapisane i wr do aplikacji.

77
00:06:29,110 --> 00:06:36,790
Teraz, jeli przeczasz osoby, dopki nie pojawi si bd, nadal bdziesz widzie ten bd w rodku, niestety.

78
00:06:36,970 --> 00:06:40,090
Teraz dzieje si tak tylko w trakcie programowania,

79
00:06:40,240 --> 00:06:46,690
gdy ju to zrobisz do produkcji i wylesz na prawdziwy serwer, nie zastpi on twojej strony

80
00:06:46,690 --> 00:06:47,860
w ten sposb.

81
00:06:47,860 --> 00:06:56,000
Zamiast tego zobaczysz, co zobaczysz w granicach bdu, jak komunikat o bdzie

82
00:06:56,020 --> 00:07:00,420
lub inn domyln wiadomo, ktr masz.

83
00:07:00,430 --> 00:07:06,820
Nie oznacza to, e powiniene skupi ca aplikacj z granicami bdw, uywaj ich tylko wtedy, gdy

84
00:07:07,000 --> 00:07:08,340
ma to sens.

85
00:07:08,470 --> 00:07:14,550
Zasadniczo uywaj ich tylko, jeli masz jaki kod, ktry wiesz, e moe zawie, nie zawijaj

86
00:07:14,600 --> 00:07:21,400
adnego innego kodu, poniewa jeli normalny kod si nie powiedzie, jako programista prawdopodobnie popenie bd podczas

87
00:07:21,400 --> 00:07:22,390
programowania, uywaj

88
00:07:22,690 --> 00:07:29,200
tylko granic bdw w przypadkach, w ktrych wiesz e moe zawie i nie moesz tego kontrolowa.

89
00:07:29,200 --> 00:07:36,370
To moe by dobre narzdzie do produkcji, aby pokaza niestandardowy komunikat o bdzie

90
00:07:36,370 --> 00:07:43,810
i nie ma awarii caej aplikacji, poniewa wtedy aplikacja bdzie dziaaa poprawnie, a tylko

91
00:07:43,810 --> 00:07:48,120
problematyczny komponent zostanie zastpiony niestandardowym komunikatem o bdzie.

92
00:07:48,160 --> 00:07:56,020
Granica bdu jest wic dobrym narzdziem do poznania, a nie narzdziem do uycia w dowolnym miejscu

93
00:07:56,020 --> 00:08:01,150
aplikacji, a zatem poczwszy od nastpnego moduu, kiedy zanurkujemy w tym

94
00:08:01,150 --> 00:08:04,540
maym przykadowym projekcie, usun go rwnie, aby

95
00:08:04,540 --> 00:08:10,170
go nie zawin. usu moje rdo bdw niestandardowych, aby zasymulowa ten bd.

96
00:08:10,200 --> 00:08:11,830
Dotyczy to tylko tego moduu.

