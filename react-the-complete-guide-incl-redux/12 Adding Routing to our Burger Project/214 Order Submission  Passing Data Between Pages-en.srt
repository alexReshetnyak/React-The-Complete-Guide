1
00:00:02,340 --> 00:00:05,830
So in the last lecture we made sure that we can load contact data.

2
00:00:05,910 --> 00:00:13,290
Now I want to make sure that when we click this button here, we do actually submit our order, for that

3
00:00:13,530 --> 00:00:21,230
i'll add an orderHandler which is a method created in this syntax so that we can easily use it on events.

4
00:00:21,630 --> 00:00:29,460
And then here on this button as in all buttons using our own button component, we can use our clicked property

5
00:00:29,550 --> 00:00:34,560
and pass the method which should get executed on a click as a reference.

6
00:00:34,560 --> 00:00:36,920
So now this order handler will get executed,

7
00:00:37,170 --> 00:00:42,670
we of course need access to the ingredients and contact data to make this request though

8
00:00:43,050 --> 00:00:44,680
and here's a little trick

9
00:00:44,700 --> 00:00:50,100
I want to show you, I taught you all the building blocks you need for that but it might still not be

10
00:00:50,100 --> 00:00:50,910
straight forward

11
00:00:50,910 --> 00:01:00,790
to be honest. In the check out container where we include the component like this on the contact data path,

12
00:01:00,890 --> 00:01:05,840
I somehow want to pass the ingredients which I do have in this component

13
00:01:06,030 --> 00:01:16,380
to contact data. Now for this, I'll not use component here but the render property which takes a method

14
00:01:16,410 --> 00:01:23,700
as you learned where you then output some jsx on the right side of the arrow and there I actually want

15
00:01:23,700 --> 00:01:29,130
to render the contactData element.

16
00:01:29,430 --> 00:01:32,880
Right now, the same as before, if I save this

17
00:01:32,880 --> 00:01:36,180
you see I still see the contact data for that route.

18
00:01:36,450 --> 00:01:44,700
However since I now render it manually here I can pass props to it and here, I'll add my ingredients

19
00:01:44,730 --> 00:01:54,760
as a prop and refer to this.state.ingredients. With this set up, if I now go into contact data here, I

20
00:01:54,760 --> 00:02:01,610
can of course access the ingredients on props because I just set up this property.

21
00:02:01,930 --> 00:02:03,570
Now let's see these come together, if

22
00:02:03,580 --> 00:02:12,370
I save this and build a new burger so that we have a real burger and I click continue and click

23
00:02:12,460 --> 00:02:21,520
order, well unfortunately this just reloaded the page because we're inside a form, that is something

24
00:02:21,520 --> 00:02:28,000
which is the default behavior actually but here, I should handle the event object in orderHandler

25
00:02:28,000 --> 00:02:33,900
and add event.PreventDefault to prevent the default which is to send a request which I don't want.

26
00:02:33,910 --> 00:02:40,640
I don't want to send a request because while this reloads my form, so after adding this, if we try this

27
00:02:40,660 --> 00:02:43,940
again, continue, if we now click order,

28
00:02:44,110 --> 00:02:46,550
you see now I print bacon and meat,

29
00:02:46,600 --> 00:02:52,090
I got the ingredients successfully and again, preventDefault is important on the orderHandler on

30
00:02:52,090 --> 00:02:56,980
the event you're getting automatically to prevent the default which would be to send the request and

31
00:02:56,980 --> 00:02:58,360
reload the page.

32
00:02:58,360 --> 00:03:02,930
So now we get the ingredients in there with the ingredients being passed,

33
00:03:03,070 --> 00:03:06,880
now submitting the request is easy of course.

34
00:03:06,880 --> 00:03:13,630
In the burger builder where I have commented out this code for sending a request, I'll take the code and

35
00:03:13,630 --> 00:03:22,990
cut it from there and add it into my orderHandler here, comment it back in and at a loading state here

36
00:03:23,020 --> 00:03:25,220
which initially is false,

37
00:03:25,390 --> 00:03:32,500
so that I can set it to True and show a spinner if I want to. Then here ingredients is

38
00:03:32,500 --> 00:03:33,660
this.props.ingredients,

39
00:03:33,670 --> 00:03:38,470
now are we get the ingredients. The total price here is a different story.

40
00:03:38,490 --> 00:03:41,530
The total price here is difficult because right now,

41
00:03:41,740 --> 00:03:46,930
The total price is only calculated and stored in the burger builder.

42
00:03:46,960 --> 00:03:55,300
So what we actually have to do is we have to pass the total price along with the ingredients from the burger

43
00:03:55,300 --> 00:03:59,910
builder to the checkout component, to the checkout container.

44
00:03:59,950 --> 00:04:07,980
So here I'll simply push it to my queryParams, I'll push the price equals

45
00:04:08,070 --> 00:04:11,720
and then this.state.total(price)

46
00:04:11,760 --> 00:04:19,080
so that is also passed as a query parameter. This of course also means that I have to get it inside my

47
00:04:19,080 --> 00:04:20,500
check out component.

48
00:04:20,520 --> 00:04:26,100
Now here I'm looping for all the ingredients and then I'm pushing down onto my ingredients array, the

49
00:04:26,100 --> 00:04:28,530
total prize of course is no ingredient

50
00:04:28,740 --> 00:04:31,030
so I shouldn't push it onto this array.

51
00:04:31,230 --> 00:04:38,420
So instead I'll have to check if param[0] is equal to price

52
00:04:38,430 --> 00:04:42,150
and this of course is only kind of a work around

53
00:04:42,180 --> 00:04:50,790
we'll find a better way of handling this state and passing it to this other container later in this course,

54
00:04:50,790 --> 00:04:51,890
no worries.

55
00:04:51,930 --> 00:04:54,990
So here I'll check if the param is price,

56
00:04:54,990 --> 00:04:58,080
So this param I just set up here,

57
00:04:58,080 --> 00:05:05,010
if it is price then I don't want to add it to my ingredients

58
00:05:05,040 --> 00:05:09,350
object here, in the else case is when I want to do that.

59
00:05:09,750 --> 00:05:18,090
So here if we have the price, i'll actually add a price variable here which I'll said to 0

60
00:05:18,120 --> 00:05:23,990
or null, whatever you like and then here, i'll set price equal to param[1]

61
00:05:24,060 --> 00:05:30,150
because now I know okay, I'm at the price element, let's extract the price value and store it in this price

62
00:05:30,150 --> 00:05:36,930
variable and then I can also set the state here and set the state for total price equal to price,

63
00:05:36,930 --> 00:05:44,310
what I have in this variable and I'll also initialize price here. By the way, ingredients can also be initialized

64
00:05:44,310 --> 00:05:47,840
with null now and price maybe with 0.

65
00:05:48,120 --> 00:05:54,140
And of course, this is now way of getting the price in the checkout component.

66
00:05:54,150 --> 00:06:01,210
Now I want to pass the price on to the contact data just as I pass on the ingredients

67
00:06:01,230 --> 00:06:06,880
so here I'll also a set price equal to this.state.total(price).

68
00:06:06,870 --> 00:06:13,620
Now with that, I receive a price property in a contact data which I can now use in there.

69
00:06:13,620 --> 00:06:20,200
So in there I can now also get the price on props, this.props.price.

70
00:06:20,370 --> 00:06:27,240
Now the other part here, I could already connect this to my inputs but I don't want to do this right

71
00:06:27,240 --> 00:06:28,590
now we'll do it later.

72
00:06:28,590 --> 00:06:34,320
So for now I'll leave all that data here as it is, axios isn't found here,

73
00:06:34,320 --> 00:06:39,070
the reason of course is that axios is imported in the burger builder,

74
00:06:39,270 --> 00:06:46,310
we need it there but I also now need that import which is referring to my own axios instance, I need

75
00:06:46,310 --> 00:06:48,290
it in the contact data too.

76
00:06:48,510 --> 00:06:54,870
So there I'll also add the axios import and there we actually need to go up one additional level in the

77
00:06:54,870 --> 00:06:57,300
import path like this.

78
00:06:57,300 --> 00:07:04,020
Now with that, we're having axios in there too. Make sure to save all the files and now you will see that

79
00:07:04,080 --> 00:07:10,980
once the app reloads, adds contact data, that you get an array regarding the ingredients.

80
00:07:11,130 --> 00:07:19,470
The reason for this is that we extract ingredients here in the check out component but we actually do this

81
00:07:19,500 --> 00:07:22,040
here when we initialize the state.

82
00:07:22,220 --> 00:07:29,510
The initial ingredients here are null though and if we pass that to contact data and we try to render

83
00:07:29,550 --> 00:07:33,860
the burger there, this doesn't work with ingredients that are null.

84
00:07:34,110 --> 00:07:43,860
Now to fix this, what we can do is we can simply change componentDidMount to WillMount before

85
00:07:43,860 --> 00:07:45,630
we render the child component,

86
00:07:45,630 --> 00:07:50,330
we already have access to the props there so we can already get the queryParams there.

87
00:07:50,370 --> 00:07:56,610
and we do this at the point of time where we don't render children so we can set up the state prior

88
00:07:56,610 --> 00:07:57,920
to render children.

89
00:07:57,930 --> 00:08:03,460
Now with that, if we go back to contact data, this should now all work here.

90
00:08:03,480 --> 00:08:10,070
Now one thing I want to do is this purchasing state which I'm setting here is not required any more,

91
00:08:10,440 --> 00:08:11,520
loading is a state

92
00:08:11,520 --> 00:08:12,930
I don't use yet.

93
00:08:12,930 --> 00:08:21,690
And now with that, if we go back to the application and build a real burger, I click order now and continue

94
00:08:21,690 --> 00:08:23,920
to the check out here.

95
00:08:24,300 --> 00:08:27,800
If I now click continue here and click order,

96
00:08:27,840 --> 00:08:35,070
we don't get a feedback here but if we now check out our firebase database, we should see this new order

97
00:08:35,070 --> 00:08:38,010
being placed at the end here.

98
00:08:38,010 --> 00:08:43,390
Now what that being stored in firebase, let's complete this set up with the contact data here.

99
00:08:43,530 --> 00:08:49,440
by taking advantage of the loading state and showing a spinner and by redirecting the user once we

100
00:08:49,530 --> 00:08:50,620
are done.

101
00:08:50,740 --> 00:08:53,030
Now let's start with spinner,

102
00:08:53,040 --> 00:08:57,120
we can simply import the spinner component here of course.

103
00:08:57,150 --> 00:09:00,600
Let's quickly add that, import spinner from

104
00:09:00,600 --> 00:09:08,160
and now we have to go into the components folder there into the UI folder there we have the spinner and

105
00:09:08,240 --> 00:09:12,390
that's the spinner file in there and when you output that spinner

106
00:09:12,930 --> 00:09:17,450
as long as we are loading. So here in the render method,

107
00:09:17,580 --> 00:09:23,790
I'll add my form variable which is the form down there by default

108
00:09:23,790 --> 00:09:33,060
but if this.state.loading is true, then form will actually be this spinner component.

109
00:09:33,120 --> 00:09:40,840
So let me grab the form from down there, this form element, I pointed into the form variable up here

110
00:09:41,220 --> 00:09:47,880
and then, I'll just output form here, this form variable which either is the form or the spinner.

111
00:09:48,310 --> 00:09:52,200
And let's now see if it does spin,

112
00:09:52,290 --> 00:09:55,270
I'm going to submit this invalid element here.

113
00:09:55,290 --> 00:09:56,120
We see a spinner

114
00:09:56,130 --> 00:09:57,480
so that's working.

115
00:09:57,480 --> 00:10:00,710
Let's now also make sure we redirect once we are done.

116
00:10:00,840 --> 00:10:08,920
Now in order to redirect here, normally we could run this.props.history, this history object we get by the

117
00:10:08,920 --> 00:10:12,870
router and then push for example to the route page.

118
00:10:13,030 --> 00:10:19,840
However due to the waiver loading contact data by basically rendering it manually down here with the

119
00:10:19,900 --> 00:10:25,310
render method, we don't have the history object available in there.

120
00:10:25,510 --> 00:10:28,550
Now there are two ways we can use to fix this,

121
00:10:28,600 --> 00:10:36,210
one is we can wrap the contact data component with this withRouter helper method.

122
00:10:36,520 --> 00:10:44,260
The other would be to pass history which we do get in the props of this render method here

123
00:10:44,560 --> 00:10:46,770
onto contact data.

124
00:10:46,810 --> 00:10:55,990
Now I will use the props I get in this render method and I will simply distribute them here after passing

125
00:10:56,020 --> 00:11:03,850
my own props with curly braces props. Whatever I get in the props here will be passed on to a contact

126
00:11:03,850 --> 00:11:04,260
data

127
00:11:04,270 --> 00:11:11,360
and therefore since this will include the history object, this push method here should work.

128
00:11:11,680 --> 00:11:19,570
So now with that, if I built a new burger again click order now, click continue and click order here,

129
00:11:19,630 --> 00:11:23,560
it does indeed push me back to the starting page.

130
00:11:23,650 --> 00:11:28,510
So this is the check out page and process finished, of course

131
00:11:28,540 --> 00:11:34,060
still some stuff we can do there regarding the form especially but we'll take care about this in

132
00:11:34,060 --> 00:11:36,120
the form's module.

133
00:11:36,130 --> 00:11:40,980
Now let's focus on the my orders page instead, another page

134
00:11:40,990 --> 00:11:42,070
we definitely need.

